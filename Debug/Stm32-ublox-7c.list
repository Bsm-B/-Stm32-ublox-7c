
Stm32-ublox-7c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800af50  0800af50  0001af50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b600  0800b600  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b600  0800b600  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b600  0800b600  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b600  0800b600  0001b600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b604  0800b604  0001b604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  200001e0  0800b7e8  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  0800b7e8  00020624  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3f1  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce5  00000000  00000000  0002a5f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0002c2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  0002ca90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010a9a  00000000  00000000  0002d178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000add4  00000000  00000000  0003dc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005e905  00000000  00000000  000489e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a72eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a4  00000000  00000000  000a733c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800af34 	.word	0x0800af34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800af34 	.word	0x0800af34

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fb81 	bl	8001b44 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fad1 	bl	80019f4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb73 	bl	8001b44 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb69 	bl	8001b44 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 faf9 	bl	8001a78 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 faef 	bl	8001a78 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fbc5 	bl	8000c40 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fb51 	bl	8000b68 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fbb7 	bl	8000c40 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbad 	bl	8000c40 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb5d 	bl	8000bb4 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb53 	bl	8000bb4 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_d2uiz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <__aeabi_d2uiz+0x38>)
 8000522:	0004      	movs	r4, r0
 8000524:	000d      	movs	r5, r1
 8000526:	f7ff ffb5 	bl	8000494 <__aeabi_dcmpge>
 800052a:	2800      	cmp	r0, #0
 800052c:	d104      	bne.n	8000538 <__aeabi_d2uiz+0x1c>
 800052e:	0020      	movs	r0, r4
 8000530:	0029      	movs	r1, r5
 8000532:	f002 f987 	bl	8002844 <__aeabi_d2iz>
 8000536:	bd70      	pop	{r4, r5, r6, pc}
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <__aeabi_d2uiz+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f001 fdd0 	bl	80020e4 <__aeabi_dsub>
 8000544:	f002 f97e 	bl	8002844 <__aeabi_d2iz>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	469c      	mov	ip, r3
 800054e:	4460      	add	r0, ip
 8000550:	e7f1      	b.n	8000536 <__aeabi_d2uiz+0x1a>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	41e00000 	.word	0x41e00000

08000558 <__aeabi_d2lz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0005      	movs	r5, r0
 800055c:	000c      	movs	r4, r1
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	0028      	movs	r0, r5
 8000564:	0021      	movs	r1, r4
 8000566:	f7ff ff77 	bl	8000458 <__aeabi_dcmplt>
 800056a:	2800      	cmp	r0, #0
 800056c:	d108      	bne.n	8000580 <__aeabi_d2lz+0x28>
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f000 f80f 	bl	8000594 <__aeabi_d2ulz>
 8000576:	0002      	movs	r2, r0
 8000578:	000b      	movs	r3, r1
 800057a:	0010      	movs	r0, r2
 800057c:	0019      	movs	r1, r3
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	061b      	lsls	r3, r3, #24
 8000584:	18e1      	adds	r1, r4, r3
 8000586:	0028      	movs	r0, r5
 8000588:	f000 f804 	bl	8000594 <__aeabi_d2ulz>
 800058c:	2300      	movs	r3, #0
 800058e:	4242      	negs	r2, r0
 8000590:	418b      	sbcs	r3, r1
 8000592:	e7f2      	b.n	800057a <__aeabi_d2lz+0x22>

08000594 <__aeabi_d2ulz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	2200      	movs	r2, #0
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <__aeabi_d2ulz+0x34>)
 800059a:	000d      	movs	r5, r1
 800059c:	0004      	movs	r4, r0
 800059e:	f001 fb35 	bl	8001c0c <__aeabi_dmul>
 80005a2:	f7ff ffbb 	bl	800051c <__aeabi_d2uiz>
 80005a6:	0006      	movs	r6, r0
 80005a8:	f002 f9b2 	bl	8002910 <__aeabi_ui2d>
 80005ac:	2200      	movs	r2, #0
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <__aeabi_d2ulz+0x38>)
 80005b0:	f001 fb2c 	bl	8001c0c <__aeabi_dmul>
 80005b4:	0002      	movs	r2, r0
 80005b6:	000b      	movs	r3, r1
 80005b8:	0020      	movs	r0, r4
 80005ba:	0029      	movs	r1, r5
 80005bc:	f001 fd92 	bl	80020e4 <__aeabi_dsub>
 80005c0:	f7ff ffac 	bl	800051c <__aeabi_d2uiz>
 80005c4:	0031      	movs	r1, r6
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	3df00000 	.word	0x3df00000
 80005cc:	41f00000 	.word	0x41f00000

080005d0 <__aeabi_l2d>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	0006      	movs	r6, r0
 80005d4:	0008      	movs	r0, r1
 80005d6:	f002 f96b 	bl	80028b0 <__aeabi_i2d>
 80005da:	2200      	movs	r2, #0
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__aeabi_l2d+0x28>)
 80005de:	f001 fb15 	bl	8001c0c <__aeabi_dmul>
 80005e2:	000d      	movs	r5, r1
 80005e4:	0004      	movs	r4, r0
 80005e6:	0030      	movs	r0, r6
 80005e8:	f002 f992 	bl	8002910 <__aeabi_ui2d>
 80005ec:	002b      	movs	r3, r5
 80005ee:	0022      	movs	r2, r4
 80005f0:	f000 fbce 	bl	8000d90 <__aeabi_dadd>
 80005f4:	bd70      	pop	{r4, r5, r6, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	41f00000 	.word	0x41f00000

080005fc <__aeabi_fadd>:
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	46c6      	mov	lr, r8
 8000600:	0243      	lsls	r3, r0, #9
 8000602:	0a5b      	lsrs	r3, r3, #9
 8000604:	024e      	lsls	r6, r1, #9
 8000606:	0045      	lsls	r5, r0, #1
 8000608:	004f      	lsls	r7, r1, #1
 800060a:	00da      	lsls	r2, r3, #3
 800060c:	0fc4      	lsrs	r4, r0, #31
 800060e:	469c      	mov	ip, r3
 8000610:	0a70      	lsrs	r0, r6, #9
 8000612:	4690      	mov	r8, r2
 8000614:	b500      	push	{lr}
 8000616:	0e2d      	lsrs	r5, r5, #24
 8000618:	0e3f      	lsrs	r7, r7, #24
 800061a:	0fc9      	lsrs	r1, r1, #31
 800061c:	09b6      	lsrs	r6, r6, #6
 800061e:	428c      	cmp	r4, r1
 8000620:	d04b      	beq.n	80006ba <__aeabi_fadd+0xbe>
 8000622:	1bea      	subs	r2, r5, r7
 8000624:	2a00      	cmp	r2, #0
 8000626:	dd36      	ble.n	8000696 <__aeabi_fadd+0x9a>
 8000628:	2f00      	cmp	r7, #0
 800062a:	d061      	beq.n	80006f0 <__aeabi_fadd+0xf4>
 800062c:	2dff      	cmp	r5, #255	; 0xff
 800062e:	d100      	bne.n	8000632 <__aeabi_fadd+0x36>
 8000630:	e0ad      	b.n	800078e <__aeabi_fadd+0x192>
 8000632:	2380      	movs	r3, #128	; 0x80
 8000634:	04db      	lsls	r3, r3, #19
 8000636:	431e      	orrs	r6, r3
 8000638:	2a1b      	cmp	r2, #27
 800063a:	dc00      	bgt.n	800063e <__aeabi_fadd+0x42>
 800063c:	e0d3      	b.n	80007e6 <__aeabi_fadd+0x1ea>
 800063e:	2001      	movs	r0, #1
 8000640:	4643      	mov	r3, r8
 8000642:	1a18      	subs	r0, r3, r0
 8000644:	0143      	lsls	r3, r0, #5
 8000646:	d400      	bmi.n	800064a <__aeabi_fadd+0x4e>
 8000648:	e08c      	b.n	8000764 <__aeabi_fadd+0x168>
 800064a:	0180      	lsls	r0, r0, #6
 800064c:	0987      	lsrs	r7, r0, #6
 800064e:	0038      	movs	r0, r7
 8000650:	f002 fa54 	bl	8002afc <__clzsi2>
 8000654:	3805      	subs	r0, #5
 8000656:	4087      	lsls	r7, r0
 8000658:	4285      	cmp	r5, r0
 800065a:	dc00      	bgt.n	800065e <__aeabi_fadd+0x62>
 800065c:	e0b6      	b.n	80007cc <__aeabi_fadd+0x1d0>
 800065e:	1a2d      	subs	r5, r5, r0
 8000660:	48b3      	ldr	r0, [pc, #716]	; (8000930 <__aeabi_fadd+0x334>)
 8000662:	4038      	ands	r0, r7
 8000664:	0743      	lsls	r3, r0, #29
 8000666:	d004      	beq.n	8000672 <__aeabi_fadd+0x76>
 8000668:	230f      	movs	r3, #15
 800066a:	4003      	ands	r3, r0
 800066c:	2b04      	cmp	r3, #4
 800066e:	d000      	beq.n	8000672 <__aeabi_fadd+0x76>
 8000670:	3004      	adds	r0, #4
 8000672:	0143      	lsls	r3, r0, #5
 8000674:	d400      	bmi.n	8000678 <__aeabi_fadd+0x7c>
 8000676:	e078      	b.n	800076a <__aeabi_fadd+0x16e>
 8000678:	1c6a      	adds	r2, r5, #1
 800067a:	2dfe      	cmp	r5, #254	; 0xfe
 800067c:	d065      	beq.n	800074a <__aeabi_fadd+0x14e>
 800067e:	0180      	lsls	r0, r0, #6
 8000680:	0a43      	lsrs	r3, r0, #9
 8000682:	469c      	mov	ip, r3
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	4663      	mov	r3, ip
 8000688:	05d0      	lsls	r0, r2, #23
 800068a:	4318      	orrs	r0, r3
 800068c:	07e4      	lsls	r4, r4, #31
 800068e:	4320      	orrs	r0, r4
 8000690:	bc80      	pop	{r7}
 8000692:	46b8      	mov	r8, r7
 8000694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000696:	2a00      	cmp	r2, #0
 8000698:	d035      	beq.n	8000706 <__aeabi_fadd+0x10a>
 800069a:	1b7a      	subs	r2, r7, r5
 800069c:	2d00      	cmp	r5, #0
 800069e:	d000      	beq.n	80006a2 <__aeabi_fadd+0xa6>
 80006a0:	e0af      	b.n	8000802 <__aeabi_fadd+0x206>
 80006a2:	4643      	mov	r3, r8
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_fadd+0xae>
 80006a8:	e0a7      	b.n	80007fa <__aeabi_fadd+0x1fe>
 80006aa:	1e53      	subs	r3, r2, #1
 80006ac:	2a01      	cmp	r2, #1
 80006ae:	d100      	bne.n	80006b2 <__aeabi_fadd+0xb6>
 80006b0:	e12f      	b.n	8000912 <__aeabi_fadd+0x316>
 80006b2:	2aff      	cmp	r2, #255	; 0xff
 80006b4:	d069      	beq.n	800078a <__aeabi_fadd+0x18e>
 80006b6:	001a      	movs	r2, r3
 80006b8:	e0aa      	b.n	8000810 <__aeabi_fadd+0x214>
 80006ba:	1be9      	subs	r1, r5, r7
 80006bc:	2900      	cmp	r1, #0
 80006be:	dd70      	ble.n	80007a2 <__aeabi_fadd+0x1a6>
 80006c0:	2f00      	cmp	r7, #0
 80006c2:	d037      	beq.n	8000734 <__aeabi_fadd+0x138>
 80006c4:	2dff      	cmp	r5, #255	; 0xff
 80006c6:	d062      	beq.n	800078e <__aeabi_fadd+0x192>
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	04db      	lsls	r3, r3, #19
 80006cc:	431e      	orrs	r6, r3
 80006ce:	291b      	cmp	r1, #27
 80006d0:	dc00      	bgt.n	80006d4 <__aeabi_fadd+0xd8>
 80006d2:	e0b0      	b.n	8000836 <__aeabi_fadd+0x23a>
 80006d4:	2001      	movs	r0, #1
 80006d6:	4440      	add	r0, r8
 80006d8:	0143      	lsls	r3, r0, #5
 80006da:	d543      	bpl.n	8000764 <__aeabi_fadd+0x168>
 80006dc:	3501      	adds	r5, #1
 80006de:	2dff      	cmp	r5, #255	; 0xff
 80006e0:	d033      	beq.n	800074a <__aeabi_fadd+0x14e>
 80006e2:	2301      	movs	r3, #1
 80006e4:	4a93      	ldr	r2, [pc, #588]	; (8000934 <__aeabi_fadd+0x338>)
 80006e6:	4003      	ands	r3, r0
 80006e8:	0840      	lsrs	r0, r0, #1
 80006ea:	4010      	ands	r0, r2
 80006ec:	4318      	orrs	r0, r3
 80006ee:	e7b9      	b.n	8000664 <__aeabi_fadd+0x68>
 80006f0:	2e00      	cmp	r6, #0
 80006f2:	d100      	bne.n	80006f6 <__aeabi_fadd+0xfa>
 80006f4:	e083      	b.n	80007fe <__aeabi_fadd+0x202>
 80006f6:	1e51      	subs	r1, r2, #1
 80006f8:	2a01      	cmp	r2, #1
 80006fa:	d100      	bne.n	80006fe <__aeabi_fadd+0x102>
 80006fc:	e0d8      	b.n	80008b0 <__aeabi_fadd+0x2b4>
 80006fe:	2aff      	cmp	r2, #255	; 0xff
 8000700:	d045      	beq.n	800078e <__aeabi_fadd+0x192>
 8000702:	000a      	movs	r2, r1
 8000704:	e798      	b.n	8000638 <__aeabi_fadd+0x3c>
 8000706:	27fe      	movs	r7, #254	; 0xfe
 8000708:	1c6a      	adds	r2, r5, #1
 800070a:	4217      	tst	r7, r2
 800070c:	d000      	beq.n	8000710 <__aeabi_fadd+0x114>
 800070e:	e086      	b.n	800081e <__aeabi_fadd+0x222>
 8000710:	2d00      	cmp	r5, #0
 8000712:	d000      	beq.n	8000716 <__aeabi_fadd+0x11a>
 8000714:	e0b7      	b.n	8000886 <__aeabi_fadd+0x28a>
 8000716:	4643      	mov	r3, r8
 8000718:	2b00      	cmp	r3, #0
 800071a:	d100      	bne.n	800071e <__aeabi_fadd+0x122>
 800071c:	e0f3      	b.n	8000906 <__aeabi_fadd+0x30a>
 800071e:	2200      	movs	r2, #0
 8000720:	2e00      	cmp	r6, #0
 8000722:	d0b0      	beq.n	8000686 <__aeabi_fadd+0x8a>
 8000724:	1b98      	subs	r0, r3, r6
 8000726:	0143      	lsls	r3, r0, #5
 8000728:	d400      	bmi.n	800072c <__aeabi_fadd+0x130>
 800072a:	e0fa      	b.n	8000922 <__aeabi_fadd+0x326>
 800072c:	4643      	mov	r3, r8
 800072e:	000c      	movs	r4, r1
 8000730:	1af0      	subs	r0, r6, r3
 8000732:	e797      	b.n	8000664 <__aeabi_fadd+0x68>
 8000734:	2e00      	cmp	r6, #0
 8000736:	d100      	bne.n	800073a <__aeabi_fadd+0x13e>
 8000738:	e0c8      	b.n	80008cc <__aeabi_fadd+0x2d0>
 800073a:	1e4a      	subs	r2, r1, #1
 800073c:	2901      	cmp	r1, #1
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0x146>
 8000740:	e0ae      	b.n	80008a0 <__aeabi_fadd+0x2a4>
 8000742:	29ff      	cmp	r1, #255	; 0xff
 8000744:	d023      	beq.n	800078e <__aeabi_fadd+0x192>
 8000746:	0011      	movs	r1, r2
 8000748:	e7c1      	b.n	80006ce <__aeabi_fadd+0xd2>
 800074a:	2300      	movs	r3, #0
 800074c:	22ff      	movs	r2, #255	; 0xff
 800074e:	469c      	mov	ip, r3
 8000750:	e799      	b.n	8000686 <__aeabi_fadd+0x8a>
 8000752:	21fe      	movs	r1, #254	; 0xfe
 8000754:	1c6a      	adds	r2, r5, #1
 8000756:	4211      	tst	r1, r2
 8000758:	d077      	beq.n	800084a <__aeabi_fadd+0x24e>
 800075a:	2aff      	cmp	r2, #255	; 0xff
 800075c:	d0f5      	beq.n	800074a <__aeabi_fadd+0x14e>
 800075e:	0015      	movs	r5, r2
 8000760:	4446      	add	r6, r8
 8000762:	0870      	lsrs	r0, r6, #1
 8000764:	0743      	lsls	r3, r0, #29
 8000766:	d000      	beq.n	800076a <__aeabi_fadd+0x16e>
 8000768:	e77e      	b.n	8000668 <__aeabi_fadd+0x6c>
 800076a:	08c3      	lsrs	r3, r0, #3
 800076c:	2dff      	cmp	r5, #255	; 0xff
 800076e:	d00e      	beq.n	800078e <__aeabi_fadd+0x192>
 8000770:	025b      	lsls	r3, r3, #9
 8000772:	0a5b      	lsrs	r3, r3, #9
 8000774:	469c      	mov	ip, r3
 8000776:	b2ea      	uxtb	r2, r5
 8000778:	e785      	b.n	8000686 <__aeabi_fadd+0x8a>
 800077a:	2e00      	cmp	r6, #0
 800077c:	d007      	beq.n	800078e <__aeabi_fadd+0x192>
 800077e:	2280      	movs	r2, #128	; 0x80
 8000780:	03d2      	lsls	r2, r2, #15
 8000782:	4213      	tst	r3, r2
 8000784:	d003      	beq.n	800078e <__aeabi_fadd+0x192>
 8000786:	4210      	tst	r0, r2
 8000788:	d101      	bne.n	800078e <__aeabi_fadd+0x192>
 800078a:	000c      	movs	r4, r1
 800078c:	0003      	movs	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0db      	beq.n	800074a <__aeabi_fadd+0x14e>
 8000792:	2080      	movs	r0, #128	; 0x80
 8000794:	03c0      	lsls	r0, r0, #15
 8000796:	4318      	orrs	r0, r3
 8000798:	0240      	lsls	r0, r0, #9
 800079a:	0a43      	lsrs	r3, r0, #9
 800079c:	469c      	mov	ip, r3
 800079e:	22ff      	movs	r2, #255	; 0xff
 80007a0:	e771      	b.n	8000686 <__aeabi_fadd+0x8a>
 80007a2:	2900      	cmp	r1, #0
 80007a4:	d0d5      	beq.n	8000752 <__aeabi_fadd+0x156>
 80007a6:	1b7a      	subs	r2, r7, r5
 80007a8:	2d00      	cmp	r5, #0
 80007aa:	d160      	bne.n	800086e <__aeabi_fadd+0x272>
 80007ac:	4643      	mov	r3, r8
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d024      	beq.n	80007fc <__aeabi_fadd+0x200>
 80007b2:	1e53      	subs	r3, r2, #1
 80007b4:	2a01      	cmp	r2, #1
 80007b6:	d073      	beq.n	80008a0 <__aeabi_fadd+0x2a4>
 80007b8:	2aff      	cmp	r2, #255	; 0xff
 80007ba:	d0e7      	beq.n	800078c <__aeabi_fadd+0x190>
 80007bc:	001a      	movs	r2, r3
 80007be:	2a1b      	cmp	r2, #27
 80007c0:	dc00      	bgt.n	80007c4 <__aeabi_fadd+0x1c8>
 80007c2:	e085      	b.n	80008d0 <__aeabi_fadd+0x2d4>
 80007c4:	2001      	movs	r0, #1
 80007c6:	003d      	movs	r5, r7
 80007c8:	1980      	adds	r0, r0, r6
 80007ca:	e785      	b.n	80006d8 <__aeabi_fadd+0xdc>
 80007cc:	2320      	movs	r3, #32
 80007ce:	003a      	movs	r2, r7
 80007d0:	1b45      	subs	r5, r0, r5
 80007d2:	0038      	movs	r0, r7
 80007d4:	3501      	adds	r5, #1
 80007d6:	40ea      	lsrs	r2, r5
 80007d8:	1b5d      	subs	r5, r3, r5
 80007da:	40a8      	lsls	r0, r5
 80007dc:	1e43      	subs	r3, r0, #1
 80007de:	4198      	sbcs	r0, r3
 80007e0:	2500      	movs	r5, #0
 80007e2:	4310      	orrs	r0, r2
 80007e4:	e73e      	b.n	8000664 <__aeabi_fadd+0x68>
 80007e6:	2320      	movs	r3, #32
 80007e8:	0030      	movs	r0, r6
 80007ea:	1a9b      	subs	r3, r3, r2
 80007ec:	0031      	movs	r1, r6
 80007ee:	4098      	lsls	r0, r3
 80007f0:	40d1      	lsrs	r1, r2
 80007f2:	1e43      	subs	r3, r0, #1
 80007f4:	4198      	sbcs	r0, r3
 80007f6:	4308      	orrs	r0, r1
 80007f8:	e722      	b.n	8000640 <__aeabi_fadd+0x44>
 80007fa:	000c      	movs	r4, r1
 80007fc:	0003      	movs	r3, r0
 80007fe:	0015      	movs	r5, r2
 8000800:	e7b4      	b.n	800076c <__aeabi_fadd+0x170>
 8000802:	2fff      	cmp	r7, #255	; 0xff
 8000804:	d0c1      	beq.n	800078a <__aeabi_fadd+0x18e>
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	4640      	mov	r0, r8
 800080a:	04db      	lsls	r3, r3, #19
 800080c:	4318      	orrs	r0, r3
 800080e:	4680      	mov	r8, r0
 8000810:	2a1b      	cmp	r2, #27
 8000812:	dd51      	ble.n	80008b8 <__aeabi_fadd+0x2bc>
 8000814:	2001      	movs	r0, #1
 8000816:	000c      	movs	r4, r1
 8000818:	003d      	movs	r5, r7
 800081a:	1a30      	subs	r0, r6, r0
 800081c:	e712      	b.n	8000644 <__aeabi_fadd+0x48>
 800081e:	4643      	mov	r3, r8
 8000820:	1b9f      	subs	r7, r3, r6
 8000822:	017b      	lsls	r3, r7, #5
 8000824:	d42b      	bmi.n	800087e <__aeabi_fadd+0x282>
 8000826:	2f00      	cmp	r7, #0
 8000828:	d000      	beq.n	800082c <__aeabi_fadd+0x230>
 800082a:	e710      	b.n	800064e <__aeabi_fadd+0x52>
 800082c:	2300      	movs	r3, #0
 800082e:	2400      	movs	r4, #0
 8000830:	2200      	movs	r2, #0
 8000832:	469c      	mov	ip, r3
 8000834:	e727      	b.n	8000686 <__aeabi_fadd+0x8a>
 8000836:	2320      	movs	r3, #32
 8000838:	0032      	movs	r2, r6
 800083a:	0030      	movs	r0, r6
 800083c:	40ca      	lsrs	r2, r1
 800083e:	1a59      	subs	r1, r3, r1
 8000840:	4088      	lsls	r0, r1
 8000842:	1e43      	subs	r3, r0, #1
 8000844:	4198      	sbcs	r0, r3
 8000846:	4310      	orrs	r0, r2
 8000848:	e745      	b.n	80006d6 <__aeabi_fadd+0xda>
 800084a:	2d00      	cmp	r5, #0
 800084c:	d14a      	bne.n	80008e4 <__aeabi_fadd+0x2e8>
 800084e:	4643      	mov	r3, r8
 8000850:	2b00      	cmp	r3, #0
 8000852:	d063      	beq.n	800091c <__aeabi_fadd+0x320>
 8000854:	2200      	movs	r2, #0
 8000856:	2e00      	cmp	r6, #0
 8000858:	d100      	bne.n	800085c <__aeabi_fadd+0x260>
 800085a:	e714      	b.n	8000686 <__aeabi_fadd+0x8a>
 800085c:	0030      	movs	r0, r6
 800085e:	4440      	add	r0, r8
 8000860:	0143      	lsls	r3, r0, #5
 8000862:	d400      	bmi.n	8000866 <__aeabi_fadd+0x26a>
 8000864:	e77e      	b.n	8000764 <__aeabi_fadd+0x168>
 8000866:	4b32      	ldr	r3, [pc, #200]	; (8000930 <__aeabi_fadd+0x334>)
 8000868:	3501      	adds	r5, #1
 800086a:	4018      	ands	r0, r3
 800086c:	e77a      	b.n	8000764 <__aeabi_fadd+0x168>
 800086e:	2fff      	cmp	r7, #255	; 0xff
 8000870:	d08c      	beq.n	800078c <__aeabi_fadd+0x190>
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	4641      	mov	r1, r8
 8000876:	04db      	lsls	r3, r3, #19
 8000878:	4319      	orrs	r1, r3
 800087a:	4688      	mov	r8, r1
 800087c:	e79f      	b.n	80007be <__aeabi_fadd+0x1c2>
 800087e:	4643      	mov	r3, r8
 8000880:	000c      	movs	r4, r1
 8000882:	1af7      	subs	r7, r6, r3
 8000884:	e6e3      	b.n	800064e <__aeabi_fadd+0x52>
 8000886:	4642      	mov	r2, r8
 8000888:	2a00      	cmp	r2, #0
 800088a:	d000      	beq.n	800088e <__aeabi_fadd+0x292>
 800088c:	e775      	b.n	800077a <__aeabi_fadd+0x17e>
 800088e:	2e00      	cmp	r6, #0
 8000890:	d000      	beq.n	8000894 <__aeabi_fadd+0x298>
 8000892:	e77a      	b.n	800078a <__aeabi_fadd+0x18e>
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	03db      	lsls	r3, r3, #15
 8000898:	2400      	movs	r4, #0
 800089a:	469c      	mov	ip, r3
 800089c:	22ff      	movs	r2, #255	; 0xff
 800089e:	e6f2      	b.n	8000686 <__aeabi_fadd+0x8a>
 80008a0:	0030      	movs	r0, r6
 80008a2:	4440      	add	r0, r8
 80008a4:	2501      	movs	r5, #1
 80008a6:	0143      	lsls	r3, r0, #5
 80008a8:	d400      	bmi.n	80008ac <__aeabi_fadd+0x2b0>
 80008aa:	e75b      	b.n	8000764 <__aeabi_fadd+0x168>
 80008ac:	2502      	movs	r5, #2
 80008ae:	e718      	b.n	80006e2 <__aeabi_fadd+0xe6>
 80008b0:	4643      	mov	r3, r8
 80008b2:	2501      	movs	r5, #1
 80008b4:	1b98      	subs	r0, r3, r6
 80008b6:	e6c5      	b.n	8000644 <__aeabi_fadd+0x48>
 80008b8:	2320      	movs	r3, #32
 80008ba:	4644      	mov	r4, r8
 80008bc:	4640      	mov	r0, r8
 80008be:	40d4      	lsrs	r4, r2
 80008c0:	1a9a      	subs	r2, r3, r2
 80008c2:	4090      	lsls	r0, r2
 80008c4:	1e43      	subs	r3, r0, #1
 80008c6:	4198      	sbcs	r0, r3
 80008c8:	4320      	orrs	r0, r4
 80008ca:	e7a4      	b.n	8000816 <__aeabi_fadd+0x21a>
 80008cc:	000d      	movs	r5, r1
 80008ce:	e74d      	b.n	800076c <__aeabi_fadd+0x170>
 80008d0:	2320      	movs	r3, #32
 80008d2:	4641      	mov	r1, r8
 80008d4:	4640      	mov	r0, r8
 80008d6:	40d1      	lsrs	r1, r2
 80008d8:	1a9a      	subs	r2, r3, r2
 80008da:	4090      	lsls	r0, r2
 80008dc:	1e43      	subs	r3, r0, #1
 80008de:	4198      	sbcs	r0, r3
 80008e0:	4308      	orrs	r0, r1
 80008e2:	e770      	b.n	80007c6 <__aeabi_fadd+0x1ca>
 80008e4:	4642      	mov	r2, r8
 80008e6:	2a00      	cmp	r2, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fadd+0x2f0>
 80008ea:	e74f      	b.n	800078c <__aeabi_fadd+0x190>
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x2f6>
 80008f0:	e74d      	b.n	800078e <__aeabi_fadd+0x192>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	03d2      	lsls	r2, r2, #15
 80008f6:	4213      	tst	r3, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x300>
 80008fa:	e748      	b.n	800078e <__aeabi_fadd+0x192>
 80008fc:	4210      	tst	r0, r2
 80008fe:	d000      	beq.n	8000902 <__aeabi_fadd+0x306>
 8000900:	e745      	b.n	800078e <__aeabi_fadd+0x192>
 8000902:	0003      	movs	r3, r0
 8000904:	e743      	b.n	800078e <__aeabi_fadd+0x192>
 8000906:	2e00      	cmp	r6, #0
 8000908:	d090      	beq.n	800082c <__aeabi_fadd+0x230>
 800090a:	000c      	movs	r4, r1
 800090c:	4684      	mov	ip, r0
 800090e:	2200      	movs	r2, #0
 8000910:	e6b9      	b.n	8000686 <__aeabi_fadd+0x8a>
 8000912:	4643      	mov	r3, r8
 8000914:	000c      	movs	r4, r1
 8000916:	1af0      	subs	r0, r6, r3
 8000918:	3501      	adds	r5, #1
 800091a:	e693      	b.n	8000644 <__aeabi_fadd+0x48>
 800091c:	4684      	mov	ip, r0
 800091e:	2200      	movs	r2, #0
 8000920:	e6b1      	b.n	8000686 <__aeabi_fadd+0x8a>
 8000922:	2800      	cmp	r0, #0
 8000924:	d000      	beq.n	8000928 <__aeabi_fadd+0x32c>
 8000926:	e71d      	b.n	8000764 <__aeabi_fadd+0x168>
 8000928:	2300      	movs	r3, #0
 800092a:	2400      	movs	r4, #0
 800092c:	469c      	mov	ip, r3
 800092e:	e6aa      	b.n	8000686 <__aeabi_fadd+0x8a>
 8000930:	fbffffff 	.word	0xfbffffff
 8000934:	7dffffff 	.word	0x7dffffff

08000938 <__aeabi_fdiv>:
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093a:	464f      	mov	r7, r9
 800093c:	4646      	mov	r6, r8
 800093e:	46d6      	mov	lr, sl
 8000940:	0245      	lsls	r5, r0, #9
 8000942:	b5c0      	push	{r6, r7, lr}
 8000944:	0047      	lsls	r7, r0, #1
 8000946:	1c0c      	adds	r4, r1, #0
 8000948:	0a6d      	lsrs	r5, r5, #9
 800094a:	0e3f      	lsrs	r7, r7, #24
 800094c:	0fc6      	lsrs	r6, r0, #31
 800094e:	2f00      	cmp	r7, #0
 8000950:	d100      	bne.n	8000954 <__aeabi_fdiv+0x1c>
 8000952:	e070      	b.n	8000a36 <__aeabi_fdiv+0xfe>
 8000954:	2fff      	cmp	r7, #255	; 0xff
 8000956:	d100      	bne.n	800095a <__aeabi_fdiv+0x22>
 8000958:	e075      	b.n	8000a46 <__aeabi_fdiv+0x10e>
 800095a:	00eb      	lsls	r3, r5, #3
 800095c:	2580      	movs	r5, #128	; 0x80
 800095e:	04ed      	lsls	r5, r5, #19
 8000960:	431d      	orrs	r5, r3
 8000962:	2300      	movs	r3, #0
 8000964:	4699      	mov	r9, r3
 8000966:	469a      	mov	sl, r3
 8000968:	3f7f      	subs	r7, #127	; 0x7f
 800096a:	0260      	lsls	r0, r4, #9
 800096c:	0a43      	lsrs	r3, r0, #9
 800096e:	4698      	mov	r8, r3
 8000970:	0063      	lsls	r3, r4, #1
 8000972:	0e1b      	lsrs	r3, r3, #24
 8000974:	0fe4      	lsrs	r4, r4, #31
 8000976:	2b00      	cmp	r3, #0
 8000978:	d04e      	beq.n	8000a18 <__aeabi_fdiv+0xe0>
 800097a:	2bff      	cmp	r3, #255	; 0xff
 800097c:	d046      	beq.n	8000a0c <__aeabi_fdiv+0xd4>
 800097e:	4642      	mov	r2, r8
 8000980:	00d0      	lsls	r0, r2, #3
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	04d2      	lsls	r2, r2, #19
 8000986:	4302      	orrs	r2, r0
 8000988:	4690      	mov	r8, r2
 800098a:	2200      	movs	r2, #0
 800098c:	3b7f      	subs	r3, #127	; 0x7f
 800098e:	0031      	movs	r1, r6
 8000990:	1aff      	subs	r7, r7, r3
 8000992:	464b      	mov	r3, r9
 8000994:	4061      	eors	r1, r4
 8000996:	b2c9      	uxtb	r1, r1
 8000998:	4313      	orrs	r3, r2
 800099a:	2b0f      	cmp	r3, #15
 800099c:	d900      	bls.n	80009a0 <__aeabi_fdiv+0x68>
 800099e:	e0b5      	b.n	8000b0c <__aeabi_fdiv+0x1d4>
 80009a0:	486e      	ldr	r0, [pc, #440]	; (8000b5c <__aeabi_fdiv+0x224>)
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	58c3      	ldr	r3, [r0, r3]
 80009a6:	469f      	mov	pc, r3
 80009a8:	2300      	movs	r3, #0
 80009aa:	4698      	mov	r8, r3
 80009ac:	0026      	movs	r6, r4
 80009ae:	4645      	mov	r5, r8
 80009b0:	4692      	mov	sl, r2
 80009b2:	4653      	mov	r3, sl
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d100      	bne.n	80009ba <__aeabi_fdiv+0x82>
 80009b8:	e089      	b.n	8000ace <__aeabi_fdiv+0x196>
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d100      	bne.n	80009c0 <__aeabi_fdiv+0x88>
 80009be:	e09e      	b.n	8000afe <__aeabi_fdiv+0x1c6>
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d018      	beq.n	80009f6 <__aeabi_fdiv+0xbe>
 80009c4:	003b      	movs	r3, r7
 80009c6:	337f      	adds	r3, #127	; 0x7f
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	dd69      	ble.n	8000aa0 <__aeabi_fdiv+0x168>
 80009cc:	076a      	lsls	r2, r5, #29
 80009ce:	d004      	beq.n	80009da <__aeabi_fdiv+0xa2>
 80009d0:	220f      	movs	r2, #15
 80009d2:	402a      	ands	r2, r5
 80009d4:	2a04      	cmp	r2, #4
 80009d6:	d000      	beq.n	80009da <__aeabi_fdiv+0xa2>
 80009d8:	3504      	adds	r5, #4
 80009da:	012a      	lsls	r2, r5, #4
 80009dc:	d503      	bpl.n	80009e6 <__aeabi_fdiv+0xae>
 80009de:	4b60      	ldr	r3, [pc, #384]	; (8000b60 <__aeabi_fdiv+0x228>)
 80009e0:	401d      	ands	r5, r3
 80009e2:	003b      	movs	r3, r7
 80009e4:	3380      	adds	r3, #128	; 0x80
 80009e6:	2bfe      	cmp	r3, #254	; 0xfe
 80009e8:	dd00      	ble.n	80009ec <__aeabi_fdiv+0xb4>
 80009ea:	e070      	b.n	8000ace <__aeabi_fdiv+0x196>
 80009ec:	01ad      	lsls	r5, r5, #6
 80009ee:	0a6d      	lsrs	r5, r5, #9
 80009f0:	b2d8      	uxtb	r0, r3
 80009f2:	e002      	b.n	80009fa <__aeabi_fdiv+0xc2>
 80009f4:	000e      	movs	r6, r1
 80009f6:	2000      	movs	r0, #0
 80009f8:	2500      	movs	r5, #0
 80009fa:	05c0      	lsls	r0, r0, #23
 80009fc:	4328      	orrs	r0, r5
 80009fe:	07f6      	lsls	r6, r6, #31
 8000a00:	4330      	orrs	r0, r6
 8000a02:	bce0      	pop	{r5, r6, r7}
 8000a04:	46ba      	mov	sl, r7
 8000a06:	46b1      	mov	r9, r6
 8000a08:	46a8      	mov	r8, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	4643      	mov	r3, r8
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d13f      	bne.n	8000a92 <__aeabi_fdiv+0x15a>
 8000a12:	2202      	movs	r2, #2
 8000a14:	3fff      	subs	r7, #255	; 0xff
 8000a16:	e003      	b.n	8000a20 <__aeabi_fdiv+0xe8>
 8000a18:	4643      	mov	r3, r8
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d12d      	bne.n	8000a7a <__aeabi_fdiv+0x142>
 8000a1e:	2201      	movs	r2, #1
 8000a20:	0031      	movs	r1, r6
 8000a22:	464b      	mov	r3, r9
 8000a24:	4061      	eors	r1, r4
 8000a26:	b2c9      	uxtb	r1, r1
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	2b0f      	cmp	r3, #15
 8000a2c:	d834      	bhi.n	8000a98 <__aeabi_fdiv+0x160>
 8000a2e:	484d      	ldr	r0, [pc, #308]	; (8000b64 <__aeabi_fdiv+0x22c>)
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	58c3      	ldr	r3, [r0, r3]
 8000a34:	469f      	mov	pc, r3
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d113      	bne.n	8000a62 <__aeabi_fdiv+0x12a>
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	4699      	mov	r9, r3
 8000a3e:	3b03      	subs	r3, #3
 8000a40:	2700      	movs	r7, #0
 8000a42:	469a      	mov	sl, r3
 8000a44:	e791      	b.n	800096a <__aeabi_fdiv+0x32>
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	d105      	bne.n	8000a56 <__aeabi_fdiv+0x11e>
 8000a4a:	2308      	movs	r3, #8
 8000a4c:	4699      	mov	r9, r3
 8000a4e:	3b06      	subs	r3, #6
 8000a50:	27ff      	movs	r7, #255	; 0xff
 8000a52:	469a      	mov	sl, r3
 8000a54:	e789      	b.n	800096a <__aeabi_fdiv+0x32>
 8000a56:	230c      	movs	r3, #12
 8000a58:	4699      	mov	r9, r3
 8000a5a:	3b09      	subs	r3, #9
 8000a5c:	27ff      	movs	r7, #255	; 0xff
 8000a5e:	469a      	mov	sl, r3
 8000a60:	e783      	b.n	800096a <__aeabi_fdiv+0x32>
 8000a62:	0028      	movs	r0, r5
 8000a64:	f002 f84a 	bl	8002afc <__clzsi2>
 8000a68:	2776      	movs	r7, #118	; 0x76
 8000a6a:	1f43      	subs	r3, r0, #5
 8000a6c:	409d      	lsls	r5, r3
 8000a6e:	2300      	movs	r3, #0
 8000a70:	427f      	negs	r7, r7
 8000a72:	4699      	mov	r9, r3
 8000a74:	469a      	mov	sl, r3
 8000a76:	1a3f      	subs	r7, r7, r0
 8000a78:	e777      	b.n	800096a <__aeabi_fdiv+0x32>
 8000a7a:	4640      	mov	r0, r8
 8000a7c:	f002 f83e 	bl	8002afc <__clzsi2>
 8000a80:	4642      	mov	r2, r8
 8000a82:	1f43      	subs	r3, r0, #5
 8000a84:	409a      	lsls	r2, r3
 8000a86:	2376      	movs	r3, #118	; 0x76
 8000a88:	425b      	negs	r3, r3
 8000a8a:	4690      	mov	r8, r2
 8000a8c:	1a1b      	subs	r3, r3, r0
 8000a8e:	2200      	movs	r2, #0
 8000a90:	e77d      	b.n	800098e <__aeabi_fdiv+0x56>
 8000a92:	23ff      	movs	r3, #255	; 0xff
 8000a94:	2203      	movs	r2, #3
 8000a96:	e77a      	b.n	800098e <__aeabi_fdiv+0x56>
 8000a98:	000e      	movs	r6, r1
 8000a9a:	20ff      	movs	r0, #255	; 0xff
 8000a9c:	2500      	movs	r5, #0
 8000a9e:	e7ac      	b.n	80009fa <__aeabi_fdiv+0xc2>
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	1ac0      	subs	r0, r0, r3
 8000aa4:	281b      	cmp	r0, #27
 8000aa6:	dca6      	bgt.n	80009f6 <__aeabi_fdiv+0xbe>
 8000aa8:	379e      	adds	r7, #158	; 0x9e
 8000aaa:	002a      	movs	r2, r5
 8000aac:	40bd      	lsls	r5, r7
 8000aae:	40c2      	lsrs	r2, r0
 8000ab0:	1e6b      	subs	r3, r5, #1
 8000ab2:	419d      	sbcs	r5, r3
 8000ab4:	4315      	orrs	r5, r2
 8000ab6:	076b      	lsls	r3, r5, #29
 8000ab8:	d004      	beq.n	8000ac4 <__aeabi_fdiv+0x18c>
 8000aba:	230f      	movs	r3, #15
 8000abc:	402b      	ands	r3, r5
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d000      	beq.n	8000ac4 <__aeabi_fdiv+0x18c>
 8000ac2:	3504      	adds	r5, #4
 8000ac4:	016b      	lsls	r3, r5, #5
 8000ac6:	d544      	bpl.n	8000b52 <__aeabi_fdiv+0x21a>
 8000ac8:	2001      	movs	r0, #1
 8000aca:	2500      	movs	r5, #0
 8000acc:	e795      	b.n	80009fa <__aeabi_fdiv+0xc2>
 8000ace:	20ff      	movs	r0, #255	; 0xff
 8000ad0:	2500      	movs	r5, #0
 8000ad2:	e792      	b.n	80009fa <__aeabi_fdiv+0xc2>
 8000ad4:	2580      	movs	r5, #128	; 0x80
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	20ff      	movs	r0, #255	; 0xff
 8000ada:	03ed      	lsls	r5, r5, #15
 8000adc:	e78d      	b.n	80009fa <__aeabi_fdiv+0xc2>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	4698      	mov	r8, r3
 8000ae2:	2080      	movs	r0, #128	; 0x80
 8000ae4:	03c0      	lsls	r0, r0, #15
 8000ae6:	4205      	tst	r5, r0
 8000ae8:	d009      	beq.n	8000afe <__aeabi_fdiv+0x1c6>
 8000aea:	4643      	mov	r3, r8
 8000aec:	4203      	tst	r3, r0
 8000aee:	d106      	bne.n	8000afe <__aeabi_fdiv+0x1c6>
 8000af0:	4645      	mov	r5, r8
 8000af2:	4305      	orrs	r5, r0
 8000af4:	026d      	lsls	r5, r5, #9
 8000af6:	0026      	movs	r6, r4
 8000af8:	20ff      	movs	r0, #255	; 0xff
 8000afa:	0a6d      	lsrs	r5, r5, #9
 8000afc:	e77d      	b.n	80009fa <__aeabi_fdiv+0xc2>
 8000afe:	2080      	movs	r0, #128	; 0x80
 8000b00:	03c0      	lsls	r0, r0, #15
 8000b02:	4305      	orrs	r5, r0
 8000b04:	026d      	lsls	r5, r5, #9
 8000b06:	20ff      	movs	r0, #255	; 0xff
 8000b08:	0a6d      	lsrs	r5, r5, #9
 8000b0a:	e776      	b.n	80009fa <__aeabi_fdiv+0xc2>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	016b      	lsls	r3, r5, #5
 8000b10:	0150      	lsls	r0, r2, #5
 8000b12:	4283      	cmp	r3, r0
 8000b14:	d219      	bcs.n	8000b4a <__aeabi_fdiv+0x212>
 8000b16:	221b      	movs	r2, #27
 8000b18:	2500      	movs	r5, #0
 8000b1a:	3f01      	subs	r7, #1
 8000b1c:	2601      	movs	r6, #1
 8000b1e:	001c      	movs	r4, r3
 8000b20:	006d      	lsls	r5, r5, #1
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	2c00      	cmp	r4, #0
 8000b26:	db01      	blt.n	8000b2c <__aeabi_fdiv+0x1f4>
 8000b28:	4298      	cmp	r0, r3
 8000b2a:	d801      	bhi.n	8000b30 <__aeabi_fdiv+0x1f8>
 8000b2c:	1a1b      	subs	r3, r3, r0
 8000b2e:	4335      	orrs	r5, r6
 8000b30:	3a01      	subs	r2, #1
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	d1f3      	bne.n	8000b1e <__aeabi_fdiv+0x1e6>
 8000b36:	1e5a      	subs	r2, r3, #1
 8000b38:	4193      	sbcs	r3, r2
 8000b3a:	431d      	orrs	r5, r3
 8000b3c:	003b      	movs	r3, r7
 8000b3e:	337f      	adds	r3, #127	; 0x7f
 8000b40:	000e      	movs	r6, r1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_fdiv+0x210>
 8000b46:	e741      	b.n	80009cc <__aeabi_fdiv+0x94>
 8000b48:	e7aa      	b.n	8000aa0 <__aeabi_fdiv+0x168>
 8000b4a:	221a      	movs	r2, #26
 8000b4c:	2501      	movs	r5, #1
 8000b4e:	1a1b      	subs	r3, r3, r0
 8000b50:	e7e4      	b.n	8000b1c <__aeabi_fdiv+0x1e4>
 8000b52:	01ad      	lsls	r5, r5, #6
 8000b54:	2000      	movs	r0, #0
 8000b56:	0a6d      	lsrs	r5, r5, #9
 8000b58:	e74f      	b.n	80009fa <__aeabi_fdiv+0xc2>
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	0800afd0 	.word	0x0800afd0
 8000b60:	f7ffffff 	.word	0xf7ffffff
 8000b64:	0800b010 	.word	0x0800b010

08000b68 <__eqsf2>:
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	0042      	lsls	r2, r0, #1
 8000b6c:	0245      	lsls	r5, r0, #9
 8000b6e:	024e      	lsls	r6, r1, #9
 8000b70:	004c      	lsls	r4, r1, #1
 8000b72:	0fc3      	lsrs	r3, r0, #31
 8000b74:	0a6d      	lsrs	r5, r5, #9
 8000b76:	2001      	movs	r0, #1
 8000b78:	0e12      	lsrs	r2, r2, #24
 8000b7a:	0a76      	lsrs	r6, r6, #9
 8000b7c:	0e24      	lsrs	r4, r4, #24
 8000b7e:	0fc9      	lsrs	r1, r1, #31
 8000b80:	2aff      	cmp	r2, #255	; 0xff
 8000b82:	d006      	beq.n	8000b92 <__eqsf2+0x2a>
 8000b84:	2cff      	cmp	r4, #255	; 0xff
 8000b86:	d003      	beq.n	8000b90 <__eqsf2+0x28>
 8000b88:	42a2      	cmp	r2, r4
 8000b8a:	d101      	bne.n	8000b90 <__eqsf2+0x28>
 8000b8c:	42b5      	cmp	r5, r6
 8000b8e:	d006      	beq.n	8000b9e <__eqsf2+0x36>
 8000b90:	bd70      	pop	{r4, r5, r6, pc}
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d1fc      	bne.n	8000b90 <__eqsf2+0x28>
 8000b96:	2cff      	cmp	r4, #255	; 0xff
 8000b98:	d1fa      	bne.n	8000b90 <__eqsf2+0x28>
 8000b9a:	2e00      	cmp	r6, #0
 8000b9c:	d1f8      	bne.n	8000b90 <__eqsf2+0x28>
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d006      	beq.n	8000bb0 <__eqsf2+0x48>
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	d1f3      	bne.n	8000b90 <__eqsf2+0x28>
 8000ba8:	0028      	movs	r0, r5
 8000baa:	1e43      	subs	r3, r0, #1
 8000bac:	4198      	sbcs	r0, r3
 8000bae:	e7ef      	b.n	8000b90 <__eqsf2+0x28>
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	e7ed      	b.n	8000b90 <__eqsf2+0x28>

08000bb4 <__gesf2>:
 8000bb4:	b570      	push	{r4, r5, r6, lr}
 8000bb6:	0042      	lsls	r2, r0, #1
 8000bb8:	0245      	lsls	r5, r0, #9
 8000bba:	024e      	lsls	r6, r1, #9
 8000bbc:	004c      	lsls	r4, r1, #1
 8000bbe:	0fc3      	lsrs	r3, r0, #31
 8000bc0:	0a6d      	lsrs	r5, r5, #9
 8000bc2:	0e12      	lsrs	r2, r2, #24
 8000bc4:	0a76      	lsrs	r6, r6, #9
 8000bc6:	0e24      	lsrs	r4, r4, #24
 8000bc8:	0fc8      	lsrs	r0, r1, #31
 8000bca:	2aff      	cmp	r2, #255	; 0xff
 8000bcc:	d01b      	beq.n	8000c06 <__gesf2+0x52>
 8000bce:	2cff      	cmp	r4, #255	; 0xff
 8000bd0:	d00e      	beq.n	8000bf0 <__gesf2+0x3c>
 8000bd2:	2a00      	cmp	r2, #0
 8000bd4:	d11b      	bne.n	8000c0e <__gesf2+0x5a>
 8000bd6:	2c00      	cmp	r4, #0
 8000bd8:	d101      	bne.n	8000bde <__gesf2+0x2a>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	d01c      	beq.n	8000c18 <__gesf2+0x64>
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	d00c      	beq.n	8000bfc <__gesf2+0x48>
 8000be2:	4283      	cmp	r3, r0
 8000be4:	d01c      	beq.n	8000c20 <__gesf2+0x6c>
 8000be6:	2102      	movs	r1, #2
 8000be8:	1e58      	subs	r0, r3, #1
 8000bea:	4008      	ands	r0, r1
 8000bec:	3801      	subs	r0, #1
 8000bee:	bd70      	pop	{r4, r5, r6, pc}
 8000bf0:	2e00      	cmp	r6, #0
 8000bf2:	d122      	bne.n	8000c3a <__gesf2+0x86>
 8000bf4:	2a00      	cmp	r2, #0
 8000bf6:	d1f4      	bne.n	8000be2 <__gesf2+0x2e>
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	d1f2      	bne.n	8000be2 <__gesf2+0x2e>
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	d1f6      	bne.n	8000bee <__gesf2+0x3a>
 8000c00:	2001      	movs	r0, #1
 8000c02:	4240      	negs	r0, r0
 8000c04:	e7f3      	b.n	8000bee <__gesf2+0x3a>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d117      	bne.n	8000c3a <__gesf2+0x86>
 8000c0a:	2cff      	cmp	r4, #255	; 0xff
 8000c0c:	d0f0      	beq.n	8000bf0 <__gesf2+0x3c>
 8000c0e:	2c00      	cmp	r4, #0
 8000c10:	d1e7      	bne.n	8000be2 <__gesf2+0x2e>
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d1e5      	bne.n	8000be2 <__gesf2+0x2e>
 8000c16:	e7e6      	b.n	8000be6 <__gesf2+0x32>
 8000c18:	2000      	movs	r0, #0
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e7      	beq.n	8000bee <__gesf2+0x3a>
 8000c1e:	e7e2      	b.n	8000be6 <__gesf2+0x32>
 8000c20:	42a2      	cmp	r2, r4
 8000c22:	dc05      	bgt.n	8000c30 <__gesf2+0x7c>
 8000c24:	dbea      	blt.n	8000bfc <__gesf2+0x48>
 8000c26:	42b5      	cmp	r5, r6
 8000c28:	d802      	bhi.n	8000c30 <__gesf2+0x7c>
 8000c2a:	d3e7      	bcc.n	8000bfc <__gesf2+0x48>
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	e7de      	b.n	8000bee <__gesf2+0x3a>
 8000c30:	4243      	negs	r3, r0
 8000c32:	4158      	adcs	r0, r3
 8000c34:	0040      	lsls	r0, r0, #1
 8000c36:	3801      	subs	r0, #1
 8000c38:	e7d9      	b.n	8000bee <__gesf2+0x3a>
 8000c3a:	2002      	movs	r0, #2
 8000c3c:	4240      	negs	r0, r0
 8000c3e:	e7d6      	b.n	8000bee <__gesf2+0x3a>

08000c40 <__lesf2>:
 8000c40:	b570      	push	{r4, r5, r6, lr}
 8000c42:	0042      	lsls	r2, r0, #1
 8000c44:	0245      	lsls	r5, r0, #9
 8000c46:	024e      	lsls	r6, r1, #9
 8000c48:	004c      	lsls	r4, r1, #1
 8000c4a:	0fc3      	lsrs	r3, r0, #31
 8000c4c:	0a6d      	lsrs	r5, r5, #9
 8000c4e:	0e12      	lsrs	r2, r2, #24
 8000c50:	0a76      	lsrs	r6, r6, #9
 8000c52:	0e24      	lsrs	r4, r4, #24
 8000c54:	0fc8      	lsrs	r0, r1, #31
 8000c56:	2aff      	cmp	r2, #255	; 0xff
 8000c58:	d00b      	beq.n	8000c72 <__lesf2+0x32>
 8000c5a:	2cff      	cmp	r4, #255	; 0xff
 8000c5c:	d00d      	beq.n	8000c7a <__lesf2+0x3a>
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	d11f      	bne.n	8000ca2 <__lesf2+0x62>
 8000c62:	2c00      	cmp	r4, #0
 8000c64:	d116      	bne.n	8000c94 <__lesf2+0x54>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d114      	bne.n	8000c94 <__lesf2+0x54>
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	2d00      	cmp	r5, #0
 8000c6e:	d010      	beq.n	8000c92 <__lesf2+0x52>
 8000c70:	e009      	b.n	8000c86 <__lesf2+0x46>
 8000c72:	2d00      	cmp	r5, #0
 8000c74:	d10c      	bne.n	8000c90 <__lesf2+0x50>
 8000c76:	2cff      	cmp	r4, #255	; 0xff
 8000c78:	d113      	bne.n	8000ca2 <__lesf2+0x62>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	d108      	bne.n	8000c90 <__lesf2+0x50>
 8000c7e:	2a00      	cmp	r2, #0
 8000c80:	d008      	beq.n	8000c94 <__lesf2+0x54>
 8000c82:	4283      	cmp	r3, r0
 8000c84:	d012      	beq.n	8000cac <__lesf2+0x6c>
 8000c86:	2102      	movs	r1, #2
 8000c88:	1e58      	subs	r0, r3, #1
 8000c8a:	4008      	ands	r0, r1
 8000c8c:	3801      	subs	r0, #1
 8000c8e:	e000      	b.n	8000c92 <__lesf2+0x52>
 8000c90:	2002      	movs	r0, #2
 8000c92:	bd70      	pop	{r4, r5, r6, pc}
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	d1f4      	bne.n	8000c82 <__lesf2+0x42>
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	d1fa      	bne.n	8000c92 <__lesf2+0x52>
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	e7f7      	b.n	8000c92 <__lesf2+0x52>
 8000ca2:	2c00      	cmp	r4, #0
 8000ca4:	d1ed      	bne.n	8000c82 <__lesf2+0x42>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d1eb      	bne.n	8000c82 <__lesf2+0x42>
 8000caa:	e7ec      	b.n	8000c86 <__lesf2+0x46>
 8000cac:	42a2      	cmp	r2, r4
 8000cae:	dc05      	bgt.n	8000cbc <__lesf2+0x7c>
 8000cb0:	dbf2      	blt.n	8000c98 <__lesf2+0x58>
 8000cb2:	42b5      	cmp	r5, r6
 8000cb4:	d802      	bhi.n	8000cbc <__lesf2+0x7c>
 8000cb6:	d3ef      	bcc.n	8000c98 <__lesf2+0x58>
 8000cb8:	2000      	movs	r0, #0
 8000cba:	e7ea      	b.n	8000c92 <__lesf2+0x52>
 8000cbc:	4243      	negs	r3, r0
 8000cbe:	4158      	adcs	r0, r3
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	e7e5      	b.n	8000c92 <__lesf2+0x52>
 8000cc6:	46c0      	nop			; (mov r8, r8)

08000cc8 <__aeabi_fcmpun>:
 8000cc8:	0243      	lsls	r3, r0, #9
 8000cca:	024a      	lsls	r2, r1, #9
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	0049      	lsls	r1, r1, #1
 8000cd0:	0a5b      	lsrs	r3, r3, #9
 8000cd2:	0a52      	lsrs	r2, r2, #9
 8000cd4:	0e09      	lsrs	r1, r1, #24
 8000cd6:	0e00      	lsrs	r0, r0, #24
 8000cd8:	28ff      	cmp	r0, #255	; 0xff
 8000cda:	d006      	beq.n	8000cea <__aeabi_fcmpun+0x22>
 8000cdc:	2000      	movs	r0, #0
 8000cde:	29ff      	cmp	r1, #255	; 0xff
 8000ce0:	d102      	bne.n	8000ce8 <__aeabi_fcmpun+0x20>
 8000ce2:	1e53      	subs	r3, r2, #1
 8000ce4:	419a      	sbcs	r2, r3
 8000ce6:	0010      	movs	r0, r2
 8000ce8:	4770      	bx	lr
 8000cea:	38fe      	subs	r0, #254	; 0xfe
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d1fb      	bne.n	8000ce8 <__aeabi_fcmpun+0x20>
 8000cf0:	e7f4      	b.n	8000cdc <__aeabi_fcmpun+0x14>
 8000cf2:	46c0      	nop			; (mov r8, r8)

08000cf4 <__aeabi_i2f>:
 8000cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	d013      	beq.n	8000d22 <__aeabi_i2f+0x2e>
 8000cfa:	17c3      	asrs	r3, r0, #31
 8000cfc:	18c6      	adds	r6, r0, r3
 8000cfe:	405e      	eors	r6, r3
 8000d00:	0fc4      	lsrs	r4, r0, #31
 8000d02:	0030      	movs	r0, r6
 8000d04:	f001 fefa 	bl	8002afc <__clzsi2>
 8000d08:	239e      	movs	r3, #158	; 0x9e
 8000d0a:	0005      	movs	r5, r0
 8000d0c:	1a1b      	subs	r3, r3, r0
 8000d0e:	2b96      	cmp	r3, #150	; 0x96
 8000d10:	dc0f      	bgt.n	8000d32 <__aeabi_i2f+0x3e>
 8000d12:	2808      	cmp	r0, #8
 8000d14:	dd01      	ble.n	8000d1a <__aeabi_i2f+0x26>
 8000d16:	3d08      	subs	r5, #8
 8000d18:	40ae      	lsls	r6, r5
 8000d1a:	0276      	lsls	r6, r6, #9
 8000d1c:	0a76      	lsrs	r6, r6, #9
 8000d1e:	b2d8      	uxtb	r0, r3
 8000d20:	e002      	b.n	8000d28 <__aeabi_i2f+0x34>
 8000d22:	2400      	movs	r4, #0
 8000d24:	2000      	movs	r0, #0
 8000d26:	2600      	movs	r6, #0
 8000d28:	05c0      	lsls	r0, r0, #23
 8000d2a:	4330      	orrs	r0, r6
 8000d2c:	07e4      	lsls	r4, r4, #31
 8000d2e:	4320      	orrs	r0, r4
 8000d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d32:	2b99      	cmp	r3, #153	; 0x99
 8000d34:	dd0c      	ble.n	8000d50 <__aeabi_i2f+0x5c>
 8000d36:	2205      	movs	r2, #5
 8000d38:	0031      	movs	r1, r6
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	40d1      	lsrs	r1, r2
 8000d3e:	000a      	movs	r2, r1
 8000d40:	0001      	movs	r1, r0
 8000d42:	0030      	movs	r0, r6
 8000d44:	311b      	adds	r1, #27
 8000d46:	4088      	lsls	r0, r1
 8000d48:	1e41      	subs	r1, r0, #1
 8000d4a:	4188      	sbcs	r0, r1
 8000d4c:	4302      	orrs	r2, r0
 8000d4e:	0016      	movs	r6, r2
 8000d50:	2d05      	cmp	r5, #5
 8000d52:	dc12      	bgt.n	8000d7a <__aeabi_i2f+0x86>
 8000d54:	0031      	movs	r1, r6
 8000d56:	4f0d      	ldr	r7, [pc, #52]	; (8000d8c <__aeabi_i2f+0x98>)
 8000d58:	4039      	ands	r1, r7
 8000d5a:	0772      	lsls	r2, r6, #29
 8000d5c:	d009      	beq.n	8000d72 <__aeabi_i2f+0x7e>
 8000d5e:	200f      	movs	r0, #15
 8000d60:	4030      	ands	r0, r6
 8000d62:	2804      	cmp	r0, #4
 8000d64:	d005      	beq.n	8000d72 <__aeabi_i2f+0x7e>
 8000d66:	3104      	adds	r1, #4
 8000d68:	014a      	lsls	r2, r1, #5
 8000d6a:	d502      	bpl.n	8000d72 <__aeabi_i2f+0x7e>
 8000d6c:	239f      	movs	r3, #159	; 0x9f
 8000d6e:	4039      	ands	r1, r7
 8000d70:	1b5b      	subs	r3, r3, r5
 8000d72:	0189      	lsls	r1, r1, #6
 8000d74:	0a4e      	lsrs	r6, r1, #9
 8000d76:	b2d8      	uxtb	r0, r3
 8000d78:	e7d6      	b.n	8000d28 <__aeabi_i2f+0x34>
 8000d7a:	1f6a      	subs	r2, r5, #5
 8000d7c:	4096      	lsls	r6, r2
 8000d7e:	0031      	movs	r1, r6
 8000d80:	4f02      	ldr	r7, [pc, #8]	; (8000d8c <__aeabi_i2f+0x98>)
 8000d82:	4039      	ands	r1, r7
 8000d84:	0772      	lsls	r2, r6, #29
 8000d86:	d0f4      	beq.n	8000d72 <__aeabi_i2f+0x7e>
 8000d88:	e7e9      	b.n	8000d5e <__aeabi_i2f+0x6a>
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	fbffffff 	.word	0xfbffffff

08000d90 <__aeabi_dadd>:
 8000d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d92:	464f      	mov	r7, r9
 8000d94:	4646      	mov	r6, r8
 8000d96:	46d6      	mov	lr, sl
 8000d98:	000d      	movs	r5, r1
 8000d9a:	0004      	movs	r4, r0
 8000d9c:	b5c0      	push	{r6, r7, lr}
 8000d9e:	001f      	movs	r7, r3
 8000da0:	0011      	movs	r1, r2
 8000da2:	0328      	lsls	r0, r5, #12
 8000da4:	0f62      	lsrs	r2, r4, #29
 8000da6:	0a40      	lsrs	r0, r0, #9
 8000da8:	4310      	orrs	r0, r2
 8000daa:	007a      	lsls	r2, r7, #1
 8000dac:	0d52      	lsrs	r2, r2, #21
 8000dae:	00e3      	lsls	r3, r4, #3
 8000db0:	033c      	lsls	r4, r7, #12
 8000db2:	4691      	mov	r9, r2
 8000db4:	0a64      	lsrs	r4, r4, #9
 8000db6:	0ffa      	lsrs	r2, r7, #31
 8000db8:	0f4f      	lsrs	r7, r1, #29
 8000dba:	006e      	lsls	r6, r5, #1
 8000dbc:	4327      	orrs	r7, r4
 8000dbe:	4692      	mov	sl, r2
 8000dc0:	46b8      	mov	r8, r7
 8000dc2:	0d76      	lsrs	r6, r6, #21
 8000dc4:	0fed      	lsrs	r5, r5, #31
 8000dc6:	00c9      	lsls	r1, r1, #3
 8000dc8:	4295      	cmp	r5, r2
 8000dca:	d100      	bne.n	8000dce <__aeabi_dadd+0x3e>
 8000dcc:	e099      	b.n	8000f02 <__aeabi_dadd+0x172>
 8000dce:	464c      	mov	r4, r9
 8000dd0:	1b34      	subs	r4, r6, r4
 8000dd2:	46a4      	mov	ip, r4
 8000dd4:	2c00      	cmp	r4, #0
 8000dd6:	dc00      	bgt.n	8000dda <__aeabi_dadd+0x4a>
 8000dd8:	e07c      	b.n	8000ed4 <__aeabi_dadd+0x144>
 8000dda:	464a      	mov	r2, r9
 8000ddc:	2a00      	cmp	r2, #0
 8000dde:	d100      	bne.n	8000de2 <__aeabi_dadd+0x52>
 8000de0:	e0b8      	b.n	8000f54 <__aeabi_dadd+0x1c4>
 8000de2:	4ac5      	ldr	r2, [pc, #788]	; (80010f8 <__aeabi_dadd+0x368>)
 8000de4:	4296      	cmp	r6, r2
 8000de6:	d100      	bne.n	8000dea <__aeabi_dadd+0x5a>
 8000de8:	e11c      	b.n	8001024 <__aeabi_dadd+0x294>
 8000dea:	2280      	movs	r2, #128	; 0x80
 8000dec:	003c      	movs	r4, r7
 8000dee:	0412      	lsls	r2, r2, #16
 8000df0:	4314      	orrs	r4, r2
 8000df2:	46a0      	mov	r8, r4
 8000df4:	4662      	mov	r2, ip
 8000df6:	2a38      	cmp	r2, #56	; 0x38
 8000df8:	dd00      	ble.n	8000dfc <__aeabi_dadd+0x6c>
 8000dfa:	e161      	b.n	80010c0 <__aeabi_dadd+0x330>
 8000dfc:	2a1f      	cmp	r2, #31
 8000dfe:	dd00      	ble.n	8000e02 <__aeabi_dadd+0x72>
 8000e00:	e1cc      	b.n	800119c <__aeabi_dadd+0x40c>
 8000e02:	4664      	mov	r4, ip
 8000e04:	2220      	movs	r2, #32
 8000e06:	1b12      	subs	r2, r2, r4
 8000e08:	4644      	mov	r4, r8
 8000e0a:	4094      	lsls	r4, r2
 8000e0c:	000f      	movs	r7, r1
 8000e0e:	46a1      	mov	r9, r4
 8000e10:	4664      	mov	r4, ip
 8000e12:	4091      	lsls	r1, r2
 8000e14:	40e7      	lsrs	r7, r4
 8000e16:	464c      	mov	r4, r9
 8000e18:	1e4a      	subs	r2, r1, #1
 8000e1a:	4191      	sbcs	r1, r2
 8000e1c:	433c      	orrs	r4, r7
 8000e1e:	4642      	mov	r2, r8
 8000e20:	4321      	orrs	r1, r4
 8000e22:	4664      	mov	r4, ip
 8000e24:	40e2      	lsrs	r2, r4
 8000e26:	1a80      	subs	r0, r0, r2
 8000e28:	1a5c      	subs	r4, r3, r1
 8000e2a:	42a3      	cmp	r3, r4
 8000e2c:	419b      	sbcs	r3, r3
 8000e2e:	425f      	negs	r7, r3
 8000e30:	1bc7      	subs	r7, r0, r7
 8000e32:	023b      	lsls	r3, r7, #8
 8000e34:	d400      	bmi.n	8000e38 <__aeabi_dadd+0xa8>
 8000e36:	e0d0      	b.n	8000fda <__aeabi_dadd+0x24a>
 8000e38:	027f      	lsls	r7, r7, #9
 8000e3a:	0a7f      	lsrs	r7, r7, #9
 8000e3c:	2f00      	cmp	r7, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_dadd+0xb2>
 8000e40:	e0ff      	b.n	8001042 <__aeabi_dadd+0x2b2>
 8000e42:	0038      	movs	r0, r7
 8000e44:	f001 fe5a 	bl	8002afc <__clzsi2>
 8000e48:	0001      	movs	r1, r0
 8000e4a:	3908      	subs	r1, #8
 8000e4c:	2320      	movs	r3, #32
 8000e4e:	0022      	movs	r2, r4
 8000e50:	1a5b      	subs	r3, r3, r1
 8000e52:	408f      	lsls	r7, r1
 8000e54:	40da      	lsrs	r2, r3
 8000e56:	408c      	lsls	r4, r1
 8000e58:	4317      	orrs	r7, r2
 8000e5a:	42b1      	cmp	r1, r6
 8000e5c:	da00      	bge.n	8000e60 <__aeabi_dadd+0xd0>
 8000e5e:	e0ff      	b.n	8001060 <__aeabi_dadd+0x2d0>
 8000e60:	1b89      	subs	r1, r1, r6
 8000e62:	1c4b      	adds	r3, r1, #1
 8000e64:	2b1f      	cmp	r3, #31
 8000e66:	dd00      	ble.n	8000e6a <__aeabi_dadd+0xda>
 8000e68:	e0a8      	b.n	8000fbc <__aeabi_dadd+0x22c>
 8000e6a:	2220      	movs	r2, #32
 8000e6c:	0039      	movs	r1, r7
 8000e6e:	1ad2      	subs	r2, r2, r3
 8000e70:	0020      	movs	r0, r4
 8000e72:	4094      	lsls	r4, r2
 8000e74:	4091      	lsls	r1, r2
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	1e62      	subs	r2, r4, #1
 8000e7a:	4194      	sbcs	r4, r2
 8000e7c:	40df      	lsrs	r7, r3
 8000e7e:	2600      	movs	r6, #0
 8000e80:	4301      	orrs	r1, r0
 8000e82:	430c      	orrs	r4, r1
 8000e84:	0763      	lsls	r3, r4, #29
 8000e86:	d009      	beq.n	8000e9c <__aeabi_dadd+0x10c>
 8000e88:	230f      	movs	r3, #15
 8000e8a:	4023      	ands	r3, r4
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	d005      	beq.n	8000e9c <__aeabi_dadd+0x10c>
 8000e90:	1d23      	adds	r3, r4, #4
 8000e92:	42a3      	cmp	r3, r4
 8000e94:	41a4      	sbcs	r4, r4
 8000e96:	4264      	negs	r4, r4
 8000e98:	193f      	adds	r7, r7, r4
 8000e9a:	001c      	movs	r4, r3
 8000e9c:	023b      	lsls	r3, r7, #8
 8000e9e:	d400      	bmi.n	8000ea2 <__aeabi_dadd+0x112>
 8000ea0:	e09e      	b.n	8000fe0 <__aeabi_dadd+0x250>
 8000ea2:	4b95      	ldr	r3, [pc, #596]	; (80010f8 <__aeabi_dadd+0x368>)
 8000ea4:	3601      	adds	r6, #1
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	d100      	bne.n	8000eac <__aeabi_dadd+0x11c>
 8000eaa:	e0b7      	b.n	800101c <__aeabi_dadd+0x28c>
 8000eac:	4a93      	ldr	r2, [pc, #588]	; (80010fc <__aeabi_dadd+0x36c>)
 8000eae:	08e4      	lsrs	r4, r4, #3
 8000eb0:	4017      	ands	r7, r2
 8000eb2:	077b      	lsls	r3, r7, #29
 8000eb4:	0571      	lsls	r1, r6, #21
 8000eb6:	027f      	lsls	r7, r7, #9
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	0b3f      	lsrs	r7, r7, #12
 8000ebc:	0d4a      	lsrs	r2, r1, #21
 8000ebe:	0512      	lsls	r2, r2, #20
 8000ec0:	433a      	orrs	r2, r7
 8000ec2:	07ed      	lsls	r5, r5, #31
 8000ec4:	432a      	orrs	r2, r5
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	0011      	movs	r1, r2
 8000eca:	bce0      	pop	{r5, r6, r7}
 8000ecc:	46ba      	mov	sl, r7
 8000ece:	46b1      	mov	r9, r6
 8000ed0:	46a8      	mov	r8, r5
 8000ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ed4:	2c00      	cmp	r4, #0
 8000ed6:	d04b      	beq.n	8000f70 <__aeabi_dadd+0x1e0>
 8000ed8:	464c      	mov	r4, r9
 8000eda:	1ba4      	subs	r4, r4, r6
 8000edc:	46a4      	mov	ip, r4
 8000ede:	2e00      	cmp	r6, #0
 8000ee0:	d000      	beq.n	8000ee4 <__aeabi_dadd+0x154>
 8000ee2:	e123      	b.n	800112c <__aeabi_dadd+0x39c>
 8000ee4:	0004      	movs	r4, r0
 8000ee6:	431c      	orrs	r4, r3
 8000ee8:	d100      	bne.n	8000eec <__aeabi_dadd+0x15c>
 8000eea:	e1af      	b.n	800124c <__aeabi_dadd+0x4bc>
 8000eec:	4662      	mov	r2, ip
 8000eee:	1e54      	subs	r4, r2, #1
 8000ef0:	2a01      	cmp	r2, #1
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_dadd+0x166>
 8000ef4:	e215      	b.n	8001322 <__aeabi_dadd+0x592>
 8000ef6:	4d80      	ldr	r5, [pc, #512]	; (80010f8 <__aeabi_dadd+0x368>)
 8000ef8:	45ac      	cmp	ip, r5
 8000efa:	d100      	bne.n	8000efe <__aeabi_dadd+0x16e>
 8000efc:	e1c8      	b.n	8001290 <__aeabi_dadd+0x500>
 8000efe:	46a4      	mov	ip, r4
 8000f00:	e11b      	b.n	800113a <__aeabi_dadd+0x3aa>
 8000f02:	464a      	mov	r2, r9
 8000f04:	1ab2      	subs	r2, r6, r2
 8000f06:	4694      	mov	ip, r2
 8000f08:	2a00      	cmp	r2, #0
 8000f0a:	dc00      	bgt.n	8000f0e <__aeabi_dadd+0x17e>
 8000f0c:	e0ac      	b.n	8001068 <__aeabi_dadd+0x2d8>
 8000f0e:	464a      	mov	r2, r9
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d043      	beq.n	8000f9c <__aeabi_dadd+0x20c>
 8000f14:	4a78      	ldr	r2, [pc, #480]	; (80010f8 <__aeabi_dadd+0x368>)
 8000f16:	4296      	cmp	r6, r2
 8000f18:	d100      	bne.n	8000f1c <__aeabi_dadd+0x18c>
 8000f1a:	e1af      	b.n	800127c <__aeabi_dadd+0x4ec>
 8000f1c:	2280      	movs	r2, #128	; 0x80
 8000f1e:	003c      	movs	r4, r7
 8000f20:	0412      	lsls	r2, r2, #16
 8000f22:	4314      	orrs	r4, r2
 8000f24:	46a0      	mov	r8, r4
 8000f26:	4662      	mov	r2, ip
 8000f28:	2a38      	cmp	r2, #56	; 0x38
 8000f2a:	dc67      	bgt.n	8000ffc <__aeabi_dadd+0x26c>
 8000f2c:	2a1f      	cmp	r2, #31
 8000f2e:	dc00      	bgt.n	8000f32 <__aeabi_dadd+0x1a2>
 8000f30:	e15f      	b.n	80011f2 <__aeabi_dadd+0x462>
 8000f32:	4647      	mov	r7, r8
 8000f34:	3a20      	subs	r2, #32
 8000f36:	40d7      	lsrs	r7, r2
 8000f38:	4662      	mov	r2, ip
 8000f3a:	2a20      	cmp	r2, #32
 8000f3c:	d005      	beq.n	8000f4a <__aeabi_dadd+0x1ba>
 8000f3e:	4664      	mov	r4, ip
 8000f40:	2240      	movs	r2, #64	; 0x40
 8000f42:	1b12      	subs	r2, r2, r4
 8000f44:	4644      	mov	r4, r8
 8000f46:	4094      	lsls	r4, r2
 8000f48:	4321      	orrs	r1, r4
 8000f4a:	1e4a      	subs	r2, r1, #1
 8000f4c:	4191      	sbcs	r1, r2
 8000f4e:	000c      	movs	r4, r1
 8000f50:	433c      	orrs	r4, r7
 8000f52:	e057      	b.n	8001004 <__aeabi_dadd+0x274>
 8000f54:	003a      	movs	r2, r7
 8000f56:	430a      	orrs	r2, r1
 8000f58:	d100      	bne.n	8000f5c <__aeabi_dadd+0x1cc>
 8000f5a:	e105      	b.n	8001168 <__aeabi_dadd+0x3d8>
 8000f5c:	0022      	movs	r2, r4
 8000f5e:	3a01      	subs	r2, #1
 8000f60:	2c01      	cmp	r4, #1
 8000f62:	d100      	bne.n	8000f66 <__aeabi_dadd+0x1d6>
 8000f64:	e182      	b.n	800126c <__aeabi_dadd+0x4dc>
 8000f66:	4c64      	ldr	r4, [pc, #400]	; (80010f8 <__aeabi_dadd+0x368>)
 8000f68:	45a4      	cmp	ip, r4
 8000f6a:	d05b      	beq.n	8001024 <__aeabi_dadd+0x294>
 8000f6c:	4694      	mov	ip, r2
 8000f6e:	e741      	b.n	8000df4 <__aeabi_dadd+0x64>
 8000f70:	4c63      	ldr	r4, [pc, #396]	; (8001100 <__aeabi_dadd+0x370>)
 8000f72:	1c77      	adds	r7, r6, #1
 8000f74:	4227      	tst	r7, r4
 8000f76:	d000      	beq.n	8000f7a <__aeabi_dadd+0x1ea>
 8000f78:	e0c4      	b.n	8001104 <__aeabi_dadd+0x374>
 8000f7a:	0004      	movs	r4, r0
 8000f7c:	431c      	orrs	r4, r3
 8000f7e:	2e00      	cmp	r6, #0
 8000f80:	d000      	beq.n	8000f84 <__aeabi_dadd+0x1f4>
 8000f82:	e169      	b.n	8001258 <__aeabi_dadd+0x4c8>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d100      	bne.n	8000f8a <__aeabi_dadd+0x1fa>
 8000f88:	e1bf      	b.n	800130a <__aeabi_dadd+0x57a>
 8000f8a:	4644      	mov	r4, r8
 8000f8c:	430c      	orrs	r4, r1
 8000f8e:	d000      	beq.n	8000f92 <__aeabi_dadd+0x202>
 8000f90:	e1d0      	b.n	8001334 <__aeabi_dadd+0x5a4>
 8000f92:	0742      	lsls	r2, r0, #29
 8000f94:	08db      	lsrs	r3, r3, #3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	08c0      	lsrs	r0, r0, #3
 8000f9a:	e029      	b.n	8000ff0 <__aeabi_dadd+0x260>
 8000f9c:	003a      	movs	r2, r7
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dadd+0x214>
 8000fa2:	e170      	b.n	8001286 <__aeabi_dadd+0x4f6>
 8000fa4:	4662      	mov	r2, ip
 8000fa6:	4664      	mov	r4, ip
 8000fa8:	3a01      	subs	r2, #1
 8000faa:	2c01      	cmp	r4, #1
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_dadd+0x220>
 8000fae:	e0e0      	b.n	8001172 <__aeabi_dadd+0x3e2>
 8000fb0:	4c51      	ldr	r4, [pc, #324]	; (80010f8 <__aeabi_dadd+0x368>)
 8000fb2:	45a4      	cmp	ip, r4
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_dadd+0x228>
 8000fb6:	e161      	b.n	800127c <__aeabi_dadd+0x4ec>
 8000fb8:	4694      	mov	ip, r2
 8000fba:	e7b4      	b.n	8000f26 <__aeabi_dadd+0x196>
 8000fbc:	003a      	movs	r2, r7
 8000fbe:	391f      	subs	r1, #31
 8000fc0:	40ca      	lsrs	r2, r1
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	2b20      	cmp	r3, #32
 8000fc6:	d003      	beq.n	8000fd0 <__aeabi_dadd+0x240>
 8000fc8:	2240      	movs	r2, #64	; 0x40
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	409f      	lsls	r7, r3
 8000fce:	433c      	orrs	r4, r7
 8000fd0:	1e63      	subs	r3, r4, #1
 8000fd2:	419c      	sbcs	r4, r3
 8000fd4:	2700      	movs	r7, #0
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	430c      	orrs	r4, r1
 8000fda:	0763      	lsls	r3, r4, #29
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_dadd+0x250>
 8000fde:	e753      	b.n	8000e88 <__aeabi_dadd+0xf8>
 8000fe0:	46b4      	mov	ip, r6
 8000fe2:	08e4      	lsrs	r4, r4, #3
 8000fe4:	077b      	lsls	r3, r7, #29
 8000fe6:	4323      	orrs	r3, r4
 8000fe8:	08f8      	lsrs	r0, r7, #3
 8000fea:	4a43      	ldr	r2, [pc, #268]	; (80010f8 <__aeabi_dadd+0x368>)
 8000fec:	4594      	cmp	ip, r2
 8000fee:	d01d      	beq.n	800102c <__aeabi_dadd+0x29c>
 8000ff0:	4662      	mov	r2, ip
 8000ff2:	0307      	lsls	r7, r0, #12
 8000ff4:	0552      	lsls	r2, r2, #21
 8000ff6:	0b3f      	lsrs	r7, r7, #12
 8000ff8:	0d52      	lsrs	r2, r2, #21
 8000ffa:	e760      	b.n	8000ebe <__aeabi_dadd+0x12e>
 8000ffc:	4644      	mov	r4, r8
 8000ffe:	430c      	orrs	r4, r1
 8001000:	1e62      	subs	r2, r4, #1
 8001002:	4194      	sbcs	r4, r2
 8001004:	18e4      	adds	r4, r4, r3
 8001006:	429c      	cmp	r4, r3
 8001008:	419b      	sbcs	r3, r3
 800100a:	425f      	negs	r7, r3
 800100c:	183f      	adds	r7, r7, r0
 800100e:	023b      	lsls	r3, r7, #8
 8001010:	d5e3      	bpl.n	8000fda <__aeabi_dadd+0x24a>
 8001012:	4b39      	ldr	r3, [pc, #228]	; (80010f8 <__aeabi_dadd+0x368>)
 8001014:	3601      	adds	r6, #1
 8001016:	429e      	cmp	r6, r3
 8001018:	d000      	beq.n	800101c <__aeabi_dadd+0x28c>
 800101a:	e0b5      	b.n	8001188 <__aeabi_dadd+0x3f8>
 800101c:	0032      	movs	r2, r6
 800101e:	2700      	movs	r7, #0
 8001020:	2300      	movs	r3, #0
 8001022:	e74c      	b.n	8000ebe <__aeabi_dadd+0x12e>
 8001024:	0742      	lsls	r2, r0, #29
 8001026:	08db      	lsrs	r3, r3, #3
 8001028:	4313      	orrs	r3, r2
 800102a:	08c0      	lsrs	r0, r0, #3
 800102c:	001a      	movs	r2, r3
 800102e:	4302      	orrs	r2, r0
 8001030:	d100      	bne.n	8001034 <__aeabi_dadd+0x2a4>
 8001032:	e1e1      	b.n	80013f8 <__aeabi_dadd+0x668>
 8001034:	2780      	movs	r7, #128	; 0x80
 8001036:	033f      	lsls	r7, r7, #12
 8001038:	4307      	orrs	r7, r0
 800103a:	033f      	lsls	r7, r7, #12
 800103c:	4a2e      	ldr	r2, [pc, #184]	; (80010f8 <__aeabi_dadd+0x368>)
 800103e:	0b3f      	lsrs	r7, r7, #12
 8001040:	e73d      	b.n	8000ebe <__aeabi_dadd+0x12e>
 8001042:	0020      	movs	r0, r4
 8001044:	f001 fd5a 	bl	8002afc <__clzsi2>
 8001048:	0001      	movs	r1, r0
 800104a:	3118      	adds	r1, #24
 800104c:	291f      	cmp	r1, #31
 800104e:	dc00      	bgt.n	8001052 <__aeabi_dadd+0x2c2>
 8001050:	e6fc      	b.n	8000e4c <__aeabi_dadd+0xbc>
 8001052:	3808      	subs	r0, #8
 8001054:	4084      	lsls	r4, r0
 8001056:	0027      	movs	r7, r4
 8001058:	2400      	movs	r4, #0
 800105a:	42b1      	cmp	r1, r6
 800105c:	db00      	blt.n	8001060 <__aeabi_dadd+0x2d0>
 800105e:	e6ff      	b.n	8000e60 <__aeabi_dadd+0xd0>
 8001060:	4a26      	ldr	r2, [pc, #152]	; (80010fc <__aeabi_dadd+0x36c>)
 8001062:	1a76      	subs	r6, r6, r1
 8001064:	4017      	ands	r7, r2
 8001066:	e70d      	b.n	8000e84 <__aeabi_dadd+0xf4>
 8001068:	2a00      	cmp	r2, #0
 800106a:	d02f      	beq.n	80010cc <__aeabi_dadd+0x33c>
 800106c:	464a      	mov	r2, r9
 800106e:	1b92      	subs	r2, r2, r6
 8001070:	4694      	mov	ip, r2
 8001072:	2e00      	cmp	r6, #0
 8001074:	d100      	bne.n	8001078 <__aeabi_dadd+0x2e8>
 8001076:	e0ad      	b.n	80011d4 <__aeabi_dadd+0x444>
 8001078:	4a1f      	ldr	r2, [pc, #124]	; (80010f8 <__aeabi_dadd+0x368>)
 800107a:	4591      	cmp	r9, r2
 800107c:	d100      	bne.n	8001080 <__aeabi_dadd+0x2f0>
 800107e:	e10f      	b.n	80012a0 <__aeabi_dadd+0x510>
 8001080:	2280      	movs	r2, #128	; 0x80
 8001082:	0412      	lsls	r2, r2, #16
 8001084:	4310      	orrs	r0, r2
 8001086:	4662      	mov	r2, ip
 8001088:	2a38      	cmp	r2, #56	; 0x38
 800108a:	dd00      	ble.n	800108e <__aeabi_dadd+0x2fe>
 800108c:	e10f      	b.n	80012ae <__aeabi_dadd+0x51e>
 800108e:	2a1f      	cmp	r2, #31
 8001090:	dd00      	ble.n	8001094 <__aeabi_dadd+0x304>
 8001092:	e180      	b.n	8001396 <__aeabi_dadd+0x606>
 8001094:	4664      	mov	r4, ip
 8001096:	2220      	movs	r2, #32
 8001098:	001e      	movs	r6, r3
 800109a:	1b12      	subs	r2, r2, r4
 800109c:	4667      	mov	r7, ip
 800109e:	0004      	movs	r4, r0
 80010a0:	4093      	lsls	r3, r2
 80010a2:	4094      	lsls	r4, r2
 80010a4:	40fe      	lsrs	r6, r7
 80010a6:	1e5a      	subs	r2, r3, #1
 80010a8:	4193      	sbcs	r3, r2
 80010aa:	40f8      	lsrs	r0, r7
 80010ac:	4334      	orrs	r4, r6
 80010ae:	431c      	orrs	r4, r3
 80010b0:	4480      	add	r8, r0
 80010b2:	1864      	adds	r4, r4, r1
 80010b4:	428c      	cmp	r4, r1
 80010b6:	41bf      	sbcs	r7, r7
 80010b8:	427f      	negs	r7, r7
 80010ba:	464e      	mov	r6, r9
 80010bc:	4447      	add	r7, r8
 80010be:	e7a6      	b.n	800100e <__aeabi_dadd+0x27e>
 80010c0:	4642      	mov	r2, r8
 80010c2:	430a      	orrs	r2, r1
 80010c4:	0011      	movs	r1, r2
 80010c6:	1e4a      	subs	r2, r1, #1
 80010c8:	4191      	sbcs	r1, r2
 80010ca:	e6ad      	b.n	8000e28 <__aeabi_dadd+0x98>
 80010cc:	4c0c      	ldr	r4, [pc, #48]	; (8001100 <__aeabi_dadd+0x370>)
 80010ce:	1c72      	adds	r2, r6, #1
 80010d0:	4222      	tst	r2, r4
 80010d2:	d000      	beq.n	80010d6 <__aeabi_dadd+0x346>
 80010d4:	e0a1      	b.n	800121a <__aeabi_dadd+0x48a>
 80010d6:	0002      	movs	r2, r0
 80010d8:	431a      	orrs	r2, r3
 80010da:	2e00      	cmp	r6, #0
 80010dc:	d000      	beq.n	80010e0 <__aeabi_dadd+0x350>
 80010de:	e0fa      	b.n	80012d6 <__aeabi_dadd+0x546>
 80010e0:	2a00      	cmp	r2, #0
 80010e2:	d100      	bne.n	80010e6 <__aeabi_dadd+0x356>
 80010e4:	e145      	b.n	8001372 <__aeabi_dadd+0x5e2>
 80010e6:	003a      	movs	r2, r7
 80010e8:	430a      	orrs	r2, r1
 80010ea:	d000      	beq.n	80010ee <__aeabi_dadd+0x35e>
 80010ec:	e146      	b.n	800137c <__aeabi_dadd+0x5ec>
 80010ee:	0742      	lsls	r2, r0, #29
 80010f0:	08db      	lsrs	r3, r3, #3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	08c0      	lsrs	r0, r0, #3
 80010f6:	e77b      	b.n	8000ff0 <__aeabi_dadd+0x260>
 80010f8:	000007ff 	.word	0x000007ff
 80010fc:	ff7fffff 	.word	0xff7fffff
 8001100:	000007fe 	.word	0x000007fe
 8001104:	4647      	mov	r7, r8
 8001106:	1a5c      	subs	r4, r3, r1
 8001108:	1bc2      	subs	r2, r0, r7
 800110a:	42a3      	cmp	r3, r4
 800110c:	41bf      	sbcs	r7, r7
 800110e:	427f      	negs	r7, r7
 8001110:	46b9      	mov	r9, r7
 8001112:	0017      	movs	r7, r2
 8001114:	464a      	mov	r2, r9
 8001116:	1abf      	subs	r7, r7, r2
 8001118:	023a      	lsls	r2, r7, #8
 800111a:	d500      	bpl.n	800111e <__aeabi_dadd+0x38e>
 800111c:	e08d      	b.n	800123a <__aeabi_dadd+0x4aa>
 800111e:	0023      	movs	r3, r4
 8001120:	433b      	orrs	r3, r7
 8001122:	d000      	beq.n	8001126 <__aeabi_dadd+0x396>
 8001124:	e68a      	b.n	8000e3c <__aeabi_dadd+0xac>
 8001126:	2000      	movs	r0, #0
 8001128:	2500      	movs	r5, #0
 800112a:	e761      	b.n	8000ff0 <__aeabi_dadd+0x260>
 800112c:	4cb4      	ldr	r4, [pc, #720]	; (8001400 <__aeabi_dadd+0x670>)
 800112e:	45a1      	cmp	r9, r4
 8001130:	d100      	bne.n	8001134 <__aeabi_dadd+0x3a4>
 8001132:	e0ad      	b.n	8001290 <__aeabi_dadd+0x500>
 8001134:	2480      	movs	r4, #128	; 0x80
 8001136:	0424      	lsls	r4, r4, #16
 8001138:	4320      	orrs	r0, r4
 800113a:	4664      	mov	r4, ip
 800113c:	2c38      	cmp	r4, #56	; 0x38
 800113e:	dc3d      	bgt.n	80011bc <__aeabi_dadd+0x42c>
 8001140:	4662      	mov	r2, ip
 8001142:	2c1f      	cmp	r4, #31
 8001144:	dd00      	ble.n	8001148 <__aeabi_dadd+0x3b8>
 8001146:	e0b7      	b.n	80012b8 <__aeabi_dadd+0x528>
 8001148:	2520      	movs	r5, #32
 800114a:	001e      	movs	r6, r3
 800114c:	1b2d      	subs	r5, r5, r4
 800114e:	0004      	movs	r4, r0
 8001150:	40ab      	lsls	r3, r5
 8001152:	40ac      	lsls	r4, r5
 8001154:	40d6      	lsrs	r6, r2
 8001156:	40d0      	lsrs	r0, r2
 8001158:	4642      	mov	r2, r8
 800115a:	1e5d      	subs	r5, r3, #1
 800115c:	41ab      	sbcs	r3, r5
 800115e:	4334      	orrs	r4, r6
 8001160:	1a12      	subs	r2, r2, r0
 8001162:	4690      	mov	r8, r2
 8001164:	4323      	orrs	r3, r4
 8001166:	e02c      	b.n	80011c2 <__aeabi_dadd+0x432>
 8001168:	0742      	lsls	r2, r0, #29
 800116a:	08db      	lsrs	r3, r3, #3
 800116c:	4313      	orrs	r3, r2
 800116e:	08c0      	lsrs	r0, r0, #3
 8001170:	e73b      	b.n	8000fea <__aeabi_dadd+0x25a>
 8001172:	185c      	adds	r4, r3, r1
 8001174:	429c      	cmp	r4, r3
 8001176:	419b      	sbcs	r3, r3
 8001178:	4440      	add	r0, r8
 800117a:	425b      	negs	r3, r3
 800117c:	18c7      	adds	r7, r0, r3
 800117e:	2601      	movs	r6, #1
 8001180:	023b      	lsls	r3, r7, #8
 8001182:	d400      	bmi.n	8001186 <__aeabi_dadd+0x3f6>
 8001184:	e729      	b.n	8000fda <__aeabi_dadd+0x24a>
 8001186:	2602      	movs	r6, #2
 8001188:	4a9e      	ldr	r2, [pc, #632]	; (8001404 <__aeabi_dadd+0x674>)
 800118a:	0863      	lsrs	r3, r4, #1
 800118c:	4017      	ands	r7, r2
 800118e:	2201      	movs	r2, #1
 8001190:	4014      	ands	r4, r2
 8001192:	431c      	orrs	r4, r3
 8001194:	07fb      	lsls	r3, r7, #31
 8001196:	431c      	orrs	r4, r3
 8001198:	087f      	lsrs	r7, r7, #1
 800119a:	e673      	b.n	8000e84 <__aeabi_dadd+0xf4>
 800119c:	4644      	mov	r4, r8
 800119e:	3a20      	subs	r2, #32
 80011a0:	40d4      	lsrs	r4, r2
 80011a2:	4662      	mov	r2, ip
 80011a4:	2a20      	cmp	r2, #32
 80011a6:	d005      	beq.n	80011b4 <__aeabi_dadd+0x424>
 80011a8:	4667      	mov	r7, ip
 80011aa:	2240      	movs	r2, #64	; 0x40
 80011ac:	1bd2      	subs	r2, r2, r7
 80011ae:	4647      	mov	r7, r8
 80011b0:	4097      	lsls	r7, r2
 80011b2:	4339      	orrs	r1, r7
 80011b4:	1e4a      	subs	r2, r1, #1
 80011b6:	4191      	sbcs	r1, r2
 80011b8:	4321      	orrs	r1, r4
 80011ba:	e635      	b.n	8000e28 <__aeabi_dadd+0x98>
 80011bc:	4303      	orrs	r3, r0
 80011be:	1e58      	subs	r0, r3, #1
 80011c0:	4183      	sbcs	r3, r0
 80011c2:	1acc      	subs	r4, r1, r3
 80011c4:	42a1      	cmp	r1, r4
 80011c6:	41bf      	sbcs	r7, r7
 80011c8:	4643      	mov	r3, r8
 80011ca:	427f      	negs	r7, r7
 80011cc:	4655      	mov	r5, sl
 80011ce:	464e      	mov	r6, r9
 80011d0:	1bdf      	subs	r7, r3, r7
 80011d2:	e62e      	b.n	8000e32 <__aeabi_dadd+0xa2>
 80011d4:	0002      	movs	r2, r0
 80011d6:	431a      	orrs	r2, r3
 80011d8:	d100      	bne.n	80011dc <__aeabi_dadd+0x44c>
 80011da:	e0bd      	b.n	8001358 <__aeabi_dadd+0x5c8>
 80011dc:	4662      	mov	r2, ip
 80011de:	4664      	mov	r4, ip
 80011e0:	3a01      	subs	r2, #1
 80011e2:	2c01      	cmp	r4, #1
 80011e4:	d100      	bne.n	80011e8 <__aeabi_dadd+0x458>
 80011e6:	e0e5      	b.n	80013b4 <__aeabi_dadd+0x624>
 80011e8:	4c85      	ldr	r4, [pc, #532]	; (8001400 <__aeabi_dadd+0x670>)
 80011ea:	45a4      	cmp	ip, r4
 80011ec:	d058      	beq.n	80012a0 <__aeabi_dadd+0x510>
 80011ee:	4694      	mov	ip, r2
 80011f0:	e749      	b.n	8001086 <__aeabi_dadd+0x2f6>
 80011f2:	4664      	mov	r4, ip
 80011f4:	2220      	movs	r2, #32
 80011f6:	1b12      	subs	r2, r2, r4
 80011f8:	4644      	mov	r4, r8
 80011fa:	4094      	lsls	r4, r2
 80011fc:	000f      	movs	r7, r1
 80011fe:	46a1      	mov	r9, r4
 8001200:	4664      	mov	r4, ip
 8001202:	4091      	lsls	r1, r2
 8001204:	40e7      	lsrs	r7, r4
 8001206:	464c      	mov	r4, r9
 8001208:	1e4a      	subs	r2, r1, #1
 800120a:	4191      	sbcs	r1, r2
 800120c:	433c      	orrs	r4, r7
 800120e:	4642      	mov	r2, r8
 8001210:	430c      	orrs	r4, r1
 8001212:	4661      	mov	r1, ip
 8001214:	40ca      	lsrs	r2, r1
 8001216:	1880      	adds	r0, r0, r2
 8001218:	e6f4      	b.n	8001004 <__aeabi_dadd+0x274>
 800121a:	4c79      	ldr	r4, [pc, #484]	; (8001400 <__aeabi_dadd+0x670>)
 800121c:	42a2      	cmp	r2, r4
 800121e:	d100      	bne.n	8001222 <__aeabi_dadd+0x492>
 8001220:	e6fd      	b.n	800101e <__aeabi_dadd+0x28e>
 8001222:	1859      	adds	r1, r3, r1
 8001224:	4299      	cmp	r1, r3
 8001226:	419b      	sbcs	r3, r3
 8001228:	4440      	add	r0, r8
 800122a:	425f      	negs	r7, r3
 800122c:	19c7      	adds	r7, r0, r7
 800122e:	07fc      	lsls	r4, r7, #31
 8001230:	0849      	lsrs	r1, r1, #1
 8001232:	0016      	movs	r6, r2
 8001234:	430c      	orrs	r4, r1
 8001236:	087f      	lsrs	r7, r7, #1
 8001238:	e6cf      	b.n	8000fda <__aeabi_dadd+0x24a>
 800123a:	1acc      	subs	r4, r1, r3
 800123c:	42a1      	cmp	r1, r4
 800123e:	41bf      	sbcs	r7, r7
 8001240:	4643      	mov	r3, r8
 8001242:	427f      	negs	r7, r7
 8001244:	1a18      	subs	r0, r3, r0
 8001246:	4655      	mov	r5, sl
 8001248:	1bc7      	subs	r7, r0, r7
 800124a:	e5f7      	b.n	8000e3c <__aeabi_dadd+0xac>
 800124c:	08c9      	lsrs	r1, r1, #3
 800124e:	077b      	lsls	r3, r7, #29
 8001250:	4655      	mov	r5, sl
 8001252:	430b      	orrs	r3, r1
 8001254:	08f8      	lsrs	r0, r7, #3
 8001256:	e6c8      	b.n	8000fea <__aeabi_dadd+0x25a>
 8001258:	2c00      	cmp	r4, #0
 800125a:	d000      	beq.n	800125e <__aeabi_dadd+0x4ce>
 800125c:	e081      	b.n	8001362 <__aeabi_dadd+0x5d2>
 800125e:	4643      	mov	r3, r8
 8001260:	430b      	orrs	r3, r1
 8001262:	d115      	bne.n	8001290 <__aeabi_dadd+0x500>
 8001264:	2080      	movs	r0, #128	; 0x80
 8001266:	2500      	movs	r5, #0
 8001268:	0300      	lsls	r0, r0, #12
 800126a:	e6e3      	b.n	8001034 <__aeabi_dadd+0x2a4>
 800126c:	1a5c      	subs	r4, r3, r1
 800126e:	42a3      	cmp	r3, r4
 8001270:	419b      	sbcs	r3, r3
 8001272:	1bc7      	subs	r7, r0, r7
 8001274:	425b      	negs	r3, r3
 8001276:	2601      	movs	r6, #1
 8001278:	1aff      	subs	r7, r7, r3
 800127a:	e5da      	b.n	8000e32 <__aeabi_dadd+0xa2>
 800127c:	0742      	lsls	r2, r0, #29
 800127e:	08db      	lsrs	r3, r3, #3
 8001280:	4313      	orrs	r3, r2
 8001282:	08c0      	lsrs	r0, r0, #3
 8001284:	e6d2      	b.n	800102c <__aeabi_dadd+0x29c>
 8001286:	0742      	lsls	r2, r0, #29
 8001288:	08db      	lsrs	r3, r3, #3
 800128a:	4313      	orrs	r3, r2
 800128c:	08c0      	lsrs	r0, r0, #3
 800128e:	e6ac      	b.n	8000fea <__aeabi_dadd+0x25a>
 8001290:	4643      	mov	r3, r8
 8001292:	4642      	mov	r2, r8
 8001294:	08c9      	lsrs	r1, r1, #3
 8001296:	075b      	lsls	r3, r3, #29
 8001298:	4655      	mov	r5, sl
 800129a:	430b      	orrs	r3, r1
 800129c:	08d0      	lsrs	r0, r2, #3
 800129e:	e6c5      	b.n	800102c <__aeabi_dadd+0x29c>
 80012a0:	4643      	mov	r3, r8
 80012a2:	4642      	mov	r2, r8
 80012a4:	075b      	lsls	r3, r3, #29
 80012a6:	08c9      	lsrs	r1, r1, #3
 80012a8:	430b      	orrs	r3, r1
 80012aa:	08d0      	lsrs	r0, r2, #3
 80012ac:	e6be      	b.n	800102c <__aeabi_dadd+0x29c>
 80012ae:	4303      	orrs	r3, r0
 80012b0:	001c      	movs	r4, r3
 80012b2:	1e63      	subs	r3, r4, #1
 80012b4:	419c      	sbcs	r4, r3
 80012b6:	e6fc      	b.n	80010b2 <__aeabi_dadd+0x322>
 80012b8:	0002      	movs	r2, r0
 80012ba:	3c20      	subs	r4, #32
 80012bc:	40e2      	lsrs	r2, r4
 80012be:	0014      	movs	r4, r2
 80012c0:	4662      	mov	r2, ip
 80012c2:	2a20      	cmp	r2, #32
 80012c4:	d003      	beq.n	80012ce <__aeabi_dadd+0x53e>
 80012c6:	2540      	movs	r5, #64	; 0x40
 80012c8:	1aad      	subs	r5, r5, r2
 80012ca:	40a8      	lsls	r0, r5
 80012cc:	4303      	orrs	r3, r0
 80012ce:	1e58      	subs	r0, r3, #1
 80012d0:	4183      	sbcs	r3, r0
 80012d2:	4323      	orrs	r3, r4
 80012d4:	e775      	b.n	80011c2 <__aeabi_dadd+0x432>
 80012d6:	2a00      	cmp	r2, #0
 80012d8:	d0e2      	beq.n	80012a0 <__aeabi_dadd+0x510>
 80012da:	003a      	movs	r2, r7
 80012dc:	430a      	orrs	r2, r1
 80012de:	d0cd      	beq.n	800127c <__aeabi_dadd+0x4ec>
 80012e0:	0742      	lsls	r2, r0, #29
 80012e2:	08db      	lsrs	r3, r3, #3
 80012e4:	4313      	orrs	r3, r2
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	08c0      	lsrs	r0, r0, #3
 80012ea:	0312      	lsls	r2, r2, #12
 80012ec:	4210      	tst	r0, r2
 80012ee:	d006      	beq.n	80012fe <__aeabi_dadd+0x56e>
 80012f0:	08fc      	lsrs	r4, r7, #3
 80012f2:	4214      	tst	r4, r2
 80012f4:	d103      	bne.n	80012fe <__aeabi_dadd+0x56e>
 80012f6:	0020      	movs	r0, r4
 80012f8:	08cb      	lsrs	r3, r1, #3
 80012fa:	077a      	lsls	r2, r7, #29
 80012fc:	4313      	orrs	r3, r2
 80012fe:	0f5a      	lsrs	r2, r3, #29
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	0752      	lsls	r2, r2, #29
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	4313      	orrs	r3, r2
 8001308:	e690      	b.n	800102c <__aeabi_dadd+0x29c>
 800130a:	4643      	mov	r3, r8
 800130c:	430b      	orrs	r3, r1
 800130e:	d100      	bne.n	8001312 <__aeabi_dadd+0x582>
 8001310:	e709      	b.n	8001126 <__aeabi_dadd+0x396>
 8001312:	4643      	mov	r3, r8
 8001314:	4642      	mov	r2, r8
 8001316:	08c9      	lsrs	r1, r1, #3
 8001318:	075b      	lsls	r3, r3, #29
 800131a:	4655      	mov	r5, sl
 800131c:	430b      	orrs	r3, r1
 800131e:	08d0      	lsrs	r0, r2, #3
 8001320:	e666      	b.n	8000ff0 <__aeabi_dadd+0x260>
 8001322:	1acc      	subs	r4, r1, r3
 8001324:	42a1      	cmp	r1, r4
 8001326:	4189      	sbcs	r1, r1
 8001328:	1a3f      	subs	r7, r7, r0
 800132a:	4249      	negs	r1, r1
 800132c:	4655      	mov	r5, sl
 800132e:	2601      	movs	r6, #1
 8001330:	1a7f      	subs	r7, r7, r1
 8001332:	e57e      	b.n	8000e32 <__aeabi_dadd+0xa2>
 8001334:	4642      	mov	r2, r8
 8001336:	1a5c      	subs	r4, r3, r1
 8001338:	1a87      	subs	r7, r0, r2
 800133a:	42a3      	cmp	r3, r4
 800133c:	4192      	sbcs	r2, r2
 800133e:	4252      	negs	r2, r2
 8001340:	1abf      	subs	r7, r7, r2
 8001342:	023a      	lsls	r2, r7, #8
 8001344:	d53d      	bpl.n	80013c2 <__aeabi_dadd+0x632>
 8001346:	1acc      	subs	r4, r1, r3
 8001348:	42a1      	cmp	r1, r4
 800134a:	4189      	sbcs	r1, r1
 800134c:	4643      	mov	r3, r8
 800134e:	4249      	negs	r1, r1
 8001350:	1a1f      	subs	r7, r3, r0
 8001352:	4655      	mov	r5, sl
 8001354:	1a7f      	subs	r7, r7, r1
 8001356:	e595      	b.n	8000e84 <__aeabi_dadd+0xf4>
 8001358:	077b      	lsls	r3, r7, #29
 800135a:	08c9      	lsrs	r1, r1, #3
 800135c:	430b      	orrs	r3, r1
 800135e:	08f8      	lsrs	r0, r7, #3
 8001360:	e643      	b.n	8000fea <__aeabi_dadd+0x25a>
 8001362:	4644      	mov	r4, r8
 8001364:	08db      	lsrs	r3, r3, #3
 8001366:	430c      	orrs	r4, r1
 8001368:	d130      	bne.n	80013cc <__aeabi_dadd+0x63c>
 800136a:	0742      	lsls	r2, r0, #29
 800136c:	4313      	orrs	r3, r2
 800136e:	08c0      	lsrs	r0, r0, #3
 8001370:	e65c      	b.n	800102c <__aeabi_dadd+0x29c>
 8001372:	077b      	lsls	r3, r7, #29
 8001374:	08c9      	lsrs	r1, r1, #3
 8001376:	430b      	orrs	r3, r1
 8001378:	08f8      	lsrs	r0, r7, #3
 800137a:	e639      	b.n	8000ff0 <__aeabi_dadd+0x260>
 800137c:	185c      	adds	r4, r3, r1
 800137e:	429c      	cmp	r4, r3
 8001380:	419b      	sbcs	r3, r3
 8001382:	4440      	add	r0, r8
 8001384:	425b      	negs	r3, r3
 8001386:	18c7      	adds	r7, r0, r3
 8001388:	023b      	lsls	r3, r7, #8
 800138a:	d400      	bmi.n	800138e <__aeabi_dadd+0x5fe>
 800138c:	e625      	b.n	8000fda <__aeabi_dadd+0x24a>
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <__aeabi_dadd+0x674>)
 8001390:	2601      	movs	r6, #1
 8001392:	401f      	ands	r7, r3
 8001394:	e621      	b.n	8000fda <__aeabi_dadd+0x24a>
 8001396:	0004      	movs	r4, r0
 8001398:	3a20      	subs	r2, #32
 800139a:	40d4      	lsrs	r4, r2
 800139c:	4662      	mov	r2, ip
 800139e:	2a20      	cmp	r2, #32
 80013a0:	d004      	beq.n	80013ac <__aeabi_dadd+0x61c>
 80013a2:	2240      	movs	r2, #64	; 0x40
 80013a4:	4666      	mov	r6, ip
 80013a6:	1b92      	subs	r2, r2, r6
 80013a8:	4090      	lsls	r0, r2
 80013aa:	4303      	orrs	r3, r0
 80013ac:	1e5a      	subs	r2, r3, #1
 80013ae:	4193      	sbcs	r3, r2
 80013b0:	431c      	orrs	r4, r3
 80013b2:	e67e      	b.n	80010b2 <__aeabi_dadd+0x322>
 80013b4:	185c      	adds	r4, r3, r1
 80013b6:	428c      	cmp	r4, r1
 80013b8:	4189      	sbcs	r1, r1
 80013ba:	4440      	add	r0, r8
 80013bc:	4249      	negs	r1, r1
 80013be:	1847      	adds	r7, r0, r1
 80013c0:	e6dd      	b.n	800117e <__aeabi_dadd+0x3ee>
 80013c2:	0023      	movs	r3, r4
 80013c4:	433b      	orrs	r3, r7
 80013c6:	d100      	bne.n	80013ca <__aeabi_dadd+0x63a>
 80013c8:	e6ad      	b.n	8001126 <__aeabi_dadd+0x396>
 80013ca:	e606      	b.n	8000fda <__aeabi_dadd+0x24a>
 80013cc:	0744      	lsls	r4, r0, #29
 80013ce:	4323      	orrs	r3, r4
 80013d0:	2480      	movs	r4, #128	; 0x80
 80013d2:	08c0      	lsrs	r0, r0, #3
 80013d4:	0324      	lsls	r4, r4, #12
 80013d6:	4220      	tst	r0, r4
 80013d8:	d008      	beq.n	80013ec <__aeabi_dadd+0x65c>
 80013da:	4642      	mov	r2, r8
 80013dc:	08d6      	lsrs	r6, r2, #3
 80013de:	4226      	tst	r6, r4
 80013e0:	d104      	bne.n	80013ec <__aeabi_dadd+0x65c>
 80013e2:	4655      	mov	r5, sl
 80013e4:	0030      	movs	r0, r6
 80013e6:	08cb      	lsrs	r3, r1, #3
 80013e8:	0751      	lsls	r1, r2, #29
 80013ea:	430b      	orrs	r3, r1
 80013ec:	0f5a      	lsrs	r2, r3, #29
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	08db      	lsrs	r3, r3, #3
 80013f2:	0752      	lsls	r2, r2, #29
 80013f4:	4313      	orrs	r3, r2
 80013f6:	e619      	b.n	800102c <__aeabi_dadd+0x29c>
 80013f8:	2300      	movs	r3, #0
 80013fa:	4a01      	ldr	r2, [pc, #4]	; (8001400 <__aeabi_dadd+0x670>)
 80013fc:	001f      	movs	r7, r3
 80013fe:	e55e      	b.n	8000ebe <__aeabi_dadd+0x12e>
 8001400:	000007ff 	.word	0x000007ff
 8001404:	ff7fffff 	.word	0xff7fffff

08001408 <__aeabi_ddiv>:
 8001408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140a:	4657      	mov	r7, sl
 800140c:	464e      	mov	r6, r9
 800140e:	4645      	mov	r5, r8
 8001410:	46de      	mov	lr, fp
 8001412:	b5e0      	push	{r5, r6, r7, lr}
 8001414:	4681      	mov	r9, r0
 8001416:	0005      	movs	r5, r0
 8001418:	030c      	lsls	r4, r1, #12
 800141a:	0048      	lsls	r0, r1, #1
 800141c:	4692      	mov	sl, r2
 800141e:	001f      	movs	r7, r3
 8001420:	b085      	sub	sp, #20
 8001422:	0b24      	lsrs	r4, r4, #12
 8001424:	0d40      	lsrs	r0, r0, #21
 8001426:	0fce      	lsrs	r6, r1, #31
 8001428:	2800      	cmp	r0, #0
 800142a:	d100      	bne.n	800142e <__aeabi_ddiv+0x26>
 800142c:	e156      	b.n	80016dc <__aeabi_ddiv+0x2d4>
 800142e:	4bd4      	ldr	r3, [pc, #848]	; (8001780 <__aeabi_ddiv+0x378>)
 8001430:	4298      	cmp	r0, r3
 8001432:	d100      	bne.n	8001436 <__aeabi_ddiv+0x2e>
 8001434:	e172      	b.n	800171c <__aeabi_ddiv+0x314>
 8001436:	0f6b      	lsrs	r3, r5, #29
 8001438:	00e4      	lsls	r4, r4, #3
 800143a:	431c      	orrs	r4, r3
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	041b      	lsls	r3, r3, #16
 8001440:	4323      	orrs	r3, r4
 8001442:	4698      	mov	r8, r3
 8001444:	4bcf      	ldr	r3, [pc, #828]	; (8001784 <__aeabi_ddiv+0x37c>)
 8001446:	00ed      	lsls	r5, r5, #3
 8001448:	469b      	mov	fp, r3
 800144a:	2300      	movs	r3, #0
 800144c:	4699      	mov	r9, r3
 800144e:	4483      	add	fp, r0
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	033c      	lsls	r4, r7, #12
 8001454:	007b      	lsls	r3, r7, #1
 8001456:	4650      	mov	r0, sl
 8001458:	0b24      	lsrs	r4, r4, #12
 800145a:	0d5b      	lsrs	r3, r3, #21
 800145c:	0fff      	lsrs	r7, r7, #31
 800145e:	2b00      	cmp	r3, #0
 8001460:	d100      	bne.n	8001464 <__aeabi_ddiv+0x5c>
 8001462:	e11f      	b.n	80016a4 <__aeabi_ddiv+0x29c>
 8001464:	4ac6      	ldr	r2, [pc, #792]	; (8001780 <__aeabi_ddiv+0x378>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d100      	bne.n	800146c <__aeabi_ddiv+0x64>
 800146a:	e162      	b.n	8001732 <__aeabi_ddiv+0x32a>
 800146c:	49c5      	ldr	r1, [pc, #788]	; (8001784 <__aeabi_ddiv+0x37c>)
 800146e:	0f42      	lsrs	r2, r0, #29
 8001470:	468c      	mov	ip, r1
 8001472:	00e4      	lsls	r4, r4, #3
 8001474:	4659      	mov	r1, fp
 8001476:	4314      	orrs	r4, r2
 8001478:	2280      	movs	r2, #128	; 0x80
 800147a:	4463      	add	r3, ip
 800147c:	0412      	lsls	r2, r2, #16
 800147e:	1acb      	subs	r3, r1, r3
 8001480:	4314      	orrs	r4, r2
 8001482:	469b      	mov	fp, r3
 8001484:	00c2      	lsls	r2, r0, #3
 8001486:	2000      	movs	r0, #0
 8001488:	0033      	movs	r3, r6
 800148a:	407b      	eors	r3, r7
 800148c:	469a      	mov	sl, r3
 800148e:	464b      	mov	r3, r9
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d827      	bhi.n	80014e4 <__aeabi_ddiv+0xdc>
 8001494:	49bc      	ldr	r1, [pc, #752]	; (8001788 <__aeabi_ddiv+0x380>)
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	58cb      	ldr	r3, [r1, r3]
 800149a:	469f      	mov	pc, r3
 800149c:	46b2      	mov	sl, r6
 800149e:	9b00      	ldr	r3, [sp, #0]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d016      	beq.n	80014d2 <__aeabi_ddiv+0xca>
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d100      	bne.n	80014aa <__aeabi_ddiv+0xa2>
 80014a8:	e28e      	b.n	80019c8 <__aeabi_ddiv+0x5c0>
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d000      	beq.n	80014b0 <__aeabi_ddiv+0xa8>
 80014ae:	e0d9      	b.n	8001664 <__aeabi_ddiv+0x25c>
 80014b0:	2300      	movs	r3, #0
 80014b2:	2400      	movs	r4, #0
 80014b4:	2500      	movs	r5, #0
 80014b6:	4652      	mov	r2, sl
 80014b8:	051b      	lsls	r3, r3, #20
 80014ba:	4323      	orrs	r3, r4
 80014bc:	07d2      	lsls	r2, r2, #31
 80014be:	4313      	orrs	r3, r2
 80014c0:	0028      	movs	r0, r5
 80014c2:	0019      	movs	r1, r3
 80014c4:	b005      	add	sp, #20
 80014c6:	bcf0      	pop	{r4, r5, r6, r7}
 80014c8:	46bb      	mov	fp, r7
 80014ca:	46b2      	mov	sl, r6
 80014cc:	46a9      	mov	r9, r5
 80014ce:	46a0      	mov	r8, r4
 80014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d2:	2400      	movs	r4, #0
 80014d4:	2500      	movs	r5, #0
 80014d6:	4baa      	ldr	r3, [pc, #680]	; (8001780 <__aeabi_ddiv+0x378>)
 80014d8:	e7ed      	b.n	80014b6 <__aeabi_ddiv+0xae>
 80014da:	46ba      	mov	sl, r7
 80014dc:	46a0      	mov	r8, r4
 80014de:	0015      	movs	r5, r2
 80014e0:	9000      	str	r0, [sp, #0]
 80014e2:	e7dc      	b.n	800149e <__aeabi_ddiv+0x96>
 80014e4:	4544      	cmp	r4, r8
 80014e6:	d200      	bcs.n	80014ea <__aeabi_ddiv+0xe2>
 80014e8:	e1c7      	b.n	800187a <__aeabi_ddiv+0x472>
 80014ea:	d100      	bne.n	80014ee <__aeabi_ddiv+0xe6>
 80014ec:	e1c2      	b.n	8001874 <__aeabi_ddiv+0x46c>
 80014ee:	2301      	movs	r3, #1
 80014f0:	425b      	negs	r3, r3
 80014f2:	469c      	mov	ip, r3
 80014f4:	002e      	movs	r6, r5
 80014f6:	4640      	mov	r0, r8
 80014f8:	2500      	movs	r5, #0
 80014fa:	44e3      	add	fp, ip
 80014fc:	0223      	lsls	r3, r4, #8
 80014fe:	0e14      	lsrs	r4, r2, #24
 8001500:	431c      	orrs	r4, r3
 8001502:	0c1b      	lsrs	r3, r3, #16
 8001504:	4699      	mov	r9, r3
 8001506:	0423      	lsls	r3, r4, #16
 8001508:	0c1f      	lsrs	r7, r3, #16
 800150a:	0212      	lsls	r2, r2, #8
 800150c:	4649      	mov	r1, r9
 800150e:	9200      	str	r2, [sp, #0]
 8001510:	9701      	str	r7, [sp, #4]
 8001512:	f7fe fe9b 	bl	800024c <__aeabi_uidivmod>
 8001516:	0002      	movs	r2, r0
 8001518:	437a      	muls	r2, r7
 800151a:	040b      	lsls	r3, r1, #16
 800151c:	0c31      	lsrs	r1, r6, #16
 800151e:	4680      	mov	r8, r0
 8001520:	4319      	orrs	r1, r3
 8001522:	428a      	cmp	r2, r1
 8001524:	d907      	bls.n	8001536 <__aeabi_ddiv+0x12e>
 8001526:	2301      	movs	r3, #1
 8001528:	425b      	negs	r3, r3
 800152a:	469c      	mov	ip, r3
 800152c:	1909      	adds	r1, r1, r4
 800152e:	44e0      	add	r8, ip
 8001530:	428c      	cmp	r4, r1
 8001532:	d800      	bhi.n	8001536 <__aeabi_ddiv+0x12e>
 8001534:	e207      	b.n	8001946 <__aeabi_ddiv+0x53e>
 8001536:	1a88      	subs	r0, r1, r2
 8001538:	4649      	mov	r1, r9
 800153a:	f7fe fe87 	bl	800024c <__aeabi_uidivmod>
 800153e:	0409      	lsls	r1, r1, #16
 8001540:	468c      	mov	ip, r1
 8001542:	0431      	lsls	r1, r6, #16
 8001544:	4666      	mov	r6, ip
 8001546:	9a01      	ldr	r2, [sp, #4]
 8001548:	0c09      	lsrs	r1, r1, #16
 800154a:	4342      	muls	r2, r0
 800154c:	0003      	movs	r3, r0
 800154e:	4331      	orrs	r1, r6
 8001550:	428a      	cmp	r2, r1
 8001552:	d904      	bls.n	800155e <__aeabi_ddiv+0x156>
 8001554:	1909      	adds	r1, r1, r4
 8001556:	3b01      	subs	r3, #1
 8001558:	428c      	cmp	r4, r1
 800155a:	d800      	bhi.n	800155e <__aeabi_ddiv+0x156>
 800155c:	e1ed      	b.n	800193a <__aeabi_ddiv+0x532>
 800155e:	1a88      	subs	r0, r1, r2
 8001560:	4642      	mov	r2, r8
 8001562:	0412      	lsls	r2, r2, #16
 8001564:	431a      	orrs	r2, r3
 8001566:	4690      	mov	r8, r2
 8001568:	4641      	mov	r1, r8
 800156a:	9b00      	ldr	r3, [sp, #0]
 800156c:	040e      	lsls	r6, r1, #16
 800156e:	0c1b      	lsrs	r3, r3, #16
 8001570:	001f      	movs	r7, r3
 8001572:	9302      	str	r3, [sp, #8]
 8001574:	9b00      	ldr	r3, [sp, #0]
 8001576:	0c36      	lsrs	r6, r6, #16
 8001578:	041b      	lsls	r3, r3, #16
 800157a:	0c19      	lsrs	r1, r3, #16
 800157c:	000b      	movs	r3, r1
 800157e:	4373      	muls	r3, r6
 8001580:	0c12      	lsrs	r2, r2, #16
 8001582:	437e      	muls	r6, r7
 8001584:	9103      	str	r1, [sp, #12]
 8001586:	4351      	muls	r1, r2
 8001588:	437a      	muls	r2, r7
 800158a:	0c1f      	lsrs	r7, r3, #16
 800158c:	46bc      	mov	ip, r7
 800158e:	1876      	adds	r6, r6, r1
 8001590:	4466      	add	r6, ip
 8001592:	42b1      	cmp	r1, r6
 8001594:	d903      	bls.n	800159e <__aeabi_ddiv+0x196>
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	0249      	lsls	r1, r1, #9
 800159a:	468c      	mov	ip, r1
 800159c:	4462      	add	r2, ip
 800159e:	0c31      	lsrs	r1, r6, #16
 80015a0:	188a      	adds	r2, r1, r2
 80015a2:	0431      	lsls	r1, r6, #16
 80015a4:	041e      	lsls	r6, r3, #16
 80015a6:	0c36      	lsrs	r6, r6, #16
 80015a8:	198e      	adds	r6, r1, r6
 80015aa:	4290      	cmp	r0, r2
 80015ac:	d302      	bcc.n	80015b4 <__aeabi_ddiv+0x1ac>
 80015ae:	d112      	bne.n	80015d6 <__aeabi_ddiv+0x1ce>
 80015b0:	42b5      	cmp	r5, r6
 80015b2:	d210      	bcs.n	80015d6 <__aeabi_ddiv+0x1ce>
 80015b4:	4643      	mov	r3, r8
 80015b6:	1e59      	subs	r1, r3, #1
 80015b8:	9b00      	ldr	r3, [sp, #0]
 80015ba:	469c      	mov	ip, r3
 80015bc:	4465      	add	r5, ip
 80015be:	001f      	movs	r7, r3
 80015c0:	429d      	cmp	r5, r3
 80015c2:	419b      	sbcs	r3, r3
 80015c4:	425b      	negs	r3, r3
 80015c6:	191b      	adds	r3, r3, r4
 80015c8:	18c0      	adds	r0, r0, r3
 80015ca:	4284      	cmp	r4, r0
 80015cc:	d200      	bcs.n	80015d0 <__aeabi_ddiv+0x1c8>
 80015ce:	e1a0      	b.n	8001912 <__aeabi_ddiv+0x50a>
 80015d0:	d100      	bne.n	80015d4 <__aeabi_ddiv+0x1cc>
 80015d2:	e19b      	b.n	800190c <__aeabi_ddiv+0x504>
 80015d4:	4688      	mov	r8, r1
 80015d6:	1bae      	subs	r6, r5, r6
 80015d8:	42b5      	cmp	r5, r6
 80015da:	41ad      	sbcs	r5, r5
 80015dc:	1a80      	subs	r0, r0, r2
 80015de:	426d      	negs	r5, r5
 80015e0:	1b40      	subs	r0, r0, r5
 80015e2:	4284      	cmp	r4, r0
 80015e4:	d100      	bne.n	80015e8 <__aeabi_ddiv+0x1e0>
 80015e6:	e1d5      	b.n	8001994 <__aeabi_ddiv+0x58c>
 80015e8:	4649      	mov	r1, r9
 80015ea:	f7fe fe2f 	bl	800024c <__aeabi_uidivmod>
 80015ee:	9a01      	ldr	r2, [sp, #4]
 80015f0:	040b      	lsls	r3, r1, #16
 80015f2:	4342      	muls	r2, r0
 80015f4:	0c31      	lsrs	r1, r6, #16
 80015f6:	0005      	movs	r5, r0
 80015f8:	4319      	orrs	r1, r3
 80015fa:	428a      	cmp	r2, r1
 80015fc:	d900      	bls.n	8001600 <__aeabi_ddiv+0x1f8>
 80015fe:	e16c      	b.n	80018da <__aeabi_ddiv+0x4d2>
 8001600:	1a88      	subs	r0, r1, r2
 8001602:	4649      	mov	r1, r9
 8001604:	f7fe fe22 	bl	800024c <__aeabi_uidivmod>
 8001608:	9a01      	ldr	r2, [sp, #4]
 800160a:	0436      	lsls	r6, r6, #16
 800160c:	4342      	muls	r2, r0
 800160e:	0409      	lsls	r1, r1, #16
 8001610:	0c36      	lsrs	r6, r6, #16
 8001612:	0003      	movs	r3, r0
 8001614:	430e      	orrs	r6, r1
 8001616:	42b2      	cmp	r2, r6
 8001618:	d900      	bls.n	800161c <__aeabi_ddiv+0x214>
 800161a:	e153      	b.n	80018c4 <__aeabi_ddiv+0x4bc>
 800161c:	9803      	ldr	r0, [sp, #12]
 800161e:	1ab6      	subs	r6, r6, r2
 8001620:	0002      	movs	r2, r0
 8001622:	042d      	lsls	r5, r5, #16
 8001624:	431d      	orrs	r5, r3
 8001626:	9f02      	ldr	r7, [sp, #8]
 8001628:	042b      	lsls	r3, r5, #16
 800162a:	0c1b      	lsrs	r3, r3, #16
 800162c:	435a      	muls	r2, r3
 800162e:	437b      	muls	r3, r7
 8001630:	469c      	mov	ip, r3
 8001632:	0c29      	lsrs	r1, r5, #16
 8001634:	4348      	muls	r0, r1
 8001636:	0c13      	lsrs	r3, r2, #16
 8001638:	4484      	add	ip, r0
 800163a:	4463      	add	r3, ip
 800163c:	4379      	muls	r1, r7
 800163e:	4298      	cmp	r0, r3
 8001640:	d903      	bls.n	800164a <__aeabi_ddiv+0x242>
 8001642:	2080      	movs	r0, #128	; 0x80
 8001644:	0240      	lsls	r0, r0, #9
 8001646:	4684      	mov	ip, r0
 8001648:	4461      	add	r1, ip
 800164a:	0c18      	lsrs	r0, r3, #16
 800164c:	0412      	lsls	r2, r2, #16
 800164e:	041b      	lsls	r3, r3, #16
 8001650:	0c12      	lsrs	r2, r2, #16
 8001652:	1841      	adds	r1, r0, r1
 8001654:	189b      	adds	r3, r3, r2
 8001656:	428e      	cmp	r6, r1
 8001658:	d200      	bcs.n	800165c <__aeabi_ddiv+0x254>
 800165a:	e0ff      	b.n	800185c <__aeabi_ddiv+0x454>
 800165c:	d100      	bne.n	8001660 <__aeabi_ddiv+0x258>
 800165e:	e0fa      	b.n	8001856 <__aeabi_ddiv+0x44e>
 8001660:	2301      	movs	r3, #1
 8001662:	431d      	orrs	r5, r3
 8001664:	4a49      	ldr	r2, [pc, #292]	; (800178c <__aeabi_ddiv+0x384>)
 8001666:	445a      	add	r2, fp
 8001668:	2a00      	cmp	r2, #0
 800166a:	dc00      	bgt.n	800166e <__aeabi_ddiv+0x266>
 800166c:	e0aa      	b.n	80017c4 <__aeabi_ddiv+0x3bc>
 800166e:	076b      	lsls	r3, r5, #29
 8001670:	d000      	beq.n	8001674 <__aeabi_ddiv+0x26c>
 8001672:	e13d      	b.n	80018f0 <__aeabi_ddiv+0x4e8>
 8001674:	08ed      	lsrs	r5, r5, #3
 8001676:	4643      	mov	r3, r8
 8001678:	01db      	lsls	r3, r3, #7
 800167a:	d506      	bpl.n	800168a <__aeabi_ddiv+0x282>
 800167c:	4642      	mov	r2, r8
 800167e:	4b44      	ldr	r3, [pc, #272]	; (8001790 <__aeabi_ddiv+0x388>)
 8001680:	401a      	ands	r2, r3
 8001682:	4690      	mov	r8, r2
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	00d2      	lsls	r2, r2, #3
 8001688:	445a      	add	r2, fp
 800168a:	4b42      	ldr	r3, [pc, #264]	; (8001794 <__aeabi_ddiv+0x38c>)
 800168c:	429a      	cmp	r2, r3
 800168e:	dd00      	ble.n	8001692 <__aeabi_ddiv+0x28a>
 8001690:	e71f      	b.n	80014d2 <__aeabi_ddiv+0xca>
 8001692:	4643      	mov	r3, r8
 8001694:	075b      	lsls	r3, r3, #29
 8001696:	431d      	orrs	r5, r3
 8001698:	4643      	mov	r3, r8
 800169a:	0552      	lsls	r2, r2, #21
 800169c:	025c      	lsls	r4, r3, #9
 800169e:	0b24      	lsrs	r4, r4, #12
 80016a0:	0d53      	lsrs	r3, r2, #21
 80016a2:	e708      	b.n	80014b6 <__aeabi_ddiv+0xae>
 80016a4:	4652      	mov	r2, sl
 80016a6:	4322      	orrs	r2, r4
 80016a8:	d100      	bne.n	80016ac <__aeabi_ddiv+0x2a4>
 80016aa:	e07b      	b.n	80017a4 <__aeabi_ddiv+0x39c>
 80016ac:	2c00      	cmp	r4, #0
 80016ae:	d100      	bne.n	80016b2 <__aeabi_ddiv+0x2aa>
 80016b0:	e0fa      	b.n	80018a8 <__aeabi_ddiv+0x4a0>
 80016b2:	0020      	movs	r0, r4
 80016b4:	f001 fa22 	bl	8002afc <__clzsi2>
 80016b8:	0002      	movs	r2, r0
 80016ba:	3a0b      	subs	r2, #11
 80016bc:	231d      	movs	r3, #29
 80016be:	0001      	movs	r1, r0
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	4652      	mov	r2, sl
 80016c4:	3908      	subs	r1, #8
 80016c6:	40da      	lsrs	r2, r3
 80016c8:	408c      	lsls	r4, r1
 80016ca:	4314      	orrs	r4, r2
 80016cc:	4652      	mov	r2, sl
 80016ce:	408a      	lsls	r2, r1
 80016d0:	4b31      	ldr	r3, [pc, #196]	; (8001798 <__aeabi_ddiv+0x390>)
 80016d2:	4458      	add	r0, fp
 80016d4:	469b      	mov	fp, r3
 80016d6:	4483      	add	fp, r0
 80016d8:	2000      	movs	r0, #0
 80016da:	e6d5      	b.n	8001488 <__aeabi_ddiv+0x80>
 80016dc:	464b      	mov	r3, r9
 80016de:	4323      	orrs	r3, r4
 80016e0:	4698      	mov	r8, r3
 80016e2:	d044      	beq.n	800176e <__aeabi_ddiv+0x366>
 80016e4:	2c00      	cmp	r4, #0
 80016e6:	d100      	bne.n	80016ea <__aeabi_ddiv+0x2e2>
 80016e8:	e0ce      	b.n	8001888 <__aeabi_ddiv+0x480>
 80016ea:	0020      	movs	r0, r4
 80016ec:	f001 fa06 	bl	8002afc <__clzsi2>
 80016f0:	0001      	movs	r1, r0
 80016f2:	0002      	movs	r2, r0
 80016f4:	390b      	subs	r1, #11
 80016f6:	231d      	movs	r3, #29
 80016f8:	1a5b      	subs	r3, r3, r1
 80016fa:	4649      	mov	r1, r9
 80016fc:	0010      	movs	r0, r2
 80016fe:	40d9      	lsrs	r1, r3
 8001700:	3808      	subs	r0, #8
 8001702:	4084      	lsls	r4, r0
 8001704:	000b      	movs	r3, r1
 8001706:	464d      	mov	r5, r9
 8001708:	4323      	orrs	r3, r4
 800170a:	4698      	mov	r8, r3
 800170c:	4085      	lsls	r5, r0
 800170e:	4823      	ldr	r0, [pc, #140]	; (800179c <__aeabi_ddiv+0x394>)
 8001710:	1a83      	subs	r3, r0, r2
 8001712:	469b      	mov	fp, r3
 8001714:	2300      	movs	r3, #0
 8001716:	4699      	mov	r9, r3
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	e69a      	b.n	8001452 <__aeabi_ddiv+0x4a>
 800171c:	464b      	mov	r3, r9
 800171e:	4323      	orrs	r3, r4
 8001720:	4698      	mov	r8, r3
 8001722:	d11d      	bne.n	8001760 <__aeabi_ddiv+0x358>
 8001724:	2308      	movs	r3, #8
 8001726:	4699      	mov	r9, r3
 8001728:	3b06      	subs	r3, #6
 800172a:	2500      	movs	r5, #0
 800172c:	4683      	mov	fp, r0
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	e68f      	b.n	8001452 <__aeabi_ddiv+0x4a>
 8001732:	4652      	mov	r2, sl
 8001734:	4322      	orrs	r2, r4
 8001736:	d109      	bne.n	800174c <__aeabi_ddiv+0x344>
 8001738:	2302      	movs	r3, #2
 800173a:	4649      	mov	r1, r9
 800173c:	4319      	orrs	r1, r3
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <__aeabi_ddiv+0x398>)
 8001740:	4689      	mov	r9, r1
 8001742:	469c      	mov	ip, r3
 8001744:	2400      	movs	r4, #0
 8001746:	2002      	movs	r0, #2
 8001748:	44e3      	add	fp, ip
 800174a:	e69d      	b.n	8001488 <__aeabi_ddiv+0x80>
 800174c:	2303      	movs	r3, #3
 800174e:	464a      	mov	r2, r9
 8001750:	431a      	orrs	r2, r3
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <__aeabi_ddiv+0x398>)
 8001754:	4691      	mov	r9, r2
 8001756:	469c      	mov	ip, r3
 8001758:	4652      	mov	r2, sl
 800175a:	2003      	movs	r0, #3
 800175c:	44e3      	add	fp, ip
 800175e:	e693      	b.n	8001488 <__aeabi_ddiv+0x80>
 8001760:	230c      	movs	r3, #12
 8001762:	4699      	mov	r9, r3
 8001764:	3b09      	subs	r3, #9
 8001766:	46a0      	mov	r8, r4
 8001768:	4683      	mov	fp, r0
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	e671      	b.n	8001452 <__aeabi_ddiv+0x4a>
 800176e:	2304      	movs	r3, #4
 8001770:	4699      	mov	r9, r3
 8001772:	2300      	movs	r3, #0
 8001774:	469b      	mov	fp, r3
 8001776:	3301      	adds	r3, #1
 8001778:	2500      	movs	r5, #0
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	e669      	b.n	8001452 <__aeabi_ddiv+0x4a>
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	000007ff 	.word	0x000007ff
 8001784:	fffffc01 	.word	0xfffffc01
 8001788:	0800b050 	.word	0x0800b050
 800178c:	000003ff 	.word	0x000003ff
 8001790:	feffffff 	.word	0xfeffffff
 8001794:	000007fe 	.word	0x000007fe
 8001798:	000003f3 	.word	0x000003f3
 800179c:	fffffc0d 	.word	0xfffffc0d
 80017a0:	fffff801 	.word	0xfffff801
 80017a4:	4649      	mov	r1, r9
 80017a6:	2301      	movs	r3, #1
 80017a8:	4319      	orrs	r1, r3
 80017aa:	4689      	mov	r9, r1
 80017ac:	2400      	movs	r4, #0
 80017ae:	2001      	movs	r0, #1
 80017b0:	e66a      	b.n	8001488 <__aeabi_ddiv+0x80>
 80017b2:	2300      	movs	r3, #0
 80017b4:	2480      	movs	r4, #128	; 0x80
 80017b6:	469a      	mov	sl, r3
 80017b8:	2500      	movs	r5, #0
 80017ba:	4b8a      	ldr	r3, [pc, #552]	; (80019e4 <__aeabi_ddiv+0x5dc>)
 80017bc:	0324      	lsls	r4, r4, #12
 80017be:	e67a      	b.n	80014b6 <__aeabi_ddiv+0xae>
 80017c0:	2501      	movs	r5, #1
 80017c2:	426d      	negs	r5, r5
 80017c4:	2301      	movs	r3, #1
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	2b38      	cmp	r3, #56	; 0x38
 80017ca:	dd00      	ble.n	80017ce <__aeabi_ddiv+0x3c6>
 80017cc:	e670      	b.n	80014b0 <__aeabi_ddiv+0xa8>
 80017ce:	2b1f      	cmp	r3, #31
 80017d0:	dc00      	bgt.n	80017d4 <__aeabi_ddiv+0x3cc>
 80017d2:	e0bf      	b.n	8001954 <__aeabi_ddiv+0x54c>
 80017d4:	211f      	movs	r1, #31
 80017d6:	4249      	negs	r1, r1
 80017d8:	1a8a      	subs	r2, r1, r2
 80017da:	4641      	mov	r1, r8
 80017dc:	40d1      	lsrs	r1, r2
 80017de:	000a      	movs	r2, r1
 80017e0:	2b20      	cmp	r3, #32
 80017e2:	d004      	beq.n	80017ee <__aeabi_ddiv+0x3e6>
 80017e4:	4641      	mov	r1, r8
 80017e6:	4b80      	ldr	r3, [pc, #512]	; (80019e8 <__aeabi_ddiv+0x5e0>)
 80017e8:	445b      	add	r3, fp
 80017ea:	4099      	lsls	r1, r3
 80017ec:	430d      	orrs	r5, r1
 80017ee:	1e6b      	subs	r3, r5, #1
 80017f0:	419d      	sbcs	r5, r3
 80017f2:	2307      	movs	r3, #7
 80017f4:	432a      	orrs	r2, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	2400      	movs	r4, #0
 80017fa:	4015      	ands	r5, r2
 80017fc:	4213      	tst	r3, r2
 80017fe:	d100      	bne.n	8001802 <__aeabi_ddiv+0x3fa>
 8001800:	e0d4      	b.n	80019ac <__aeabi_ddiv+0x5a4>
 8001802:	210f      	movs	r1, #15
 8001804:	2300      	movs	r3, #0
 8001806:	4011      	ands	r1, r2
 8001808:	2904      	cmp	r1, #4
 800180a:	d100      	bne.n	800180e <__aeabi_ddiv+0x406>
 800180c:	e0cb      	b.n	80019a6 <__aeabi_ddiv+0x59e>
 800180e:	1d11      	adds	r1, r2, #4
 8001810:	4291      	cmp	r1, r2
 8001812:	4192      	sbcs	r2, r2
 8001814:	4252      	negs	r2, r2
 8001816:	189b      	adds	r3, r3, r2
 8001818:	000a      	movs	r2, r1
 800181a:	0219      	lsls	r1, r3, #8
 800181c:	d400      	bmi.n	8001820 <__aeabi_ddiv+0x418>
 800181e:	e0c2      	b.n	80019a6 <__aeabi_ddiv+0x59e>
 8001820:	2301      	movs	r3, #1
 8001822:	2400      	movs	r4, #0
 8001824:	2500      	movs	r5, #0
 8001826:	e646      	b.n	80014b6 <__aeabi_ddiv+0xae>
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	4641      	mov	r1, r8
 800182c:	031b      	lsls	r3, r3, #12
 800182e:	4219      	tst	r1, r3
 8001830:	d008      	beq.n	8001844 <__aeabi_ddiv+0x43c>
 8001832:	421c      	tst	r4, r3
 8001834:	d106      	bne.n	8001844 <__aeabi_ddiv+0x43c>
 8001836:	431c      	orrs	r4, r3
 8001838:	0324      	lsls	r4, r4, #12
 800183a:	46ba      	mov	sl, r7
 800183c:	0015      	movs	r5, r2
 800183e:	4b69      	ldr	r3, [pc, #420]	; (80019e4 <__aeabi_ddiv+0x5dc>)
 8001840:	0b24      	lsrs	r4, r4, #12
 8001842:	e638      	b.n	80014b6 <__aeabi_ddiv+0xae>
 8001844:	2480      	movs	r4, #128	; 0x80
 8001846:	4643      	mov	r3, r8
 8001848:	0324      	lsls	r4, r4, #12
 800184a:	431c      	orrs	r4, r3
 800184c:	0324      	lsls	r4, r4, #12
 800184e:	46b2      	mov	sl, r6
 8001850:	4b64      	ldr	r3, [pc, #400]	; (80019e4 <__aeabi_ddiv+0x5dc>)
 8001852:	0b24      	lsrs	r4, r4, #12
 8001854:	e62f      	b.n	80014b6 <__aeabi_ddiv+0xae>
 8001856:	2b00      	cmp	r3, #0
 8001858:	d100      	bne.n	800185c <__aeabi_ddiv+0x454>
 800185a:	e703      	b.n	8001664 <__aeabi_ddiv+0x25c>
 800185c:	19a6      	adds	r6, r4, r6
 800185e:	1e68      	subs	r0, r5, #1
 8001860:	42a6      	cmp	r6, r4
 8001862:	d200      	bcs.n	8001866 <__aeabi_ddiv+0x45e>
 8001864:	e08d      	b.n	8001982 <__aeabi_ddiv+0x57a>
 8001866:	428e      	cmp	r6, r1
 8001868:	d200      	bcs.n	800186c <__aeabi_ddiv+0x464>
 800186a:	e0a3      	b.n	80019b4 <__aeabi_ddiv+0x5ac>
 800186c:	d100      	bne.n	8001870 <__aeabi_ddiv+0x468>
 800186e:	e0b3      	b.n	80019d8 <__aeabi_ddiv+0x5d0>
 8001870:	0005      	movs	r5, r0
 8001872:	e6f5      	b.n	8001660 <__aeabi_ddiv+0x258>
 8001874:	42aa      	cmp	r2, r5
 8001876:	d900      	bls.n	800187a <__aeabi_ddiv+0x472>
 8001878:	e639      	b.n	80014ee <__aeabi_ddiv+0xe6>
 800187a:	4643      	mov	r3, r8
 800187c:	07de      	lsls	r6, r3, #31
 800187e:	0858      	lsrs	r0, r3, #1
 8001880:	086b      	lsrs	r3, r5, #1
 8001882:	431e      	orrs	r6, r3
 8001884:	07ed      	lsls	r5, r5, #31
 8001886:	e639      	b.n	80014fc <__aeabi_ddiv+0xf4>
 8001888:	4648      	mov	r0, r9
 800188a:	f001 f937 	bl	8002afc <__clzsi2>
 800188e:	0001      	movs	r1, r0
 8001890:	0002      	movs	r2, r0
 8001892:	3115      	adds	r1, #21
 8001894:	3220      	adds	r2, #32
 8001896:	291c      	cmp	r1, #28
 8001898:	dc00      	bgt.n	800189c <__aeabi_ddiv+0x494>
 800189a:	e72c      	b.n	80016f6 <__aeabi_ddiv+0x2ee>
 800189c:	464b      	mov	r3, r9
 800189e:	3808      	subs	r0, #8
 80018a0:	4083      	lsls	r3, r0
 80018a2:	2500      	movs	r5, #0
 80018a4:	4698      	mov	r8, r3
 80018a6:	e732      	b.n	800170e <__aeabi_ddiv+0x306>
 80018a8:	f001 f928 	bl	8002afc <__clzsi2>
 80018ac:	0003      	movs	r3, r0
 80018ae:	001a      	movs	r2, r3
 80018b0:	3215      	adds	r2, #21
 80018b2:	3020      	adds	r0, #32
 80018b4:	2a1c      	cmp	r2, #28
 80018b6:	dc00      	bgt.n	80018ba <__aeabi_ddiv+0x4b2>
 80018b8:	e700      	b.n	80016bc <__aeabi_ddiv+0x2b4>
 80018ba:	4654      	mov	r4, sl
 80018bc:	3b08      	subs	r3, #8
 80018be:	2200      	movs	r2, #0
 80018c0:	409c      	lsls	r4, r3
 80018c2:	e705      	b.n	80016d0 <__aeabi_ddiv+0x2c8>
 80018c4:	1936      	adds	r6, r6, r4
 80018c6:	3b01      	subs	r3, #1
 80018c8:	42b4      	cmp	r4, r6
 80018ca:	d900      	bls.n	80018ce <__aeabi_ddiv+0x4c6>
 80018cc:	e6a6      	b.n	800161c <__aeabi_ddiv+0x214>
 80018ce:	42b2      	cmp	r2, r6
 80018d0:	d800      	bhi.n	80018d4 <__aeabi_ddiv+0x4cc>
 80018d2:	e6a3      	b.n	800161c <__aeabi_ddiv+0x214>
 80018d4:	1e83      	subs	r3, r0, #2
 80018d6:	1936      	adds	r6, r6, r4
 80018d8:	e6a0      	b.n	800161c <__aeabi_ddiv+0x214>
 80018da:	1909      	adds	r1, r1, r4
 80018dc:	3d01      	subs	r5, #1
 80018de:	428c      	cmp	r4, r1
 80018e0:	d900      	bls.n	80018e4 <__aeabi_ddiv+0x4dc>
 80018e2:	e68d      	b.n	8001600 <__aeabi_ddiv+0x1f8>
 80018e4:	428a      	cmp	r2, r1
 80018e6:	d800      	bhi.n	80018ea <__aeabi_ddiv+0x4e2>
 80018e8:	e68a      	b.n	8001600 <__aeabi_ddiv+0x1f8>
 80018ea:	1e85      	subs	r5, r0, #2
 80018ec:	1909      	adds	r1, r1, r4
 80018ee:	e687      	b.n	8001600 <__aeabi_ddiv+0x1f8>
 80018f0:	230f      	movs	r3, #15
 80018f2:	402b      	ands	r3, r5
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d100      	bne.n	80018fa <__aeabi_ddiv+0x4f2>
 80018f8:	e6bc      	b.n	8001674 <__aeabi_ddiv+0x26c>
 80018fa:	2305      	movs	r3, #5
 80018fc:	425b      	negs	r3, r3
 80018fe:	42ab      	cmp	r3, r5
 8001900:	419b      	sbcs	r3, r3
 8001902:	3504      	adds	r5, #4
 8001904:	425b      	negs	r3, r3
 8001906:	08ed      	lsrs	r5, r5, #3
 8001908:	4498      	add	r8, r3
 800190a:	e6b4      	b.n	8001676 <__aeabi_ddiv+0x26e>
 800190c:	42af      	cmp	r7, r5
 800190e:	d900      	bls.n	8001912 <__aeabi_ddiv+0x50a>
 8001910:	e660      	b.n	80015d4 <__aeabi_ddiv+0x1cc>
 8001912:	4282      	cmp	r2, r0
 8001914:	d804      	bhi.n	8001920 <__aeabi_ddiv+0x518>
 8001916:	d000      	beq.n	800191a <__aeabi_ddiv+0x512>
 8001918:	e65c      	b.n	80015d4 <__aeabi_ddiv+0x1cc>
 800191a:	42ae      	cmp	r6, r5
 800191c:	d800      	bhi.n	8001920 <__aeabi_ddiv+0x518>
 800191e:	e659      	b.n	80015d4 <__aeabi_ddiv+0x1cc>
 8001920:	2302      	movs	r3, #2
 8001922:	425b      	negs	r3, r3
 8001924:	469c      	mov	ip, r3
 8001926:	9b00      	ldr	r3, [sp, #0]
 8001928:	44e0      	add	r8, ip
 800192a:	469c      	mov	ip, r3
 800192c:	4465      	add	r5, ip
 800192e:	429d      	cmp	r5, r3
 8001930:	419b      	sbcs	r3, r3
 8001932:	425b      	negs	r3, r3
 8001934:	191b      	adds	r3, r3, r4
 8001936:	18c0      	adds	r0, r0, r3
 8001938:	e64d      	b.n	80015d6 <__aeabi_ddiv+0x1ce>
 800193a:	428a      	cmp	r2, r1
 800193c:	d800      	bhi.n	8001940 <__aeabi_ddiv+0x538>
 800193e:	e60e      	b.n	800155e <__aeabi_ddiv+0x156>
 8001940:	1e83      	subs	r3, r0, #2
 8001942:	1909      	adds	r1, r1, r4
 8001944:	e60b      	b.n	800155e <__aeabi_ddiv+0x156>
 8001946:	428a      	cmp	r2, r1
 8001948:	d800      	bhi.n	800194c <__aeabi_ddiv+0x544>
 800194a:	e5f4      	b.n	8001536 <__aeabi_ddiv+0x12e>
 800194c:	1e83      	subs	r3, r0, #2
 800194e:	4698      	mov	r8, r3
 8001950:	1909      	adds	r1, r1, r4
 8001952:	e5f0      	b.n	8001536 <__aeabi_ddiv+0x12e>
 8001954:	4925      	ldr	r1, [pc, #148]	; (80019ec <__aeabi_ddiv+0x5e4>)
 8001956:	0028      	movs	r0, r5
 8001958:	4459      	add	r1, fp
 800195a:	408d      	lsls	r5, r1
 800195c:	4642      	mov	r2, r8
 800195e:	408a      	lsls	r2, r1
 8001960:	1e69      	subs	r1, r5, #1
 8001962:	418d      	sbcs	r5, r1
 8001964:	4641      	mov	r1, r8
 8001966:	40d8      	lsrs	r0, r3
 8001968:	40d9      	lsrs	r1, r3
 800196a:	4302      	orrs	r2, r0
 800196c:	432a      	orrs	r2, r5
 800196e:	000b      	movs	r3, r1
 8001970:	0751      	lsls	r1, r2, #29
 8001972:	d100      	bne.n	8001976 <__aeabi_ddiv+0x56e>
 8001974:	e751      	b.n	800181a <__aeabi_ddiv+0x412>
 8001976:	210f      	movs	r1, #15
 8001978:	4011      	ands	r1, r2
 800197a:	2904      	cmp	r1, #4
 800197c:	d000      	beq.n	8001980 <__aeabi_ddiv+0x578>
 800197e:	e746      	b.n	800180e <__aeabi_ddiv+0x406>
 8001980:	e74b      	b.n	800181a <__aeabi_ddiv+0x412>
 8001982:	0005      	movs	r5, r0
 8001984:	428e      	cmp	r6, r1
 8001986:	d000      	beq.n	800198a <__aeabi_ddiv+0x582>
 8001988:	e66a      	b.n	8001660 <__aeabi_ddiv+0x258>
 800198a:	9a00      	ldr	r2, [sp, #0]
 800198c:	4293      	cmp	r3, r2
 800198e:	d000      	beq.n	8001992 <__aeabi_ddiv+0x58a>
 8001990:	e666      	b.n	8001660 <__aeabi_ddiv+0x258>
 8001992:	e667      	b.n	8001664 <__aeabi_ddiv+0x25c>
 8001994:	4a16      	ldr	r2, [pc, #88]	; (80019f0 <__aeabi_ddiv+0x5e8>)
 8001996:	445a      	add	r2, fp
 8001998:	2a00      	cmp	r2, #0
 800199a:	dc00      	bgt.n	800199e <__aeabi_ddiv+0x596>
 800199c:	e710      	b.n	80017c0 <__aeabi_ddiv+0x3b8>
 800199e:	2301      	movs	r3, #1
 80019a0:	2500      	movs	r5, #0
 80019a2:	4498      	add	r8, r3
 80019a4:	e667      	b.n	8001676 <__aeabi_ddiv+0x26e>
 80019a6:	075d      	lsls	r5, r3, #29
 80019a8:	025b      	lsls	r3, r3, #9
 80019aa:	0b1c      	lsrs	r4, r3, #12
 80019ac:	08d2      	lsrs	r2, r2, #3
 80019ae:	2300      	movs	r3, #0
 80019b0:	4315      	orrs	r5, r2
 80019b2:	e580      	b.n	80014b6 <__aeabi_ddiv+0xae>
 80019b4:	9800      	ldr	r0, [sp, #0]
 80019b6:	3d02      	subs	r5, #2
 80019b8:	0042      	lsls	r2, r0, #1
 80019ba:	4282      	cmp	r2, r0
 80019bc:	41bf      	sbcs	r7, r7
 80019be:	427f      	negs	r7, r7
 80019c0:	193c      	adds	r4, r7, r4
 80019c2:	1936      	adds	r6, r6, r4
 80019c4:	9200      	str	r2, [sp, #0]
 80019c6:	e7dd      	b.n	8001984 <__aeabi_ddiv+0x57c>
 80019c8:	2480      	movs	r4, #128	; 0x80
 80019ca:	4643      	mov	r3, r8
 80019cc:	0324      	lsls	r4, r4, #12
 80019ce:	431c      	orrs	r4, r3
 80019d0:	0324      	lsls	r4, r4, #12
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <__aeabi_ddiv+0x5dc>)
 80019d4:	0b24      	lsrs	r4, r4, #12
 80019d6:	e56e      	b.n	80014b6 <__aeabi_ddiv+0xae>
 80019d8:	9a00      	ldr	r2, [sp, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d3ea      	bcc.n	80019b4 <__aeabi_ddiv+0x5ac>
 80019de:	0005      	movs	r5, r0
 80019e0:	e7d3      	b.n	800198a <__aeabi_ddiv+0x582>
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	000007ff 	.word	0x000007ff
 80019e8:	0000043e 	.word	0x0000043e
 80019ec:	0000041e 	.word	0x0000041e
 80019f0:	000003ff 	.word	0x000003ff

080019f4 <__eqdf2>:
 80019f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f6:	464e      	mov	r6, r9
 80019f8:	4645      	mov	r5, r8
 80019fa:	46de      	mov	lr, fp
 80019fc:	4657      	mov	r7, sl
 80019fe:	4690      	mov	r8, r2
 8001a00:	b5e0      	push	{r5, r6, r7, lr}
 8001a02:	0017      	movs	r7, r2
 8001a04:	031a      	lsls	r2, r3, #12
 8001a06:	0b12      	lsrs	r2, r2, #12
 8001a08:	0005      	movs	r5, r0
 8001a0a:	4684      	mov	ip, r0
 8001a0c:	4819      	ldr	r0, [pc, #100]	; (8001a74 <__eqdf2+0x80>)
 8001a0e:	030e      	lsls	r6, r1, #12
 8001a10:	004c      	lsls	r4, r1, #1
 8001a12:	4691      	mov	r9, r2
 8001a14:	005a      	lsls	r2, r3, #1
 8001a16:	0fdb      	lsrs	r3, r3, #31
 8001a18:	469b      	mov	fp, r3
 8001a1a:	0b36      	lsrs	r6, r6, #12
 8001a1c:	0d64      	lsrs	r4, r4, #21
 8001a1e:	0fc9      	lsrs	r1, r1, #31
 8001a20:	0d52      	lsrs	r2, r2, #21
 8001a22:	4284      	cmp	r4, r0
 8001a24:	d019      	beq.n	8001a5a <__eqdf2+0x66>
 8001a26:	4282      	cmp	r2, r0
 8001a28:	d010      	beq.n	8001a4c <__eqdf2+0x58>
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	4294      	cmp	r4, r2
 8001a2e:	d10e      	bne.n	8001a4e <__eqdf2+0x5a>
 8001a30:	454e      	cmp	r6, r9
 8001a32:	d10c      	bne.n	8001a4e <__eqdf2+0x5a>
 8001a34:	2001      	movs	r0, #1
 8001a36:	45c4      	cmp	ip, r8
 8001a38:	d109      	bne.n	8001a4e <__eqdf2+0x5a>
 8001a3a:	4559      	cmp	r1, fp
 8001a3c:	d017      	beq.n	8001a6e <__eqdf2+0x7a>
 8001a3e:	2c00      	cmp	r4, #0
 8001a40:	d105      	bne.n	8001a4e <__eqdf2+0x5a>
 8001a42:	0030      	movs	r0, r6
 8001a44:	4328      	orrs	r0, r5
 8001a46:	1e43      	subs	r3, r0, #1
 8001a48:	4198      	sbcs	r0, r3
 8001a4a:	e000      	b.n	8001a4e <__eqdf2+0x5a>
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a50:	46bb      	mov	fp, r7
 8001a52:	46b2      	mov	sl, r6
 8001a54:	46a9      	mov	r9, r5
 8001a56:	46a0      	mov	r8, r4
 8001a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5a:	0033      	movs	r3, r6
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	432b      	orrs	r3, r5
 8001a60:	d1f5      	bne.n	8001a4e <__eqdf2+0x5a>
 8001a62:	42a2      	cmp	r2, r4
 8001a64:	d1f3      	bne.n	8001a4e <__eqdf2+0x5a>
 8001a66:	464b      	mov	r3, r9
 8001a68:	433b      	orrs	r3, r7
 8001a6a:	d1f0      	bne.n	8001a4e <__eqdf2+0x5a>
 8001a6c:	e7e2      	b.n	8001a34 <__eqdf2+0x40>
 8001a6e:	2000      	movs	r0, #0
 8001a70:	e7ed      	b.n	8001a4e <__eqdf2+0x5a>
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff

08001a78 <__gedf2>:
 8001a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7a:	4647      	mov	r7, r8
 8001a7c:	46ce      	mov	lr, r9
 8001a7e:	0004      	movs	r4, r0
 8001a80:	0018      	movs	r0, r3
 8001a82:	0016      	movs	r6, r2
 8001a84:	031b      	lsls	r3, r3, #12
 8001a86:	0b1b      	lsrs	r3, r3, #12
 8001a88:	4d2d      	ldr	r5, [pc, #180]	; (8001b40 <__gedf2+0xc8>)
 8001a8a:	004a      	lsls	r2, r1, #1
 8001a8c:	4699      	mov	r9, r3
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	0043      	lsls	r3, r0, #1
 8001a92:	030f      	lsls	r7, r1, #12
 8001a94:	46a4      	mov	ip, r4
 8001a96:	46b0      	mov	r8, r6
 8001a98:	0b3f      	lsrs	r7, r7, #12
 8001a9a:	0d52      	lsrs	r2, r2, #21
 8001a9c:	0fc9      	lsrs	r1, r1, #31
 8001a9e:	0d5b      	lsrs	r3, r3, #21
 8001aa0:	0fc0      	lsrs	r0, r0, #31
 8001aa2:	42aa      	cmp	r2, r5
 8001aa4:	d021      	beq.n	8001aea <__gedf2+0x72>
 8001aa6:	42ab      	cmp	r3, r5
 8001aa8:	d013      	beq.n	8001ad2 <__gedf2+0x5a>
 8001aaa:	2a00      	cmp	r2, #0
 8001aac:	d122      	bne.n	8001af4 <__gedf2+0x7c>
 8001aae:	433c      	orrs	r4, r7
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <__gedf2+0x42>
 8001ab4:	464d      	mov	r5, r9
 8001ab6:	432e      	orrs	r6, r5
 8001ab8:	d022      	beq.n	8001b00 <__gedf2+0x88>
 8001aba:	2c00      	cmp	r4, #0
 8001abc:	d010      	beq.n	8001ae0 <__gedf2+0x68>
 8001abe:	4281      	cmp	r1, r0
 8001ac0:	d022      	beq.n	8001b08 <__gedf2+0x90>
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	3901      	subs	r1, #1
 8001ac6:	4008      	ands	r0, r1
 8001ac8:	3801      	subs	r0, #1
 8001aca:	bcc0      	pop	{r6, r7}
 8001acc:	46b9      	mov	r9, r7
 8001ace:	46b0      	mov	r8, r6
 8001ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad2:	464d      	mov	r5, r9
 8001ad4:	432e      	orrs	r6, r5
 8001ad6:	d129      	bne.n	8001b2c <__gedf2+0xb4>
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d1f0      	bne.n	8001abe <__gedf2+0x46>
 8001adc:	433c      	orrs	r4, r7
 8001ade:	d1ee      	bne.n	8001abe <__gedf2+0x46>
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	d1f2      	bne.n	8001aca <__gedf2+0x52>
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	4240      	negs	r0, r0
 8001ae8:	e7ef      	b.n	8001aca <__gedf2+0x52>
 8001aea:	003d      	movs	r5, r7
 8001aec:	4325      	orrs	r5, r4
 8001aee:	d11d      	bne.n	8001b2c <__gedf2+0xb4>
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d0ee      	beq.n	8001ad2 <__gedf2+0x5a>
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1e2      	bne.n	8001abe <__gedf2+0x46>
 8001af8:	464c      	mov	r4, r9
 8001afa:	4326      	orrs	r6, r4
 8001afc:	d1df      	bne.n	8001abe <__gedf2+0x46>
 8001afe:	e7e0      	b.n	8001ac2 <__gedf2+0x4a>
 8001b00:	2000      	movs	r0, #0
 8001b02:	2c00      	cmp	r4, #0
 8001b04:	d0e1      	beq.n	8001aca <__gedf2+0x52>
 8001b06:	e7dc      	b.n	8001ac2 <__gedf2+0x4a>
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dc0a      	bgt.n	8001b22 <__gedf2+0xaa>
 8001b0c:	dbe8      	blt.n	8001ae0 <__gedf2+0x68>
 8001b0e:	454f      	cmp	r7, r9
 8001b10:	d8d7      	bhi.n	8001ac2 <__gedf2+0x4a>
 8001b12:	d00e      	beq.n	8001b32 <__gedf2+0xba>
 8001b14:	2000      	movs	r0, #0
 8001b16:	454f      	cmp	r7, r9
 8001b18:	d2d7      	bcs.n	8001aca <__gedf2+0x52>
 8001b1a:	2900      	cmp	r1, #0
 8001b1c:	d0e2      	beq.n	8001ae4 <__gedf2+0x6c>
 8001b1e:	0008      	movs	r0, r1
 8001b20:	e7d3      	b.n	8001aca <__gedf2+0x52>
 8001b22:	4243      	negs	r3, r0
 8001b24:	4158      	adcs	r0, r3
 8001b26:	0040      	lsls	r0, r0, #1
 8001b28:	3801      	subs	r0, #1
 8001b2a:	e7ce      	b.n	8001aca <__gedf2+0x52>
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	4240      	negs	r0, r0
 8001b30:	e7cb      	b.n	8001aca <__gedf2+0x52>
 8001b32:	45c4      	cmp	ip, r8
 8001b34:	d8c5      	bhi.n	8001ac2 <__gedf2+0x4a>
 8001b36:	2000      	movs	r0, #0
 8001b38:	45c4      	cmp	ip, r8
 8001b3a:	d2c6      	bcs.n	8001aca <__gedf2+0x52>
 8001b3c:	e7ed      	b.n	8001b1a <__gedf2+0xa2>
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	000007ff 	.word	0x000007ff

08001b44 <__ledf2>:
 8001b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b46:	4647      	mov	r7, r8
 8001b48:	46ce      	mov	lr, r9
 8001b4a:	0004      	movs	r4, r0
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	0016      	movs	r6, r2
 8001b50:	031b      	lsls	r3, r3, #12
 8001b52:	0b1b      	lsrs	r3, r3, #12
 8001b54:	4d2c      	ldr	r5, [pc, #176]	; (8001c08 <__ledf2+0xc4>)
 8001b56:	004a      	lsls	r2, r1, #1
 8001b58:	4699      	mov	r9, r3
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	0043      	lsls	r3, r0, #1
 8001b5e:	030f      	lsls	r7, r1, #12
 8001b60:	46a4      	mov	ip, r4
 8001b62:	46b0      	mov	r8, r6
 8001b64:	0b3f      	lsrs	r7, r7, #12
 8001b66:	0d52      	lsrs	r2, r2, #21
 8001b68:	0fc9      	lsrs	r1, r1, #31
 8001b6a:	0d5b      	lsrs	r3, r3, #21
 8001b6c:	0fc0      	lsrs	r0, r0, #31
 8001b6e:	42aa      	cmp	r2, r5
 8001b70:	d00d      	beq.n	8001b8e <__ledf2+0x4a>
 8001b72:	42ab      	cmp	r3, r5
 8001b74:	d010      	beq.n	8001b98 <__ledf2+0x54>
 8001b76:	2a00      	cmp	r2, #0
 8001b78:	d127      	bne.n	8001bca <__ledf2+0x86>
 8001b7a:	433c      	orrs	r4, r7
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d111      	bne.n	8001ba4 <__ledf2+0x60>
 8001b80:	464d      	mov	r5, r9
 8001b82:	432e      	orrs	r6, r5
 8001b84:	d10e      	bne.n	8001ba4 <__ledf2+0x60>
 8001b86:	2000      	movs	r0, #0
 8001b88:	2c00      	cmp	r4, #0
 8001b8a:	d015      	beq.n	8001bb8 <__ledf2+0x74>
 8001b8c:	e00e      	b.n	8001bac <__ledf2+0x68>
 8001b8e:	003d      	movs	r5, r7
 8001b90:	4325      	orrs	r5, r4
 8001b92:	d110      	bne.n	8001bb6 <__ledf2+0x72>
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d118      	bne.n	8001bca <__ledf2+0x86>
 8001b98:	464d      	mov	r5, r9
 8001b9a:	432e      	orrs	r6, r5
 8001b9c:	d10b      	bne.n	8001bb6 <__ledf2+0x72>
 8001b9e:	2a00      	cmp	r2, #0
 8001ba0:	d102      	bne.n	8001ba8 <__ledf2+0x64>
 8001ba2:	433c      	orrs	r4, r7
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d00b      	beq.n	8001bc0 <__ledf2+0x7c>
 8001ba8:	4281      	cmp	r1, r0
 8001baa:	d014      	beq.n	8001bd6 <__ledf2+0x92>
 8001bac:	2002      	movs	r0, #2
 8001bae:	3901      	subs	r1, #1
 8001bb0:	4008      	ands	r0, r1
 8001bb2:	3801      	subs	r0, #1
 8001bb4:	e000      	b.n	8001bb8 <__ledf2+0x74>
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	bcc0      	pop	{r6, r7}
 8001bba:	46b9      	mov	r9, r7
 8001bbc:	46b0      	mov	r8, r6
 8001bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc0:	2800      	cmp	r0, #0
 8001bc2:	d1f9      	bne.n	8001bb8 <__ledf2+0x74>
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	4240      	negs	r0, r0
 8001bc8:	e7f6      	b.n	8001bb8 <__ledf2+0x74>
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1ec      	bne.n	8001ba8 <__ledf2+0x64>
 8001bce:	464c      	mov	r4, r9
 8001bd0:	4326      	orrs	r6, r4
 8001bd2:	d1e9      	bne.n	8001ba8 <__ledf2+0x64>
 8001bd4:	e7ea      	b.n	8001bac <__ledf2+0x68>
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	dd04      	ble.n	8001be4 <__ledf2+0xa0>
 8001bda:	4243      	negs	r3, r0
 8001bdc:	4158      	adcs	r0, r3
 8001bde:	0040      	lsls	r0, r0, #1
 8001be0:	3801      	subs	r0, #1
 8001be2:	e7e9      	b.n	8001bb8 <__ledf2+0x74>
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dbeb      	blt.n	8001bc0 <__ledf2+0x7c>
 8001be8:	454f      	cmp	r7, r9
 8001bea:	d8df      	bhi.n	8001bac <__ledf2+0x68>
 8001bec:	d006      	beq.n	8001bfc <__ledf2+0xb8>
 8001bee:	2000      	movs	r0, #0
 8001bf0:	454f      	cmp	r7, r9
 8001bf2:	d2e1      	bcs.n	8001bb8 <__ledf2+0x74>
 8001bf4:	2900      	cmp	r1, #0
 8001bf6:	d0e5      	beq.n	8001bc4 <__ledf2+0x80>
 8001bf8:	0008      	movs	r0, r1
 8001bfa:	e7dd      	b.n	8001bb8 <__ledf2+0x74>
 8001bfc:	45c4      	cmp	ip, r8
 8001bfe:	d8d5      	bhi.n	8001bac <__ledf2+0x68>
 8001c00:	2000      	movs	r0, #0
 8001c02:	45c4      	cmp	ip, r8
 8001c04:	d2d8      	bcs.n	8001bb8 <__ledf2+0x74>
 8001c06:	e7f5      	b.n	8001bf4 <__ledf2+0xb0>
 8001c08:	000007ff 	.word	0x000007ff

08001c0c <__aeabi_dmul>:
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0e:	4657      	mov	r7, sl
 8001c10:	464e      	mov	r6, r9
 8001c12:	4645      	mov	r5, r8
 8001c14:	46de      	mov	lr, fp
 8001c16:	b5e0      	push	{r5, r6, r7, lr}
 8001c18:	4698      	mov	r8, r3
 8001c1a:	030c      	lsls	r4, r1, #12
 8001c1c:	004b      	lsls	r3, r1, #1
 8001c1e:	0006      	movs	r6, r0
 8001c20:	4692      	mov	sl, r2
 8001c22:	b087      	sub	sp, #28
 8001c24:	0b24      	lsrs	r4, r4, #12
 8001c26:	0d5b      	lsrs	r3, r3, #21
 8001c28:	0fcf      	lsrs	r7, r1, #31
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dmul+0x24>
 8001c2e:	e15c      	b.n	8001eea <__aeabi_dmul+0x2de>
 8001c30:	4ad9      	ldr	r2, [pc, #868]	; (8001f98 <__aeabi_dmul+0x38c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d100      	bne.n	8001c38 <__aeabi_dmul+0x2c>
 8001c36:	e175      	b.n	8001f24 <__aeabi_dmul+0x318>
 8001c38:	0f42      	lsrs	r2, r0, #29
 8001c3a:	00e4      	lsls	r4, r4, #3
 8001c3c:	4314      	orrs	r4, r2
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	0412      	lsls	r2, r2, #16
 8001c42:	4314      	orrs	r4, r2
 8001c44:	4ad5      	ldr	r2, [pc, #852]	; (8001f9c <__aeabi_dmul+0x390>)
 8001c46:	00c5      	lsls	r5, r0, #3
 8001c48:	4694      	mov	ip, r2
 8001c4a:	4463      	add	r3, ip
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	4699      	mov	r9, r3
 8001c52:	469b      	mov	fp, r3
 8001c54:	4643      	mov	r3, r8
 8001c56:	4642      	mov	r2, r8
 8001c58:	031e      	lsls	r6, r3, #12
 8001c5a:	0fd2      	lsrs	r2, r2, #31
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4650      	mov	r0, sl
 8001c60:	4690      	mov	r8, r2
 8001c62:	0b36      	lsrs	r6, r6, #12
 8001c64:	0d5b      	lsrs	r3, r3, #21
 8001c66:	d100      	bne.n	8001c6a <__aeabi_dmul+0x5e>
 8001c68:	e120      	b.n	8001eac <__aeabi_dmul+0x2a0>
 8001c6a:	4acb      	ldr	r2, [pc, #812]	; (8001f98 <__aeabi_dmul+0x38c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d100      	bne.n	8001c72 <__aeabi_dmul+0x66>
 8001c70:	e162      	b.n	8001f38 <__aeabi_dmul+0x32c>
 8001c72:	49ca      	ldr	r1, [pc, #808]	; (8001f9c <__aeabi_dmul+0x390>)
 8001c74:	0f42      	lsrs	r2, r0, #29
 8001c76:	468c      	mov	ip, r1
 8001c78:	9900      	ldr	r1, [sp, #0]
 8001c7a:	4463      	add	r3, ip
 8001c7c:	00f6      	lsls	r6, r6, #3
 8001c7e:	468c      	mov	ip, r1
 8001c80:	4316      	orrs	r6, r2
 8001c82:	2280      	movs	r2, #128	; 0x80
 8001c84:	449c      	add	ip, r3
 8001c86:	0412      	lsls	r2, r2, #16
 8001c88:	4663      	mov	r3, ip
 8001c8a:	4316      	orrs	r6, r2
 8001c8c:	00c2      	lsls	r2, r0, #3
 8001c8e:	2000      	movs	r0, #0
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	9900      	ldr	r1, [sp, #0]
 8001c94:	4643      	mov	r3, r8
 8001c96:	3101      	adds	r1, #1
 8001c98:	468c      	mov	ip, r1
 8001c9a:	4649      	mov	r1, r9
 8001c9c:	407b      	eors	r3, r7
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	290f      	cmp	r1, #15
 8001ca2:	d826      	bhi.n	8001cf2 <__aeabi_dmul+0xe6>
 8001ca4:	4bbe      	ldr	r3, [pc, #760]	; (8001fa0 <__aeabi_dmul+0x394>)
 8001ca6:	0089      	lsls	r1, r1, #2
 8001ca8:	5859      	ldr	r1, [r3, r1]
 8001caa:	468f      	mov	pc, r1
 8001cac:	4643      	mov	r3, r8
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	0034      	movs	r4, r6
 8001cb2:	0015      	movs	r5, r2
 8001cb4:	4683      	mov	fp, r0
 8001cb6:	465b      	mov	r3, fp
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d016      	beq.n	8001cea <__aeabi_dmul+0xde>
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_dmul+0xb6>
 8001cc0:	e203      	b.n	80020ca <__aeabi_dmul+0x4be>
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_dmul+0xbc>
 8001cc6:	e0cd      	b.n	8001e64 <__aeabi_dmul+0x258>
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2400      	movs	r4, #0
 8001ccc:	2500      	movs	r5, #0
 8001cce:	9b01      	ldr	r3, [sp, #4]
 8001cd0:	0512      	lsls	r2, r2, #20
 8001cd2:	4322      	orrs	r2, r4
 8001cd4:	07db      	lsls	r3, r3, #31
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	0028      	movs	r0, r5
 8001cda:	0011      	movs	r1, r2
 8001cdc:	b007      	add	sp, #28
 8001cde:	bcf0      	pop	{r4, r5, r6, r7}
 8001ce0:	46bb      	mov	fp, r7
 8001ce2:	46b2      	mov	sl, r6
 8001ce4:	46a9      	mov	r9, r5
 8001ce6:	46a0      	mov	r8, r4
 8001ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cea:	2400      	movs	r4, #0
 8001cec:	2500      	movs	r5, #0
 8001cee:	4aaa      	ldr	r2, [pc, #680]	; (8001f98 <__aeabi_dmul+0x38c>)
 8001cf0:	e7ed      	b.n	8001cce <__aeabi_dmul+0xc2>
 8001cf2:	0c28      	lsrs	r0, r5, #16
 8001cf4:	042d      	lsls	r5, r5, #16
 8001cf6:	0c2d      	lsrs	r5, r5, #16
 8001cf8:	002b      	movs	r3, r5
 8001cfa:	0c11      	lsrs	r1, r2, #16
 8001cfc:	0412      	lsls	r2, r2, #16
 8001cfe:	0c12      	lsrs	r2, r2, #16
 8001d00:	4353      	muls	r3, r2
 8001d02:	4698      	mov	r8, r3
 8001d04:	0013      	movs	r3, r2
 8001d06:	002f      	movs	r7, r5
 8001d08:	4343      	muls	r3, r0
 8001d0a:	4699      	mov	r9, r3
 8001d0c:	434f      	muls	r7, r1
 8001d0e:	444f      	add	r7, r9
 8001d10:	46bb      	mov	fp, r7
 8001d12:	4647      	mov	r7, r8
 8001d14:	000b      	movs	r3, r1
 8001d16:	0c3f      	lsrs	r7, r7, #16
 8001d18:	46ba      	mov	sl, r7
 8001d1a:	4343      	muls	r3, r0
 8001d1c:	44da      	add	sl, fp
 8001d1e:	9302      	str	r3, [sp, #8]
 8001d20:	45d1      	cmp	r9, sl
 8001d22:	d904      	bls.n	8001d2e <__aeabi_dmul+0x122>
 8001d24:	2780      	movs	r7, #128	; 0x80
 8001d26:	027f      	lsls	r7, r7, #9
 8001d28:	46b9      	mov	r9, r7
 8001d2a:	444b      	add	r3, r9
 8001d2c:	9302      	str	r3, [sp, #8]
 8001d2e:	4653      	mov	r3, sl
 8001d30:	0c1b      	lsrs	r3, r3, #16
 8001d32:	469b      	mov	fp, r3
 8001d34:	4653      	mov	r3, sl
 8001d36:	041f      	lsls	r7, r3, #16
 8001d38:	4643      	mov	r3, r8
 8001d3a:	041b      	lsls	r3, r3, #16
 8001d3c:	0c1b      	lsrs	r3, r3, #16
 8001d3e:	4698      	mov	r8, r3
 8001d40:	003b      	movs	r3, r7
 8001d42:	4443      	add	r3, r8
 8001d44:	9304      	str	r3, [sp, #16]
 8001d46:	0c33      	lsrs	r3, r6, #16
 8001d48:	0436      	lsls	r6, r6, #16
 8001d4a:	0c36      	lsrs	r6, r6, #16
 8001d4c:	4698      	mov	r8, r3
 8001d4e:	0033      	movs	r3, r6
 8001d50:	4343      	muls	r3, r0
 8001d52:	4699      	mov	r9, r3
 8001d54:	4643      	mov	r3, r8
 8001d56:	4343      	muls	r3, r0
 8001d58:	002f      	movs	r7, r5
 8001d5a:	469a      	mov	sl, r3
 8001d5c:	4643      	mov	r3, r8
 8001d5e:	4377      	muls	r7, r6
 8001d60:	435d      	muls	r5, r3
 8001d62:	0c38      	lsrs	r0, r7, #16
 8001d64:	444d      	add	r5, r9
 8001d66:	1945      	adds	r5, r0, r5
 8001d68:	45a9      	cmp	r9, r5
 8001d6a:	d903      	bls.n	8001d74 <__aeabi_dmul+0x168>
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	025b      	lsls	r3, r3, #9
 8001d70:	4699      	mov	r9, r3
 8001d72:	44ca      	add	sl, r9
 8001d74:	043f      	lsls	r7, r7, #16
 8001d76:	0c28      	lsrs	r0, r5, #16
 8001d78:	0c3f      	lsrs	r7, r7, #16
 8001d7a:	042d      	lsls	r5, r5, #16
 8001d7c:	19ed      	adds	r5, r5, r7
 8001d7e:	0c27      	lsrs	r7, r4, #16
 8001d80:	0424      	lsls	r4, r4, #16
 8001d82:	0c24      	lsrs	r4, r4, #16
 8001d84:	0003      	movs	r3, r0
 8001d86:	0020      	movs	r0, r4
 8001d88:	4350      	muls	r0, r2
 8001d8a:	437a      	muls	r2, r7
 8001d8c:	4691      	mov	r9, r2
 8001d8e:	003a      	movs	r2, r7
 8001d90:	4453      	add	r3, sl
 8001d92:	9305      	str	r3, [sp, #20]
 8001d94:	0c03      	lsrs	r3, r0, #16
 8001d96:	469a      	mov	sl, r3
 8001d98:	434a      	muls	r2, r1
 8001d9a:	4361      	muls	r1, r4
 8001d9c:	4449      	add	r1, r9
 8001d9e:	4451      	add	r1, sl
 8001da0:	44ab      	add	fp, r5
 8001da2:	4589      	cmp	r9, r1
 8001da4:	d903      	bls.n	8001dae <__aeabi_dmul+0x1a2>
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	025b      	lsls	r3, r3, #9
 8001daa:	4699      	mov	r9, r3
 8001dac:	444a      	add	r2, r9
 8001dae:	0400      	lsls	r0, r0, #16
 8001db0:	0c0b      	lsrs	r3, r1, #16
 8001db2:	0c00      	lsrs	r0, r0, #16
 8001db4:	0409      	lsls	r1, r1, #16
 8001db6:	1809      	adds	r1, r1, r0
 8001db8:	0020      	movs	r0, r4
 8001dba:	4699      	mov	r9, r3
 8001dbc:	4643      	mov	r3, r8
 8001dbe:	4370      	muls	r0, r6
 8001dc0:	435c      	muls	r4, r3
 8001dc2:	437e      	muls	r6, r7
 8001dc4:	435f      	muls	r7, r3
 8001dc6:	0c03      	lsrs	r3, r0, #16
 8001dc8:	4698      	mov	r8, r3
 8001dca:	19a4      	adds	r4, r4, r6
 8001dcc:	4444      	add	r4, r8
 8001dce:	444a      	add	r2, r9
 8001dd0:	9703      	str	r7, [sp, #12]
 8001dd2:	42a6      	cmp	r6, r4
 8001dd4:	d904      	bls.n	8001de0 <__aeabi_dmul+0x1d4>
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	025b      	lsls	r3, r3, #9
 8001dda:	4698      	mov	r8, r3
 8001ddc:	4447      	add	r7, r8
 8001dde:	9703      	str	r7, [sp, #12]
 8001de0:	0423      	lsls	r3, r4, #16
 8001de2:	9e02      	ldr	r6, [sp, #8]
 8001de4:	469a      	mov	sl, r3
 8001de6:	9b05      	ldr	r3, [sp, #20]
 8001de8:	445e      	add	r6, fp
 8001dea:	4698      	mov	r8, r3
 8001dec:	42ae      	cmp	r6, r5
 8001dee:	41ad      	sbcs	r5, r5
 8001df0:	1876      	adds	r6, r6, r1
 8001df2:	428e      	cmp	r6, r1
 8001df4:	4189      	sbcs	r1, r1
 8001df6:	0400      	lsls	r0, r0, #16
 8001df8:	0c00      	lsrs	r0, r0, #16
 8001dfa:	4450      	add	r0, sl
 8001dfc:	4440      	add	r0, r8
 8001dfe:	426d      	negs	r5, r5
 8001e00:	1947      	adds	r7, r0, r5
 8001e02:	46b8      	mov	r8, r7
 8001e04:	4693      	mov	fp, r2
 8001e06:	4249      	negs	r1, r1
 8001e08:	4689      	mov	r9, r1
 8001e0a:	44c3      	add	fp, r8
 8001e0c:	44d9      	add	r9, fp
 8001e0e:	4298      	cmp	r0, r3
 8001e10:	4180      	sbcs	r0, r0
 8001e12:	45a8      	cmp	r8, r5
 8001e14:	41ad      	sbcs	r5, r5
 8001e16:	4593      	cmp	fp, r2
 8001e18:	4192      	sbcs	r2, r2
 8001e1a:	4589      	cmp	r9, r1
 8001e1c:	4189      	sbcs	r1, r1
 8001e1e:	426d      	negs	r5, r5
 8001e20:	4240      	negs	r0, r0
 8001e22:	4328      	orrs	r0, r5
 8001e24:	0c24      	lsrs	r4, r4, #16
 8001e26:	4252      	negs	r2, r2
 8001e28:	4249      	negs	r1, r1
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	9b03      	ldr	r3, [sp, #12]
 8001e2e:	1900      	adds	r0, r0, r4
 8001e30:	1880      	adds	r0, r0, r2
 8001e32:	18c7      	adds	r7, r0, r3
 8001e34:	464b      	mov	r3, r9
 8001e36:	0ddc      	lsrs	r4, r3, #23
 8001e38:	9b04      	ldr	r3, [sp, #16]
 8001e3a:	0275      	lsls	r5, r6, #9
 8001e3c:	431d      	orrs	r5, r3
 8001e3e:	1e6a      	subs	r2, r5, #1
 8001e40:	4195      	sbcs	r5, r2
 8001e42:	464b      	mov	r3, r9
 8001e44:	0df6      	lsrs	r6, r6, #23
 8001e46:	027f      	lsls	r7, r7, #9
 8001e48:	4335      	orrs	r5, r6
 8001e4a:	025a      	lsls	r2, r3, #9
 8001e4c:	433c      	orrs	r4, r7
 8001e4e:	4315      	orrs	r5, r2
 8001e50:	01fb      	lsls	r3, r7, #7
 8001e52:	d400      	bmi.n	8001e56 <__aeabi_dmul+0x24a>
 8001e54:	e11c      	b.n	8002090 <__aeabi_dmul+0x484>
 8001e56:	2101      	movs	r1, #1
 8001e58:	086a      	lsrs	r2, r5, #1
 8001e5a:	400d      	ands	r5, r1
 8001e5c:	4315      	orrs	r5, r2
 8001e5e:	07e2      	lsls	r2, r4, #31
 8001e60:	4315      	orrs	r5, r2
 8001e62:	0864      	lsrs	r4, r4, #1
 8001e64:	494f      	ldr	r1, [pc, #316]	; (8001fa4 <__aeabi_dmul+0x398>)
 8001e66:	4461      	add	r1, ip
 8001e68:	2900      	cmp	r1, #0
 8001e6a:	dc00      	bgt.n	8001e6e <__aeabi_dmul+0x262>
 8001e6c:	e0b0      	b.n	8001fd0 <__aeabi_dmul+0x3c4>
 8001e6e:	076b      	lsls	r3, r5, #29
 8001e70:	d009      	beq.n	8001e86 <__aeabi_dmul+0x27a>
 8001e72:	220f      	movs	r2, #15
 8001e74:	402a      	ands	r2, r5
 8001e76:	2a04      	cmp	r2, #4
 8001e78:	d005      	beq.n	8001e86 <__aeabi_dmul+0x27a>
 8001e7a:	1d2a      	adds	r2, r5, #4
 8001e7c:	42aa      	cmp	r2, r5
 8001e7e:	41ad      	sbcs	r5, r5
 8001e80:	426d      	negs	r5, r5
 8001e82:	1964      	adds	r4, r4, r5
 8001e84:	0015      	movs	r5, r2
 8001e86:	01e3      	lsls	r3, r4, #7
 8001e88:	d504      	bpl.n	8001e94 <__aeabi_dmul+0x288>
 8001e8a:	2180      	movs	r1, #128	; 0x80
 8001e8c:	4a46      	ldr	r2, [pc, #280]	; (8001fa8 <__aeabi_dmul+0x39c>)
 8001e8e:	00c9      	lsls	r1, r1, #3
 8001e90:	4014      	ands	r4, r2
 8001e92:	4461      	add	r1, ip
 8001e94:	4a45      	ldr	r2, [pc, #276]	; (8001fac <__aeabi_dmul+0x3a0>)
 8001e96:	4291      	cmp	r1, r2
 8001e98:	dd00      	ble.n	8001e9c <__aeabi_dmul+0x290>
 8001e9a:	e726      	b.n	8001cea <__aeabi_dmul+0xde>
 8001e9c:	0762      	lsls	r2, r4, #29
 8001e9e:	08ed      	lsrs	r5, r5, #3
 8001ea0:	0264      	lsls	r4, r4, #9
 8001ea2:	0549      	lsls	r1, r1, #21
 8001ea4:	4315      	orrs	r5, r2
 8001ea6:	0b24      	lsrs	r4, r4, #12
 8001ea8:	0d4a      	lsrs	r2, r1, #21
 8001eaa:	e710      	b.n	8001cce <__aeabi_dmul+0xc2>
 8001eac:	4652      	mov	r2, sl
 8001eae:	4332      	orrs	r2, r6
 8001eb0:	d100      	bne.n	8001eb4 <__aeabi_dmul+0x2a8>
 8001eb2:	e07f      	b.n	8001fb4 <__aeabi_dmul+0x3a8>
 8001eb4:	2e00      	cmp	r6, #0
 8001eb6:	d100      	bne.n	8001eba <__aeabi_dmul+0x2ae>
 8001eb8:	e0dc      	b.n	8002074 <__aeabi_dmul+0x468>
 8001eba:	0030      	movs	r0, r6
 8001ebc:	f000 fe1e 	bl	8002afc <__clzsi2>
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	3a0b      	subs	r2, #11
 8001ec4:	231d      	movs	r3, #29
 8001ec6:	0001      	movs	r1, r0
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	4652      	mov	r2, sl
 8001ecc:	3908      	subs	r1, #8
 8001ece:	40da      	lsrs	r2, r3
 8001ed0:	408e      	lsls	r6, r1
 8001ed2:	4316      	orrs	r6, r2
 8001ed4:	4652      	mov	r2, sl
 8001ed6:	408a      	lsls	r2, r1
 8001ed8:	9b00      	ldr	r3, [sp, #0]
 8001eda:	4935      	ldr	r1, [pc, #212]	; (8001fb0 <__aeabi_dmul+0x3a4>)
 8001edc:	1a18      	subs	r0, r3, r0
 8001ede:	0003      	movs	r3, r0
 8001ee0:	468c      	mov	ip, r1
 8001ee2:	4463      	add	r3, ip
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	e6d3      	b.n	8001c92 <__aeabi_dmul+0x86>
 8001eea:	0025      	movs	r5, r4
 8001eec:	4305      	orrs	r5, r0
 8001eee:	d04a      	beq.n	8001f86 <__aeabi_dmul+0x37a>
 8001ef0:	2c00      	cmp	r4, #0
 8001ef2:	d100      	bne.n	8001ef6 <__aeabi_dmul+0x2ea>
 8001ef4:	e0b0      	b.n	8002058 <__aeabi_dmul+0x44c>
 8001ef6:	0020      	movs	r0, r4
 8001ef8:	f000 fe00 	bl	8002afc <__clzsi2>
 8001efc:	0001      	movs	r1, r0
 8001efe:	0002      	movs	r2, r0
 8001f00:	390b      	subs	r1, #11
 8001f02:	231d      	movs	r3, #29
 8001f04:	0010      	movs	r0, r2
 8001f06:	1a5b      	subs	r3, r3, r1
 8001f08:	0031      	movs	r1, r6
 8001f0a:	0035      	movs	r5, r6
 8001f0c:	3808      	subs	r0, #8
 8001f0e:	4084      	lsls	r4, r0
 8001f10:	40d9      	lsrs	r1, r3
 8001f12:	4085      	lsls	r5, r0
 8001f14:	430c      	orrs	r4, r1
 8001f16:	4826      	ldr	r0, [pc, #152]	; (8001fb0 <__aeabi_dmul+0x3a4>)
 8001f18:	1a83      	subs	r3, r0, r2
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	4699      	mov	r9, r3
 8001f20:	469b      	mov	fp, r3
 8001f22:	e697      	b.n	8001c54 <__aeabi_dmul+0x48>
 8001f24:	0005      	movs	r5, r0
 8001f26:	4325      	orrs	r5, r4
 8001f28:	d126      	bne.n	8001f78 <__aeabi_dmul+0x36c>
 8001f2a:	2208      	movs	r2, #8
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2302      	movs	r3, #2
 8001f30:	2400      	movs	r4, #0
 8001f32:	4691      	mov	r9, r2
 8001f34:	469b      	mov	fp, r3
 8001f36:	e68d      	b.n	8001c54 <__aeabi_dmul+0x48>
 8001f38:	4652      	mov	r2, sl
 8001f3a:	9b00      	ldr	r3, [sp, #0]
 8001f3c:	4332      	orrs	r2, r6
 8001f3e:	d110      	bne.n	8001f62 <__aeabi_dmul+0x356>
 8001f40:	4915      	ldr	r1, [pc, #84]	; (8001f98 <__aeabi_dmul+0x38c>)
 8001f42:	2600      	movs	r6, #0
 8001f44:	468c      	mov	ip, r1
 8001f46:	4463      	add	r3, ip
 8001f48:	4649      	mov	r1, r9
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	4319      	orrs	r1, r3
 8001f50:	4689      	mov	r9, r1
 8001f52:	2002      	movs	r0, #2
 8001f54:	e69d      	b.n	8001c92 <__aeabi_dmul+0x86>
 8001f56:	465b      	mov	r3, fp
 8001f58:	9701      	str	r7, [sp, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dmul+0x354>
 8001f5e:	e6ad      	b.n	8001cbc <__aeabi_dmul+0xb0>
 8001f60:	e6c3      	b.n	8001cea <__aeabi_dmul+0xde>
 8001f62:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <__aeabi_dmul+0x38c>)
 8001f64:	2003      	movs	r0, #3
 8001f66:	4694      	mov	ip, r2
 8001f68:	4463      	add	r3, ip
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2303      	movs	r3, #3
 8001f70:	431a      	orrs	r2, r3
 8001f72:	4691      	mov	r9, r2
 8001f74:	4652      	mov	r2, sl
 8001f76:	e68c      	b.n	8001c92 <__aeabi_dmul+0x86>
 8001f78:	220c      	movs	r2, #12
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	0005      	movs	r5, r0
 8001f80:	4691      	mov	r9, r2
 8001f82:	469b      	mov	fp, r3
 8001f84:	e666      	b.n	8001c54 <__aeabi_dmul+0x48>
 8001f86:	2304      	movs	r3, #4
 8001f88:	4699      	mov	r9, r3
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	2400      	movs	r4, #0
 8001f92:	469b      	mov	fp, r3
 8001f94:	e65e      	b.n	8001c54 <__aeabi_dmul+0x48>
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	000007ff 	.word	0x000007ff
 8001f9c:	fffffc01 	.word	0xfffffc01
 8001fa0:	0800b090 	.word	0x0800b090
 8001fa4:	000003ff 	.word	0x000003ff
 8001fa8:	feffffff 	.word	0xfeffffff
 8001fac:	000007fe 	.word	0x000007fe
 8001fb0:	fffffc0d 	.word	0xfffffc0d
 8001fb4:	4649      	mov	r1, r9
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	4319      	orrs	r1, r3
 8001fba:	4689      	mov	r9, r1
 8001fbc:	2600      	movs	r6, #0
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	e667      	b.n	8001c92 <__aeabi_dmul+0x86>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2480      	movs	r4, #128	; 0x80
 8001fc6:	2500      	movs	r5, #0
 8001fc8:	4a43      	ldr	r2, [pc, #268]	; (80020d8 <__aeabi_dmul+0x4cc>)
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	0324      	lsls	r4, r4, #12
 8001fce:	e67e      	b.n	8001cce <__aeabi_dmul+0xc2>
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	1a40      	subs	r0, r0, r1
 8001fd4:	2838      	cmp	r0, #56	; 0x38
 8001fd6:	dd00      	ble.n	8001fda <__aeabi_dmul+0x3ce>
 8001fd8:	e676      	b.n	8001cc8 <__aeabi_dmul+0xbc>
 8001fda:	281f      	cmp	r0, #31
 8001fdc:	dd5b      	ble.n	8002096 <__aeabi_dmul+0x48a>
 8001fde:	221f      	movs	r2, #31
 8001fe0:	0023      	movs	r3, r4
 8001fe2:	4252      	negs	r2, r2
 8001fe4:	1a51      	subs	r1, r2, r1
 8001fe6:	40cb      	lsrs	r3, r1
 8001fe8:	0019      	movs	r1, r3
 8001fea:	2820      	cmp	r0, #32
 8001fec:	d003      	beq.n	8001ff6 <__aeabi_dmul+0x3ea>
 8001fee:	4a3b      	ldr	r2, [pc, #236]	; (80020dc <__aeabi_dmul+0x4d0>)
 8001ff0:	4462      	add	r2, ip
 8001ff2:	4094      	lsls	r4, r2
 8001ff4:	4325      	orrs	r5, r4
 8001ff6:	1e6a      	subs	r2, r5, #1
 8001ff8:	4195      	sbcs	r5, r2
 8001ffa:	002a      	movs	r2, r5
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	2107      	movs	r1, #7
 8002000:	000d      	movs	r5, r1
 8002002:	2400      	movs	r4, #0
 8002004:	4015      	ands	r5, r2
 8002006:	4211      	tst	r1, r2
 8002008:	d05b      	beq.n	80020c2 <__aeabi_dmul+0x4b6>
 800200a:	210f      	movs	r1, #15
 800200c:	2400      	movs	r4, #0
 800200e:	4011      	ands	r1, r2
 8002010:	2904      	cmp	r1, #4
 8002012:	d053      	beq.n	80020bc <__aeabi_dmul+0x4b0>
 8002014:	1d11      	adds	r1, r2, #4
 8002016:	4291      	cmp	r1, r2
 8002018:	4192      	sbcs	r2, r2
 800201a:	4252      	negs	r2, r2
 800201c:	18a4      	adds	r4, r4, r2
 800201e:	000a      	movs	r2, r1
 8002020:	0223      	lsls	r3, r4, #8
 8002022:	d54b      	bpl.n	80020bc <__aeabi_dmul+0x4b0>
 8002024:	2201      	movs	r2, #1
 8002026:	2400      	movs	r4, #0
 8002028:	2500      	movs	r5, #0
 800202a:	e650      	b.n	8001cce <__aeabi_dmul+0xc2>
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	031b      	lsls	r3, r3, #12
 8002030:	421c      	tst	r4, r3
 8002032:	d009      	beq.n	8002048 <__aeabi_dmul+0x43c>
 8002034:	421e      	tst	r6, r3
 8002036:	d107      	bne.n	8002048 <__aeabi_dmul+0x43c>
 8002038:	4333      	orrs	r3, r6
 800203a:	031c      	lsls	r4, r3, #12
 800203c:	4643      	mov	r3, r8
 800203e:	0015      	movs	r5, r2
 8002040:	0b24      	lsrs	r4, r4, #12
 8002042:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <__aeabi_dmul+0x4cc>)
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	e642      	b.n	8001cce <__aeabi_dmul+0xc2>
 8002048:	2280      	movs	r2, #128	; 0x80
 800204a:	0312      	lsls	r2, r2, #12
 800204c:	4314      	orrs	r4, r2
 800204e:	0324      	lsls	r4, r4, #12
 8002050:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <__aeabi_dmul+0x4cc>)
 8002052:	0b24      	lsrs	r4, r4, #12
 8002054:	9701      	str	r7, [sp, #4]
 8002056:	e63a      	b.n	8001cce <__aeabi_dmul+0xc2>
 8002058:	f000 fd50 	bl	8002afc <__clzsi2>
 800205c:	0001      	movs	r1, r0
 800205e:	0002      	movs	r2, r0
 8002060:	3115      	adds	r1, #21
 8002062:	3220      	adds	r2, #32
 8002064:	291c      	cmp	r1, #28
 8002066:	dc00      	bgt.n	800206a <__aeabi_dmul+0x45e>
 8002068:	e74b      	b.n	8001f02 <__aeabi_dmul+0x2f6>
 800206a:	0034      	movs	r4, r6
 800206c:	3808      	subs	r0, #8
 800206e:	2500      	movs	r5, #0
 8002070:	4084      	lsls	r4, r0
 8002072:	e750      	b.n	8001f16 <__aeabi_dmul+0x30a>
 8002074:	f000 fd42 	bl	8002afc <__clzsi2>
 8002078:	0003      	movs	r3, r0
 800207a:	001a      	movs	r2, r3
 800207c:	3215      	adds	r2, #21
 800207e:	3020      	adds	r0, #32
 8002080:	2a1c      	cmp	r2, #28
 8002082:	dc00      	bgt.n	8002086 <__aeabi_dmul+0x47a>
 8002084:	e71e      	b.n	8001ec4 <__aeabi_dmul+0x2b8>
 8002086:	4656      	mov	r6, sl
 8002088:	3b08      	subs	r3, #8
 800208a:	2200      	movs	r2, #0
 800208c:	409e      	lsls	r6, r3
 800208e:	e723      	b.n	8001ed8 <__aeabi_dmul+0x2cc>
 8002090:	9b00      	ldr	r3, [sp, #0]
 8002092:	469c      	mov	ip, r3
 8002094:	e6e6      	b.n	8001e64 <__aeabi_dmul+0x258>
 8002096:	4912      	ldr	r1, [pc, #72]	; (80020e0 <__aeabi_dmul+0x4d4>)
 8002098:	0022      	movs	r2, r4
 800209a:	4461      	add	r1, ip
 800209c:	002e      	movs	r6, r5
 800209e:	408d      	lsls	r5, r1
 80020a0:	408a      	lsls	r2, r1
 80020a2:	40c6      	lsrs	r6, r0
 80020a4:	1e69      	subs	r1, r5, #1
 80020a6:	418d      	sbcs	r5, r1
 80020a8:	4332      	orrs	r2, r6
 80020aa:	432a      	orrs	r2, r5
 80020ac:	40c4      	lsrs	r4, r0
 80020ae:	0753      	lsls	r3, r2, #29
 80020b0:	d0b6      	beq.n	8002020 <__aeabi_dmul+0x414>
 80020b2:	210f      	movs	r1, #15
 80020b4:	4011      	ands	r1, r2
 80020b6:	2904      	cmp	r1, #4
 80020b8:	d1ac      	bne.n	8002014 <__aeabi_dmul+0x408>
 80020ba:	e7b1      	b.n	8002020 <__aeabi_dmul+0x414>
 80020bc:	0765      	lsls	r5, r4, #29
 80020be:	0264      	lsls	r4, r4, #9
 80020c0:	0b24      	lsrs	r4, r4, #12
 80020c2:	08d2      	lsrs	r2, r2, #3
 80020c4:	4315      	orrs	r5, r2
 80020c6:	2200      	movs	r2, #0
 80020c8:	e601      	b.n	8001cce <__aeabi_dmul+0xc2>
 80020ca:	2280      	movs	r2, #128	; 0x80
 80020cc:	0312      	lsls	r2, r2, #12
 80020ce:	4314      	orrs	r4, r2
 80020d0:	0324      	lsls	r4, r4, #12
 80020d2:	4a01      	ldr	r2, [pc, #4]	; (80020d8 <__aeabi_dmul+0x4cc>)
 80020d4:	0b24      	lsrs	r4, r4, #12
 80020d6:	e5fa      	b.n	8001cce <__aeabi_dmul+0xc2>
 80020d8:	000007ff 	.word	0x000007ff
 80020dc:	0000043e 	.word	0x0000043e
 80020e0:	0000041e 	.word	0x0000041e

080020e4 <__aeabi_dsub>:
 80020e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	4645      	mov	r5, r8
 80020ec:	46de      	mov	lr, fp
 80020ee:	b5e0      	push	{r5, r6, r7, lr}
 80020f0:	001e      	movs	r6, r3
 80020f2:	0017      	movs	r7, r2
 80020f4:	004a      	lsls	r2, r1, #1
 80020f6:	030b      	lsls	r3, r1, #12
 80020f8:	0d52      	lsrs	r2, r2, #21
 80020fa:	0a5b      	lsrs	r3, r3, #9
 80020fc:	4690      	mov	r8, r2
 80020fe:	0f42      	lsrs	r2, r0, #29
 8002100:	431a      	orrs	r2, r3
 8002102:	0fcd      	lsrs	r5, r1, #31
 8002104:	4ccd      	ldr	r4, [pc, #820]	; (800243c <__aeabi_dsub+0x358>)
 8002106:	0331      	lsls	r1, r6, #12
 8002108:	00c3      	lsls	r3, r0, #3
 800210a:	4694      	mov	ip, r2
 800210c:	0070      	lsls	r0, r6, #1
 800210e:	0f7a      	lsrs	r2, r7, #29
 8002110:	0a49      	lsrs	r1, r1, #9
 8002112:	00ff      	lsls	r7, r7, #3
 8002114:	469a      	mov	sl, r3
 8002116:	46b9      	mov	r9, r7
 8002118:	0d40      	lsrs	r0, r0, #21
 800211a:	0ff6      	lsrs	r6, r6, #31
 800211c:	4311      	orrs	r1, r2
 800211e:	42a0      	cmp	r0, r4
 8002120:	d100      	bne.n	8002124 <__aeabi_dsub+0x40>
 8002122:	e0b1      	b.n	8002288 <__aeabi_dsub+0x1a4>
 8002124:	2201      	movs	r2, #1
 8002126:	4056      	eors	r6, r2
 8002128:	46b3      	mov	fp, r6
 800212a:	42b5      	cmp	r5, r6
 800212c:	d100      	bne.n	8002130 <__aeabi_dsub+0x4c>
 800212e:	e088      	b.n	8002242 <__aeabi_dsub+0x15e>
 8002130:	4642      	mov	r2, r8
 8002132:	1a12      	subs	r2, r2, r0
 8002134:	2a00      	cmp	r2, #0
 8002136:	dc00      	bgt.n	800213a <__aeabi_dsub+0x56>
 8002138:	e0ae      	b.n	8002298 <__aeabi_dsub+0x1b4>
 800213a:	2800      	cmp	r0, #0
 800213c:	d100      	bne.n	8002140 <__aeabi_dsub+0x5c>
 800213e:	e0c1      	b.n	80022c4 <__aeabi_dsub+0x1e0>
 8002140:	48be      	ldr	r0, [pc, #760]	; (800243c <__aeabi_dsub+0x358>)
 8002142:	4580      	cmp	r8, r0
 8002144:	d100      	bne.n	8002148 <__aeabi_dsub+0x64>
 8002146:	e151      	b.n	80023ec <__aeabi_dsub+0x308>
 8002148:	2080      	movs	r0, #128	; 0x80
 800214a:	0400      	lsls	r0, r0, #16
 800214c:	4301      	orrs	r1, r0
 800214e:	2a38      	cmp	r2, #56	; 0x38
 8002150:	dd00      	ble.n	8002154 <__aeabi_dsub+0x70>
 8002152:	e17b      	b.n	800244c <__aeabi_dsub+0x368>
 8002154:	2a1f      	cmp	r2, #31
 8002156:	dd00      	ble.n	800215a <__aeabi_dsub+0x76>
 8002158:	e1ee      	b.n	8002538 <__aeabi_dsub+0x454>
 800215a:	2020      	movs	r0, #32
 800215c:	003e      	movs	r6, r7
 800215e:	1a80      	subs	r0, r0, r2
 8002160:	000c      	movs	r4, r1
 8002162:	40d6      	lsrs	r6, r2
 8002164:	40d1      	lsrs	r1, r2
 8002166:	4087      	lsls	r7, r0
 8002168:	4662      	mov	r2, ip
 800216a:	4084      	lsls	r4, r0
 800216c:	1a52      	subs	r2, r2, r1
 800216e:	1e78      	subs	r0, r7, #1
 8002170:	4187      	sbcs	r7, r0
 8002172:	4694      	mov	ip, r2
 8002174:	4334      	orrs	r4, r6
 8002176:	4327      	orrs	r7, r4
 8002178:	1bdc      	subs	r4, r3, r7
 800217a:	42a3      	cmp	r3, r4
 800217c:	419b      	sbcs	r3, r3
 800217e:	4662      	mov	r2, ip
 8002180:	425b      	negs	r3, r3
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	4699      	mov	r9, r3
 8002186:	464b      	mov	r3, r9
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	d400      	bmi.n	800218e <__aeabi_dsub+0xaa>
 800218c:	e118      	b.n	80023c0 <__aeabi_dsub+0x2dc>
 800218e:	464b      	mov	r3, r9
 8002190:	0258      	lsls	r0, r3, #9
 8002192:	0a43      	lsrs	r3, r0, #9
 8002194:	4699      	mov	r9, r3
 8002196:	464b      	mov	r3, r9
 8002198:	2b00      	cmp	r3, #0
 800219a:	d100      	bne.n	800219e <__aeabi_dsub+0xba>
 800219c:	e137      	b.n	800240e <__aeabi_dsub+0x32a>
 800219e:	4648      	mov	r0, r9
 80021a0:	f000 fcac 	bl	8002afc <__clzsi2>
 80021a4:	0001      	movs	r1, r0
 80021a6:	3908      	subs	r1, #8
 80021a8:	2320      	movs	r3, #32
 80021aa:	0022      	movs	r2, r4
 80021ac:	4648      	mov	r0, r9
 80021ae:	1a5b      	subs	r3, r3, r1
 80021b0:	40da      	lsrs	r2, r3
 80021b2:	4088      	lsls	r0, r1
 80021b4:	408c      	lsls	r4, r1
 80021b6:	4643      	mov	r3, r8
 80021b8:	4310      	orrs	r0, r2
 80021ba:	4588      	cmp	r8, r1
 80021bc:	dd00      	ble.n	80021c0 <__aeabi_dsub+0xdc>
 80021be:	e136      	b.n	800242e <__aeabi_dsub+0x34a>
 80021c0:	1ac9      	subs	r1, r1, r3
 80021c2:	1c4b      	adds	r3, r1, #1
 80021c4:	2b1f      	cmp	r3, #31
 80021c6:	dd00      	ble.n	80021ca <__aeabi_dsub+0xe6>
 80021c8:	e0ea      	b.n	80023a0 <__aeabi_dsub+0x2bc>
 80021ca:	2220      	movs	r2, #32
 80021cc:	0026      	movs	r6, r4
 80021ce:	1ad2      	subs	r2, r2, r3
 80021d0:	0001      	movs	r1, r0
 80021d2:	4094      	lsls	r4, r2
 80021d4:	40de      	lsrs	r6, r3
 80021d6:	40d8      	lsrs	r0, r3
 80021d8:	2300      	movs	r3, #0
 80021da:	4091      	lsls	r1, r2
 80021dc:	1e62      	subs	r2, r4, #1
 80021de:	4194      	sbcs	r4, r2
 80021e0:	4681      	mov	r9, r0
 80021e2:	4698      	mov	r8, r3
 80021e4:	4331      	orrs	r1, r6
 80021e6:	430c      	orrs	r4, r1
 80021e8:	0763      	lsls	r3, r4, #29
 80021ea:	d009      	beq.n	8002200 <__aeabi_dsub+0x11c>
 80021ec:	230f      	movs	r3, #15
 80021ee:	4023      	ands	r3, r4
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d005      	beq.n	8002200 <__aeabi_dsub+0x11c>
 80021f4:	1d23      	adds	r3, r4, #4
 80021f6:	42a3      	cmp	r3, r4
 80021f8:	41a4      	sbcs	r4, r4
 80021fa:	4264      	negs	r4, r4
 80021fc:	44a1      	add	r9, r4
 80021fe:	001c      	movs	r4, r3
 8002200:	464b      	mov	r3, r9
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	d400      	bmi.n	8002208 <__aeabi_dsub+0x124>
 8002206:	e0de      	b.n	80023c6 <__aeabi_dsub+0x2e2>
 8002208:	4641      	mov	r1, r8
 800220a:	4b8c      	ldr	r3, [pc, #560]	; (800243c <__aeabi_dsub+0x358>)
 800220c:	3101      	adds	r1, #1
 800220e:	4299      	cmp	r1, r3
 8002210:	d100      	bne.n	8002214 <__aeabi_dsub+0x130>
 8002212:	e0e7      	b.n	80023e4 <__aeabi_dsub+0x300>
 8002214:	464b      	mov	r3, r9
 8002216:	488a      	ldr	r0, [pc, #552]	; (8002440 <__aeabi_dsub+0x35c>)
 8002218:	08e4      	lsrs	r4, r4, #3
 800221a:	4003      	ands	r3, r0
 800221c:	0018      	movs	r0, r3
 800221e:	0549      	lsls	r1, r1, #21
 8002220:	075b      	lsls	r3, r3, #29
 8002222:	0240      	lsls	r0, r0, #9
 8002224:	4323      	orrs	r3, r4
 8002226:	0d4a      	lsrs	r2, r1, #21
 8002228:	0b04      	lsrs	r4, r0, #12
 800222a:	0512      	lsls	r2, r2, #20
 800222c:	07ed      	lsls	r5, r5, #31
 800222e:	4322      	orrs	r2, r4
 8002230:	432a      	orrs	r2, r5
 8002232:	0018      	movs	r0, r3
 8002234:	0011      	movs	r1, r2
 8002236:	bcf0      	pop	{r4, r5, r6, r7}
 8002238:	46bb      	mov	fp, r7
 800223a:	46b2      	mov	sl, r6
 800223c:	46a9      	mov	r9, r5
 800223e:	46a0      	mov	r8, r4
 8002240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002242:	4642      	mov	r2, r8
 8002244:	1a12      	subs	r2, r2, r0
 8002246:	2a00      	cmp	r2, #0
 8002248:	dd52      	ble.n	80022f0 <__aeabi_dsub+0x20c>
 800224a:	2800      	cmp	r0, #0
 800224c:	d100      	bne.n	8002250 <__aeabi_dsub+0x16c>
 800224e:	e09c      	b.n	800238a <__aeabi_dsub+0x2a6>
 8002250:	45a0      	cmp	r8, r4
 8002252:	d100      	bne.n	8002256 <__aeabi_dsub+0x172>
 8002254:	e0ca      	b.n	80023ec <__aeabi_dsub+0x308>
 8002256:	2080      	movs	r0, #128	; 0x80
 8002258:	0400      	lsls	r0, r0, #16
 800225a:	4301      	orrs	r1, r0
 800225c:	2a38      	cmp	r2, #56	; 0x38
 800225e:	dd00      	ble.n	8002262 <__aeabi_dsub+0x17e>
 8002260:	e149      	b.n	80024f6 <__aeabi_dsub+0x412>
 8002262:	2a1f      	cmp	r2, #31
 8002264:	dc00      	bgt.n	8002268 <__aeabi_dsub+0x184>
 8002266:	e197      	b.n	8002598 <__aeabi_dsub+0x4b4>
 8002268:	0010      	movs	r0, r2
 800226a:	000e      	movs	r6, r1
 800226c:	3820      	subs	r0, #32
 800226e:	40c6      	lsrs	r6, r0
 8002270:	2a20      	cmp	r2, #32
 8002272:	d004      	beq.n	800227e <__aeabi_dsub+0x19a>
 8002274:	2040      	movs	r0, #64	; 0x40
 8002276:	1a82      	subs	r2, r0, r2
 8002278:	4091      	lsls	r1, r2
 800227a:	430f      	orrs	r7, r1
 800227c:	46b9      	mov	r9, r7
 800227e:	464c      	mov	r4, r9
 8002280:	1e62      	subs	r2, r4, #1
 8002282:	4194      	sbcs	r4, r2
 8002284:	4334      	orrs	r4, r6
 8002286:	e13a      	b.n	80024fe <__aeabi_dsub+0x41a>
 8002288:	000a      	movs	r2, r1
 800228a:	433a      	orrs	r2, r7
 800228c:	d028      	beq.n	80022e0 <__aeabi_dsub+0x1fc>
 800228e:	46b3      	mov	fp, r6
 8002290:	42b5      	cmp	r5, r6
 8002292:	d02b      	beq.n	80022ec <__aeabi_dsub+0x208>
 8002294:	4a6b      	ldr	r2, [pc, #428]	; (8002444 <__aeabi_dsub+0x360>)
 8002296:	4442      	add	r2, r8
 8002298:	2a00      	cmp	r2, #0
 800229a:	d05d      	beq.n	8002358 <__aeabi_dsub+0x274>
 800229c:	4642      	mov	r2, r8
 800229e:	4644      	mov	r4, r8
 80022a0:	1a82      	subs	r2, r0, r2
 80022a2:	2c00      	cmp	r4, #0
 80022a4:	d000      	beq.n	80022a8 <__aeabi_dsub+0x1c4>
 80022a6:	e0f5      	b.n	8002494 <__aeabi_dsub+0x3b0>
 80022a8:	4665      	mov	r5, ip
 80022aa:	431d      	orrs	r5, r3
 80022ac:	d100      	bne.n	80022b0 <__aeabi_dsub+0x1cc>
 80022ae:	e19c      	b.n	80025ea <__aeabi_dsub+0x506>
 80022b0:	1e55      	subs	r5, r2, #1
 80022b2:	2a01      	cmp	r2, #1
 80022b4:	d100      	bne.n	80022b8 <__aeabi_dsub+0x1d4>
 80022b6:	e1fb      	b.n	80026b0 <__aeabi_dsub+0x5cc>
 80022b8:	4c60      	ldr	r4, [pc, #384]	; (800243c <__aeabi_dsub+0x358>)
 80022ba:	42a2      	cmp	r2, r4
 80022bc:	d100      	bne.n	80022c0 <__aeabi_dsub+0x1dc>
 80022be:	e1bd      	b.n	800263c <__aeabi_dsub+0x558>
 80022c0:	002a      	movs	r2, r5
 80022c2:	e0f0      	b.n	80024a6 <__aeabi_dsub+0x3c2>
 80022c4:	0008      	movs	r0, r1
 80022c6:	4338      	orrs	r0, r7
 80022c8:	d100      	bne.n	80022cc <__aeabi_dsub+0x1e8>
 80022ca:	e0c3      	b.n	8002454 <__aeabi_dsub+0x370>
 80022cc:	1e50      	subs	r0, r2, #1
 80022ce:	2a01      	cmp	r2, #1
 80022d0:	d100      	bne.n	80022d4 <__aeabi_dsub+0x1f0>
 80022d2:	e1a8      	b.n	8002626 <__aeabi_dsub+0x542>
 80022d4:	4c59      	ldr	r4, [pc, #356]	; (800243c <__aeabi_dsub+0x358>)
 80022d6:	42a2      	cmp	r2, r4
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x1f8>
 80022da:	e087      	b.n	80023ec <__aeabi_dsub+0x308>
 80022dc:	0002      	movs	r2, r0
 80022de:	e736      	b.n	800214e <__aeabi_dsub+0x6a>
 80022e0:	2201      	movs	r2, #1
 80022e2:	4056      	eors	r6, r2
 80022e4:	46b3      	mov	fp, r6
 80022e6:	42b5      	cmp	r5, r6
 80022e8:	d000      	beq.n	80022ec <__aeabi_dsub+0x208>
 80022ea:	e721      	b.n	8002130 <__aeabi_dsub+0x4c>
 80022ec:	4a55      	ldr	r2, [pc, #340]	; (8002444 <__aeabi_dsub+0x360>)
 80022ee:	4442      	add	r2, r8
 80022f0:	2a00      	cmp	r2, #0
 80022f2:	d100      	bne.n	80022f6 <__aeabi_dsub+0x212>
 80022f4:	e0b5      	b.n	8002462 <__aeabi_dsub+0x37e>
 80022f6:	4642      	mov	r2, r8
 80022f8:	4644      	mov	r4, r8
 80022fa:	1a82      	subs	r2, r0, r2
 80022fc:	2c00      	cmp	r4, #0
 80022fe:	d100      	bne.n	8002302 <__aeabi_dsub+0x21e>
 8002300:	e138      	b.n	8002574 <__aeabi_dsub+0x490>
 8002302:	4e4e      	ldr	r6, [pc, #312]	; (800243c <__aeabi_dsub+0x358>)
 8002304:	42b0      	cmp	r0, r6
 8002306:	d100      	bne.n	800230a <__aeabi_dsub+0x226>
 8002308:	e1de      	b.n	80026c8 <__aeabi_dsub+0x5e4>
 800230a:	2680      	movs	r6, #128	; 0x80
 800230c:	4664      	mov	r4, ip
 800230e:	0436      	lsls	r6, r6, #16
 8002310:	4334      	orrs	r4, r6
 8002312:	46a4      	mov	ip, r4
 8002314:	2a38      	cmp	r2, #56	; 0x38
 8002316:	dd00      	ble.n	800231a <__aeabi_dsub+0x236>
 8002318:	e196      	b.n	8002648 <__aeabi_dsub+0x564>
 800231a:	2a1f      	cmp	r2, #31
 800231c:	dd00      	ble.n	8002320 <__aeabi_dsub+0x23c>
 800231e:	e224      	b.n	800276a <__aeabi_dsub+0x686>
 8002320:	2620      	movs	r6, #32
 8002322:	1ab4      	subs	r4, r6, r2
 8002324:	46a2      	mov	sl, r4
 8002326:	4664      	mov	r4, ip
 8002328:	4656      	mov	r6, sl
 800232a:	40b4      	lsls	r4, r6
 800232c:	46a1      	mov	r9, r4
 800232e:	001c      	movs	r4, r3
 8002330:	464e      	mov	r6, r9
 8002332:	40d4      	lsrs	r4, r2
 8002334:	4326      	orrs	r6, r4
 8002336:	0034      	movs	r4, r6
 8002338:	4656      	mov	r6, sl
 800233a:	40b3      	lsls	r3, r6
 800233c:	1e5e      	subs	r6, r3, #1
 800233e:	41b3      	sbcs	r3, r6
 8002340:	431c      	orrs	r4, r3
 8002342:	4663      	mov	r3, ip
 8002344:	40d3      	lsrs	r3, r2
 8002346:	18c9      	adds	r1, r1, r3
 8002348:	19e4      	adds	r4, r4, r7
 800234a:	42bc      	cmp	r4, r7
 800234c:	41bf      	sbcs	r7, r7
 800234e:	427f      	negs	r7, r7
 8002350:	46b9      	mov	r9, r7
 8002352:	4680      	mov	r8, r0
 8002354:	4489      	add	r9, r1
 8002356:	e0d8      	b.n	800250a <__aeabi_dsub+0x426>
 8002358:	4640      	mov	r0, r8
 800235a:	4c3b      	ldr	r4, [pc, #236]	; (8002448 <__aeabi_dsub+0x364>)
 800235c:	3001      	adds	r0, #1
 800235e:	4220      	tst	r0, r4
 8002360:	d000      	beq.n	8002364 <__aeabi_dsub+0x280>
 8002362:	e0b4      	b.n	80024ce <__aeabi_dsub+0x3ea>
 8002364:	4640      	mov	r0, r8
 8002366:	2800      	cmp	r0, #0
 8002368:	d000      	beq.n	800236c <__aeabi_dsub+0x288>
 800236a:	e144      	b.n	80025f6 <__aeabi_dsub+0x512>
 800236c:	4660      	mov	r0, ip
 800236e:	4318      	orrs	r0, r3
 8002370:	d100      	bne.n	8002374 <__aeabi_dsub+0x290>
 8002372:	e190      	b.n	8002696 <__aeabi_dsub+0x5b2>
 8002374:	0008      	movs	r0, r1
 8002376:	4338      	orrs	r0, r7
 8002378:	d000      	beq.n	800237c <__aeabi_dsub+0x298>
 800237a:	e1aa      	b.n	80026d2 <__aeabi_dsub+0x5ee>
 800237c:	4661      	mov	r1, ip
 800237e:	08db      	lsrs	r3, r3, #3
 8002380:	0749      	lsls	r1, r1, #29
 8002382:	430b      	orrs	r3, r1
 8002384:	4661      	mov	r1, ip
 8002386:	08cc      	lsrs	r4, r1, #3
 8002388:	e027      	b.n	80023da <__aeabi_dsub+0x2f6>
 800238a:	0008      	movs	r0, r1
 800238c:	4338      	orrs	r0, r7
 800238e:	d061      	beq.n	8002454 <__aeabi_dsub+0x370>
 8002390:	1e50      	subs	r0, r2, #1
 8002392:	2a01      	cmp	r2, #1
 8002394:	d100      	bne.n	8002398 <__aeabi_dsub+0x2b4>
 8002396:	e139      	b.n	800260c <__aeabi_dsub+0x528>
 8002398:	42a2      	cmp	r2, r4
 800239a:	d027      	beq.n	80023ec <__aeabi_dsub+0x308>
 800239c:	0002      	movs	r2, r0
 800239e:	e75d      	b.n	800225c <__aeabi_dsub+0x178>
 80023a0:	0002      	movs	r2, r0
 80023a2:	391f      	subs	r1, #31
 80023a4:	40ca      	lsrs	r2, r1
 80023a6:	0011      	movs	r1, r2
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d003      	beq.n	80023b4 <__aeabi_dsub+0x2d0>
 80023ac:	2240      	movs	r2, #64	; 0x40
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	4098      	lsls	r0, r3
 80023b2:	4304      	orrs	r4, r0
 80023b4:	1e63      	subs	r3, r4, #1
 80023b6:	419c      	sbcs	r4, r3
 80023b8:	2300      	movs	r3, #0
 80023ba:	4699      	mov	r9, r3
 80023bc:	4698      	mov	r8, r3
 80023be:	430c      	orrs	r4, r1
 80023c0:	0763      	lsls	r3, r4, #29
 80023c2:	d000      	beq.n	80023c6 <__aeabi_dsub+0x2e2>
 80023c4:	e712      	b.n	80021ec <__aeabi_dsub+0x108>
 80023c6:	464b      	mov	r3, r9
 80023c8:	464a      	mov	r2, r9
 80023ca:	08e4      	lsrs	r4, r4, #3
 80023cc:	075b      	lsls	r3, r3, #29
 80023ce:	4323      	orrs	r3, r4
 80023d0:	08d4      	lsrs	r4, r2, #3
 80023d2:	4642      	mov	r2, r8
 80023d4:	4919      	ldr	r1, [pc, #100]	; (800243c <__aeabi_dsub+0x358>)
 80023d6:	428a      	cmp	r2, r1
 80023d8:	d00e      	beq.n	80023f8 <__aeabi_dsub+0x314>
 80023da:	0324      	lsls	r4, r4, #12
 80023dc:	0552      	lsls	r2, r2, #21
 80023de:	0b24      	lsrs	r4, r4, #12
 80023e0:	0d52      	lsrs	r2, r2, #21
 80023e2:	e722      	b.n	800222a <__aeabi_dsub+0x146>
 80023e4:	000a      	movs	r2, r1
 80023e6:	2400      	movs	r4, #0
 80023e8:	2300      	movs	r3, #0
 80023ea:	e71e      	b.n	800222a <__aeabi_dsub+0x146>
 80023ec:	08db      	lsrs	r3, r3, #3
 80023ee:	4662      	mov	r2, ip
 80023f0:	0752      	lsls	r2, r2, #29
 80023f2:	4313      	orrs	r3, r2
 80023f4:	4662      	mov	r2, ip
 80023f6:	08d4      	lsrs	r4, r2, #3
 80023f8:	001a      	movs	r2, r3
 80023fa:	4322      	orrs	r2, r4
 80023fc:	d100      	bne.n	8002400 <__aeabi_dsub+0x31c>
 80023fe:	e1fc      	b.n	80027fa <__aeabi_dsub+0x716>
 8002400:	2280      	movs	r2, #128	; 0x80
 8002402:	0312      	lsls	r2, r2, #12
 8002404:	4314      	orrs	r4, r2
 8002406:	0324      	lsls	r4, r4, #12
 8002408:	4a0c      	ldr	r2, [pc, #48]	; (800243c <__aeabi_dsub+0x358>)
 800240a:	0b24      	lsrs	r4, r4, #12
 800240c:	e70d      	b.n	800222a <__aeabi_dsub+0x146>
 800240e:	0020      	movs	r0, r4
 8002410:	f000 fb74 	bl	8002afc <__clzsi2>
 8002414:	0001      	movs	r1, r0
 8002416:	3118      	adds	r1, #24
 8002418:	291f      	cmp	r1, #31
 800241a:	dc00      	bgt.n	800241e <__aeabi_dsub+0x33a>
 800241c:	e6c4      	b.n	80021a8 <__aeabi_dsub+0xc4>
 800241e:	3808      	subs	r0, #8
 8002420:	4084      	lsls	r4, r0
 8002422:	4643      	mov	r3, r8
 8002424:	0020      	movs	r0, r4
 8002426:	2400      	movs	r4, #0
 8002428:	4588      	cmp	r8, r1
 800242a:	dc00      	bgt.n	800242e <__aeabi_dsub+0x34a>
 800242c:	e6c8      	b.n	80021c0 <__aeabi_dsub+0xdc>
 800242e:	4a04      	ldr	r2, [pc, #16]	; (8002440 <__aeabi_dsub+0x35c>)
 8002430:	1a5b      	subs	r3, r3, r1
 8002432:	4010      	ands	r0, r2
 8002434:	4698      	mov	r8, r3
 8002436:	4681      	mov	r9, r0
 8002438:	e6d6      	b.n	80021e8 <__aeabi_dsub+0x104>
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	000007ff 	.word	0x000007ff
 8002440:	ff7fffff 	.word	0xff7fffff
 8002444:	fffff801 	.word	0xfffff801
 8002448:	000007fe 	.word	0x000007fe
 800244c:	430f      	orrs	r7, r1
 800244e:	1e7a      	subs	r2, r7, #1
 8002450:	4197      	sbcs	r7, r2
 8002452:	e691      	b.n	8002178 <__aeabi_dsub+0x94>
 8002454:	4661      	mov	r1, ip
 8002456:	08db      	lsrs	r3, r3, #3
 8002458:	0749      	lsls	r1, r1, #29
 800245a:	430b      	orrs	r3, r1
 800245c:	4661      	mov	r1, ip
 800245e:	08cc      	lsrs	r4, r1, #3
 8002460:	e7b8      	b.n	80023d4 <__aeabi_dsub+0x2f0>
 8002462:	4640      	mov	r0, r8
 8002464:	4cd3      	ldr	r4, [pc, #844]	; (80027b4 <__aeabi_dsub+0x6d0>)
 8002466:	3001      	adds	r0, #1
 8002468:	4220      	tst	r0, r4
 800246a:	d000      	beq.n	800246e <__aeabi_dsub+0x38a>
 800246c:	e0a2      	b.n	80025b4 <__aeabi_dsub+0x4d0>
 800246e:	4640      	mov	r0, r8
 8002470:	2800      	cmp	r0, #0
 8002472:	d000      	beq.n	8002476 <__aeabi_dsub+0x392>
 8002474:	e101      	b.n	800267a <__aeabi_dsub+0x596>
 8002476:	4660      	mov	r0, ip
 8002478:	4318      	orrs	r0, r3
 800247a:	d100      	bne.n	800247e <__aeabi_dsub+0x39a>
 800247c:	e15e      	b.n	800273c <__aeabi_dsub+0x658>
 800247e:	0008      	movs	r0, r1
 8002480:	4338      	orrs	r0, r7
 8002482:	d000      	beq.n	8002486 <__aeabi_dsub+0x3a2>
 8002484:	e15f      	b.n	8002746 <__aeabi_dsub+0x662>
 8002486:	4661      	mov	r1, ip
 8002488:	08db      	lsrs	r3, r3, #3
 800248a:	0749      	lsls	r1, r1, #29
 800248c:	430b      	orrs	r3, r1
 800248e:	4661      	mov	r1, ip
 8002490:	08cc      	lsrs	r4, r1, #3
 8002492:	e7a2      	b.n	80023da <__aeabi_dsub+0x2f6>
 8002494:	4dc8      	ldr	r5, [pc, #800]	; (80027b8 <__aeabi_dsub+0x6d4>)
 8002496:	42a8      	cmp	r0, r5
 8002498:	d100      	bne.n	800249c <__aeabi_dsub+0x3b8>
 800249a:	e0cf      	b.n	800263c <__aeabi_dsub+0x558>
 800249c:	2580      	movs	r5, #128	; 0x80
 800249e:	4664      	mov	r4, ip
 80024a0:	042d      	lsls	r5, r5, #16
 80024a2:	432c      	orrs	r4, r5
 80024a4:	46a4      	mov	ip, r4
 80024a6:	2a38      	cmp	r2, #56	; 0x38
 80024a8:	dc56      	bgt.n	8002558 <__aeabi_dsub+0x474>
 80024aa:	2a1f      	cmp	r2, #31
 80024ac:	dd00      	ble.n	80024b0 <__aeabi_dsub+0x3cc>
 80024ae:	e0d1      	b.n	8002654 <__aeabi_dsub+0x570>
 80024b0:	2520      	movs	r5, #32
 80024b2:	001e      	movs	r6, r3
 80024b4:	1aad      	subs	r5, r5, r2
 80024b6:	4664      	mov	r4, ip
 80024b8:	40ab      	lsls	r3, r5
 80024ba:	40ac      	lsls	r4, r5
 80024bc:	40d6      	lsrs	r6, r2
 80024be:	1e5d      	subs	r5, r3, #1
 80024c0:	41ab      	sbcs	r3, r5
 80024c2:	4334      	orrs	r4, r6
 80024c4:	4323      	orrs	r3, r4
 80024c6:	4664      	mov	r4, ip
 80024c8:	40d4      	lsrs	r4, r2
 80024ca:	1b09      	subs	r1, r1, r4
 80024cc:	e049      	b.n	8002562 <__aeabi_dsub+0x47e>
 80024ce:	4660      	mov	r0, ip
 80024d0:	1bdc      	subs	r4, r3, r7
 80024d2:	1a46      	subs	r6, r0, r1
 80024d4:	42a3      	cmp	r3, r4
 80024d6:	4180      	sbcs	r0, r0
 80024d8:	4240      	negs	r0, r0
 80024da:	4681      	mov	r9, r0
 80024dc:	0030      	movs	r0, r6
 80024de:	464e      	mov	r6, r9
 80024e0:	1b80      	subs	r0, r0, r6
 80024e2:	4681      	mov	r9, r0
 80024e4:	0200      	lsls	r0, r0, #8
 80024e6:	d476      	bmi.n	80025d6 <__aeabi_dsub+0x4f2>
 80024e8:	464b      	mov	r3, r9
 80024ea:	4323      	orrs	r3, r4
 80024ec:	d000      	beq.n	80024f0 <__aeabi_dsub+0x40c>
 80024ee:	e652      	b.n	8002196 <__aeabi_dsub+0xb2>
 80024f0:	2400      	movs	r4, #0
 80024f2:	2500      	movs	r5, #0
 80024f4:	e771      	b.n	80023da <__aeabi_dsub+0x2f6>
 80024f6:	4339      	orrs	r1, r7
 80024f8:	000c      	movs	r4, r1
 80024fa:	1e62      	subs	r2, r4, #1
 80024fc:	4194      	sbcs	r4, r2
 80024fe:	18e4      	adds	r4, r4, r3
 8002500:	429c      	cmp	r4, r3
 8002502:	419b      	sbcs	r3, r3
 8002504:	425b      	negs	r3, r3
 8002506:	4463      	add	r3, ip
 8002508:	4699      	mov	r9, r3
 800250a:	464b      	mov	r3, r9
 800250c:	021b      	lsls	r3, r3, #8
 800250e:	d400      	bmi.n	8002512 <__aeabi_dsub+0x42e>
 8002510:	e756      	b.n	80023c0 <__aeabi_dsub+0x2dc>
 8002512:	2301      	movs	r3, #1
 8002514:	469c      	mov	ip, r3
 8002516:	4ba8      	ldr	r3, [pc, #672]	; (80027b8 <__aeabi_dsub+0x6d4>)
 8002518:	44e0      	add	r8, ip
 800251a:	4598      	cmp	r8, r3
 800251c:	d038      	beq.n	8002590 <__aeabi_dsub+0x4ac>
 800251e:	464b      	mov	r3, r9
 8002520:	48a6      	ldr	r0, [pc, #664]	; (80027bc <__aeabi_dsub+0x6d8>)
 8002522:	2201      	movs	r2, #1
 8002524:	4003      	ands	r3, r0
 8002526:	0018      	movs	r0, r3
 8002528:	0863      	lsrs	r3, r4, #1
 800252a:	4014      	ands	r4, r2
 800252c:	431c      	orrs	r4, r3
 800252e:	07c3      	lsls	r3, r0, #31
 8002530:	431c      	orrs	r4, r3
 8002532:	0843      	lsrs	r3, r0, #1
 8002534:	4699      	mov	r9, r3
 8002536:	e657      	b.n	80021e8 <__aeabi_dsub+0x104>
 8002538:	0010      	movs	r0, r2
 800253a:	000e      	movs	r6, r1
 800253c:	3820      	subs	r0, #32
 800253e:	40c6      	lsrs	r6, r0
 8002540:	2a20      	cmp	r2, #32
 8002542:	d004      	beq.n	800254e <__aeabi_dsub+0x46a>
 8002544:	2040      	movs	r0, #64	; 0x40
 8002546:	1a82      	subs	r2, r0, r2
 8002548:	4091      	lsls	r1, r2
 800254a:	430f      	orrs	r7, r1
 800254c:	46b9      	mov	r9, r7
 800254e:	464f      	mov	r7, r9
 8002550:	1e7a      	subs	r2, r7, #1
 8002552:	4197      	sbcs	r7, r2
 8002554:	4337      	orrs	r7, r6
 8002556:	e60f      	b.n	8002178 <__aeabi_dsub+0x94>
 8002558:	4662      	mov	r2, ip
 800255a:	431a      	orrs	r2, r3
 800255c:	0013      	movs	r3, r2
 800255e:	1e5a      	subs	r2, r3, #1
 8002560:	4193      	sbcs	r3, r2
 8002562:	1afc      	subs	r4, r7, r3
 8002564:	42a7      	cmp	r7, r4
 8002566:	41bf      	sbcs	r7, r7
 8002568:	427f      	negs	r7, r7
 800256a:	1bcb      	subs	r3, r1, r7
 800256c:	4699      	mov	r9, r3
 800256e:	465d      	mov	r5, fp
 8002570:	4680      	mov	r8, r0
 8002572:	e608      	b.n	8002186 <__aeabi_dsub+0xa2>
 8002574:	4666      	mov	r6, ip
 8002576:	431e      	orrs	r6, r3
 8002578:	d100      	bne.n	800257c <__aeabi_dsub+0x498>
 800257a:	e0be      	b.n	80026fa <__aeabi_dsub+0x616>
 800257c:	1e56      	subs	r6, r2, #1
 800257e:	2a01      	cmp	r2, #1
 8002580:	d100      	bne.n	8002584 <__aeabi_dsub+0x4a0>
 8002582:	e109      	b.n	8002798 <__aeabi_dsub+0x6b4>
 8002584:	4c8c      	ldr	r4, [pc, #560]	; (80027b8 <__aeabi_dsub+0x6d4>)
 8002586:	42a2      	cmp	r2, r4
 8002588:	d100      	bne.n	800258c <__aeabi_dsub+0x4a8>
 800258a:	e119      	b.n	80027c0 <__aeabi_dsub+0x6dc>
 800258c:	0032      	movs	r2, r6
 800258e:	e6c1      	b.n	8002314 <__aeabi_dsub+0x230>
 8002590:	4642      	mov	r2, r8
 8002592:	2400      	movs	r4, #0
 8002594:	2300      	movs	r3, #0
 8002596:	e648      	b.n	800222a <__aeabi_dsub+0x146>
 8002598:	2020      	movs	r0, #32
 800259a:	000c      	movs	r4, r1
 800259c:	1a80      	subs	r0, r0, r2
 800259e:	003e      	movs	r6, r7
 80025a0:	4087      	lsls	r7, r0
 80025a2:	4084      	lsls	r4, r0
 80025a4:	40d6      	lsrs	r6, r2
 80025a6:	1e78      	subs	r0, r7, #1
 80025a8:	4187      	sbcs	r7, r0
 80025aa:	40d1      	lsrs	r1, r2
 80025ac:	4334      	orrs	r4, r6
 80025ae:	433c      	orrs	r4, r7
 80025b0:	448c      	add	ip, r1
 80025b2:	e7a4      	b.n	80024fe <__aeabi_dsub+0x41a>
 80025b4:	4a80      	ldr	r2, [pc, #512]	; (80027b8 <__aeabi_dsub+0x6d4>)
 80025b6:	4290      	cmp	r0, r2
 80025b8:	d100      	bne.n	80025bc <__aeabi_dsub+0x4d8>
 80025ba:	e0e9      	b.n	8002790 <__aeabi_dsub+0x6ac>
 80025bc:	19df      	adds	r7, r3, r7
 80025be:	429f      	cmp	r7, r3
 80025c0:	419b      	sbcs	r3, r3
 80025c2:	4461      	add	r1, ip
 80025c4:	425b      	negs	r3, r3
 80025c6:	18c9      	adds	r1, r1, r3
 80025c8:	07cc      	lsls	r4, r1, #31
 80025ca:	087f      	lsrs	r7, r7, #1
 80025cc:	084b      	lsrs	r3, r1, #1
 80025ce:	4699      	mov	r9, r3
 80025d0:	4680      	mov	r8, r0
 80025d2:	433c      	orrs	r4, r7
 80025d4:	e6f4      	b.n	80023c0 <__aeabi_dsub+0x2dc>
 80025d6:	1afc      	subs	r4, r7, r3
 80025d8:	42a7      	cmp	r7, r4
 80025da:	41bf      	sbcs	r7, r7
 80025dc:	4663      	mov	r3, ip
 80025de:	427f      	negs	r7, r7
 80025e0:	1ac9      	subs	r1, r1, r3
 80025e2:	1bcb      	subs	r3, r1, r7
 80025e4:	4699      	mov	r9, r3
 80025e6:	465d      	mov	r5, fp
 80025e8:	e5d5      	b.n	8002196 <__aeabi_dsub+0xb2>
 80025ea:	08ff      	lsrs	r7, r7, #3
 80025ec:	074b      	lsls	r3, r1, #29
 80025ee:	465d      	mov	r5, fp
 80025f0:	433b      	orrs	r3, r7
 80025f2:	08cc      	lsrs	r4, r1, #3
 80025f4:	e6ee      	b.n	80023d4 <__aeabi_dsub+0x2f0>
 80025f6:	4662      	mov	r2, ip
 80025f8:	431a      	orrs	r2, r3
 80025fa:	d000      	beq.n	80025fe <__aeabi_dsub+0x51a>
 80025fc:	e082      	b.n	8002704 <__aeabi_dsub+0x620>
 80025fe:	000b      	movs	r3, r1
 8002600:	433b      	orrs	r3, r7
 8002602:	d11b      	bne.n	800263c <__aeabi_dsub+0x558>
 8002604:	2480      	movs	r4, #128	; 0x80
 8002606:	2500      	movs	r5, #0
 8002608:	0324      	lsls	r4, r4, #12
 800260a:	e6f9      	b.n	8002400 <__aeabi_dsub+0x31c>
 800260c:	19dc      	adds	r4, r3, r7
 800260e:	429c      	cmp	r4, r3
 8002610:	419b      	sbcs	r3, r3
 8002612:	4461      	add	r1, ip
 8002614:	4689      	mov	r9, r1
 8002616:	425b      	negs	r3, r3
 8002618:	4499      	add	r9, r3
 800261a:	464b      	mov	r3, r9
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	d444      	bmi.n	80026aa <__aeabi_dsub+0x5c6>
 8002620:	2301      	movs	r3, #1
 8002622:	4698      	mov	r8, r3
 8002624:	e6cc      	b.n	80023c0 <__aeabi_dsub+0x2dc>
 8002626:	1bdc      	subs	r4, r3, r7
 8002628:	4662      	mov	r2, ip
 800262a:	42a3      	cmp	r3, r4
 800262c:	419b      	sbcs	r3, r3
 800262e:	1a51      	subs	r1, r2, r1
 8002630:	425b      	negs	r3, r3
 8002632:	1acb      	subs	r3, r1, r3
 8002634:	4699      	mov	r9, r3
 8002636:	2301      	movs	r3, #1
 8002638:	4698      	mov	r8, r3
 800263a:	e5a4      	b.n	8002186 <__aeabi_dsub+0xa2>
 800263c:	08ff      	lsrs	r7, r7, #3
 800263e:	074b      	lsls	r3, r1, #29
 8002640:	465d      	mov	r5, fp
 8002642:	433b      	orrs	r3, r7
 8002644:	08cc      	lsrs	r4, r1, #3
 8002646:	e6d7      	b.n	80023f8 <__aeabi_dsub+0x314>
 8002648:	4662      	mov	r2, ip
 800264a:	431a      	orrs	r2, r3
 800264c:	0014      	movs	r4, r2
 800264e:	1e63      	subs	r3, r4, #1
 8002650:	419c      	sbcs	r4, r3
 8002652:	e679      	b.n	8002348 <__aeabi_dsub+0x264>
 8002654:	0015      	movs	r5, r2
 8002656:	4664      	mov	r4, ip
 8002658:	3d20      	subs	r5, #32
 800265a:	40ec      	lsrs	r4, r5
 800265c:	46a0      	mov	r8, r4
 800265e:	2a20      	cmp	r2, #32
 8002660:	d005      	beq.n	800266e <__aeabi_dsub+0x58a>
 8002662:	2540      	movs	r5, #64	; 0x40
 8002664:	4664      	mov	r4, ip
 8002666:	1aaa      	subs	r2, r5, r2
 8002668:	4094      	lsls	r4, r2
 800266a:	4323      	orrs	r3, r4
 800266c:	469a      	mov	sl, r3
 800266e:	4654      	mov	r4, sl
 8002670:	1e63      	subs	r3, r4, #1
 8002672:	419c      	sbcs	r4, r3
 8002674:	4643      	mov	r3, r8
 8002676:	4323      	orrs	r3, r4
 8002678:	e773      	b.n	8002562 <__aeabi_dsub+0x47e>
 800267a:	4662      	mov	r2, ip
 800267c:	431a      	orrs	r2, r3
 800267e:	d023      	beq.n	80026c8 <__aeabi_dsub+0x5e4>
 8002680:	000a      	movs	r2, r1
 8002682:	433a      	orrs	r2, r7
 8002684:	d000      	beq.n	8002688 <__aeabi_dsub+0x5a4>
 8002686:	e0a0      	b.n	80027ca <__aeabi_dsub+0x6e6>
 8002688:	4662      	mov	r2, ip
 800268a:	08db      	lsrs	r3, r3, #3
 800268c:	0752      	lsls	r2, r2, #29
 800268e:	4313      	orrs	r3, r2
 8002690:	4662      	mov	r2, ip
 8002692:	08d4      	lsrs	r4, r2, #3
 8002694:	e6b0      	b.n	80023f8 <__aeabi_dsub+0x314>
 8002696:	000b      	movs	r3, r1
 8002698:	433b      	orrs	r3, r7
 800269a:	d100      	bne.n	800269e <__aeabi_dsub+0x5ba>
 800269c:	e728      	b.n	80024f0 <__aeabi_dsub+0x40c>
 800269e:	08ff      	lsrs	r7, r7, #3
 80026a0:	074b      	lsls	r3, r1, #29
 80026a2:	465d      	mov	r5, fp
 80026a4:	433b      	orrs	r3, r7
 80026a6:	08cc      	lsrs	r4, r1, #3
 80026a8:	e697      	b.n	80023da <__aeabi_dsub+0x2f6>
 80026aa:	2302      	movs	r3, #2
 80026ac:	4698      	mov	r8, r3
 80026ae:	e736      	b.n	800251e <__aeabi_dsub+0x43a>
 80026b0:	1afc      	subs	r4, r7, r3
 80026b2:	42a7      	cmp	r7, r4
 80026b4:	41bf      	sbcs	r7, r7
 80026b6:	4663      	mov	r3, ip
 80026b8:	427f      	negs	r7, r7
 80026ba:	1ac9      	subs	r1, r1, r3
 80026bc:	1bcb      	subs	r3, r1, r7
 80026be:	4699      	mov	r9, r3
 80026c0:	2301      	movs	r3, #1
 80026c2:	465d      	mov	r5, fp
 80026c4:	4698      	mov	r8, r3
 80026c6:	e55e      	b.n	8002186 <__aeabi_dsub+0xa2>
 80026c8:	074b      	lsls	r3, r1, #29
 80026ca:	08ff      	lsrs	r7, r7, #3
 80026cc:	433b      	orrs	r3, r7
 80026ce:	08cc      	lsrs	r4, r1, #3
 80026d0:	e692      	b.n	80023f8 <__aeabi_dsub+0x314>
 80026d2:	1bdc      	subs	r4, r3, r7
 80026d4:	4660      	mov	r0, ip
 80026d6:	42a3      	cmp	r3, r4
 80026d8:	41b6      	sbcs	r6, r6
 80026da:	1a40      	subs	r0, r0, r1
 80026dc:	4276      	negs	r6, r6
 80026de:	1b80      	subs	r0, r0, r6
 80026e0:	4681      	mov	r9, r0
 80026e2:	0200      	lsls	r0, r0, #8
 80026e4:	d560      	bpl.n	80027a8 <__aeabi_dsub+0x6c4>
 80026e6:	1afc      	subs	r4, r7, r3
 80026e8:	42a7      	cmp	r7, r4
 80026ea:	41bf      	sbcs	r7, r7
 80026ec:	4663      	mov	r3, ip
 80026ee:	427f      	negs	r7, r7
 80026f0:	1ac9      	subs	r1, r1, r3
 80026f2:	1bcb      	subs	r3, r1, r7
 80026f4:	4699      	mov	r9, r3
 80026f6:	465d      	mov	r5, fp
 80026f8:	e576      	b.n	80021e8 <__aeabi_dsub+0x104>
 80026fa:	08ff      	lsrs	r7, r7, #3
 80026fc:	074b      	lsls	r3, r1, #29
 80026fe:	433b      	orrs	r3, r7
 8002700:	08cc      	lsrs	r4, r1, #3
 8002702:	e667      	b.n	80023d4 <__aeabi_dsub+0x2f0>
 8002704:	000a      	movs	r2, r1
 8002706:	08db      	lsrs	r3, r3, #3
 8002708:	433a      	orrs	r2, r7
 800270a:	d100      	bne.n	800270e <__aeabi_dsub+0x62a>
 800270c:	e66f      	b.n	80023ee <__aeabi_dsub+0x30a>
 800270e:	4662      	mov	r2, ip
 8002710:	0752      	lsls	r2, r2, #29
 8002712:	4313      	orrs	r3, r2
 8002714:	4662      	mov	r2, ip
 8002716:	08d4      	lsrs	r4, r2, #3
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	0312      	lsls	r2, r2, #12
 800271c:	4214      	tst	r4, r2
 800271e:	d007      	beq.n	8002730 <__aeabi_dsub+0x64c>
 8002720:	08c8      	lsrs	r0, r1, #3
 8002722:	4210      	tst	r0, r2
 8002724:	d104      	bne.n	8002730 <__aeabi_dsub+0x64c>
 8002726:	465d      	mov	r5, fp
 8002728:	0004      	movs	r4, r0
 800272a:	08fb      	lsrs	r3, r7, #3
 800272c:	0749      	lsls	r1, r1, #29
 800272e:	430b      	orrs	r3, r1
 8002730:	0f5a      	lsrs	r2, r3, #29
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	08db      	lsrs	r3, r3, #3
 8002736:	0752      	lsls	r2, r2, #29
 8002738:	4313      	orrs	r3, r2
 800273a:	e65d      	b.n	80023f8 <__aeabi_dsub+0x314>
 800273c:	074b      	lsls	r3, r1, #29
 800273e:	08ff      	lsrs	r7, r7, #3
 8002740:	433b      	orrs	r3, r7
 8002742:	08cc      	lsrs	r4, r1, #3
 8002744:	e649      	b.n	80023da <__aeabi_dsub+0x2f6>
 8002746:	19dc      	adds	r4, r3, r7
 8002748:	429c      	cmp	r4, r3
 800274a:	419b      	sbcs	r3, r3
 800274c:	4461      	add	r1, ip
 800274e:	4689      	mov	r9, r1
 8002750:	425b      	negs	r3, r3
 8002752:	4499      	add	r9, r3
 8002754:	464b      	mov	r3, r9
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	d400      	bmi.n	800275c <__aeabi_dsub+0x678>
 800275a:	e631      	b.n	80023c0 <__aeabi_dsub+0x2dc>
 800275c:	464a      	mov	r2, r9
 800275e:	4b17      	ldr	r3, [pc, #92]	; (80027bc <__aeabi_dsub+0x6d8>)
 8002760:	401a      	ands	r2, r3
 8002762:	2301      	movs	r3, #1
 8002764:	4691      	mov	r9, r2
 8002766:	4698      	mov	r8, r3
 8002768:	e62a      	b.n	80023c0 <__aeabi_dsub+0x2dc>
 800276a:	0016      	movs	r6, r2
 800276c:	4664      	mov	r4, ip
 800276e:	3e20      	subs	r6, #32
 8002770:	40f4      	lsrs	r4, r6
 8002772:	46a0      	mov	r8, r4
 8002774:	2a20      	cmp	r2, #32
 8002776:	d005      	beq.n	8002784 <__aeabi_dsub+0x6a0>
 8002778:	2640      	movs	r6, #64	; 0x40
 800277a:	4664      	mov	r4, ip
 800277c:	1ab2      	subs	r2, r6, r2
 800277e:	4094      	lsls	r4, r2
 8002780:	4323      	orrs	r3, r4
 8002782:	469a      	mov	sl, r3
 8002784:	4654      	mov	r4, sl
 8002786:	1e63      	subs	r3, r4, #1
 8002788:	419c      	sbcs	r4, r3
 800278a:	4643      	mov	r3, r8
 800278c:	431c      	orrs	r4, r3
 800278e:	e5db      	b.n	8002348 <__aeabi_dsub+0x264>
 8002790:	0002      	movs	r2, r0
 8002792:	2400      	movs	r4, #0
 8002794:	2300      	movs	r3, #0
 8002796:	e548      	b.n	800222a <__aeabi_dsub+0x146>
 8002798:	19dc      	adds	r4, r3, r7
 800279a:	42bc      	cmp	r4, r7
 800279c:	41bf      	sbcs	r7, r7
 800279e:	4461      	add	r1, ip
 80027a0:	4689      	mov	r9, r1
 80027a2:	427f      	negs	r7, r7
 80027a4:	44b9      	add	r9, r7
 80027a6:	e738      	b.n	800261a <__aeabi_dsub+0x536>
 80027a8:	464b      	mov	r3, r9
 80027aa:	4323      	orrs	r3, r4
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x6cc>
 80027ae:	e69f      	b.n	80024f0 <__aeabi_dsub+0x40c>
 80027b0:	e606      	b.n	80023c0 <__aeabi_dsub+0x2dc>
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	000007fe 	.word	0x000007fe
 80027b8:	000007ff 	.word	0x000007ff
 80027bc:	ff7fffff 	.word	0xff7fffff
 80027c0:	08ff      	lsrs	r7, r7, #3
 80027c2:	074b      	lsls	r3, r1, #29
 80027c4:	433b      	orrs	r3, r7
 80027c6:	08cc      	lsrs	r4, r1, #3
 80027c8:	e616      	b.n	80023f8 <__aeabi_dsub+0x314>
 80027ca:	4662      	mov	r2, ip
 80027cc:	08db      	lsrs	r3, r3, #3
 80027ce:	0752      	lsls	r2, r2, #29
 80027d0:	4313      	orrs	r3, r2
 80027d2:	4662      	mov	r2, ip
 80027d4:	08d4      	lsrs	r4, r2, #3
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	0312      	lsls	r2, r2, #12
 80027da:	4214      	tst	r4, r2
 80027dc:	d007      	beq.n	80027ee <__aeabi_dsub+0x70a>
 80027de:	08c8      	lsrs	r0, r1, #3
 80027e0:	4210      	tst	r0, r2
 80027e2:	d104      	bne.n	80027ee <__aeabi_dsub+0x70a>
 80027e4:	465d      	mov	r5, fp
 80027e6:	0004      	movs	r4, r0
 80027e8:	08fb      	lsrs	r3, r7, #3
 80027ea:	0749      	lsls	r1, r1, #29
 80027ec:	430b      	orrs	r3, r1
 80027ee:	0f5a      	lsrs	r2, r3, #29
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	0752      	lsls	r2, r2, #29
 80027f4:	08db      	lsrs	r3, r3, #3
 80027f6:	4313      	orrs	r3, r2
 80027f8:	e5fe      	b.n	80023f8 <__aeabi_dsub+0x314>
 80027fa:	2300      	movs	r3, #0
 80027fc:	4a01      	ldr	r2, [pc, #4]	; (8002804 <__aeabi_dsub+0x720>)
 80027fe:	001c      	movs	r4, r3
 8002800:	e513      	b.n	800222a <__aeabi_dsub+0x146>
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	000007ff 	.word	0x000007ff

08002808 <__aeabi_dcmpun>:
 8002808:	b570      	push	{r4, r5, r6, lr}
 800280a:	0005      	movs	r5, r0
 800280c:	480c      	ldr	r0, [pc, #48]	; (8002840 <__aeabi_dcmpun+0x38>)
 800280e:	031c      	lsls	r4, r3, #12
 8002810:	0016      	movs	r6, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	030a      	lsls	r2, r1, #12
 8002816:	0049      	lsls	r1, r1, #1
 8002818:	0b12      	lsrs	r2, r2, #12
 800281a:	0d49      	lsrs	r1, r1, #21
 800281c:	0b24      	lsrs	r4, r4, #12
 800281e:	0d5b      	lsrs	r3, r3, #21
 8002820:	4281      	cmp	r1, r0
 8002822:	d008      	beq.n	8002836 <__aeabi_dcmpun+0x2e>
 8002824:	4a06      	ldr	r2, [pc, #24]	; (8002840 <__aeabi_dcmpun+0x38>)
 8002826:	2000      	movs	r0, #0
 8002828:	4293      	cmp	r3, r2
 800282a:	d103      	bne.n	8002834 <__aeabi_dcmpun+0x2c>
 800282c:	0020      	movs	r0, r4
 800282e:	4330      	orrs	r0, r6
 8002830:	1e43      	subs	r3, r0, #1
 8002832:	4198      	sbcs	r0, r3
 8002834:	bd70      	pop	{r4, r5, r6, pc}
 8002836:	2001      	movs	r0, #1
 8002838:	432a      	orrs	r2, r5
 800283a:	d1fb      	bne.n	8002834 <__aeabi_dcmpun+0x2c>
 800283c:	e7f2      	b.n	8002824 <__aeabi_dcmpun+0x1c>
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	000007ff 	.word	0x000007ff

08002844 <__aeabi_d2iz>:
 8002844:	000a      	movs	r2, r1
 8002846:	b530      	push	{r4, r5, lr}
 8002848:	4c13      	ldr	r4, [pc, #76]	; (8002898 <__aeabi_d2iz+0x54>)
 800284a:	0053      	lsls	r3, r2, #1
 800284c:	0309      	lsls	r1, r1, #12
 800284e:	0005      	movs	r5, r0
 8002850:	0b09      	lsrs	r1, r1, #12
 8002852:	2000      	movs	r0, #0
 8002854:	0d5b      	lsrs	r3, r3, #21
 8002856:	0fd2      	lsrs	r2, r2, #31
 8002858:	42a3      	cmp	r3, r4
 800285a:	dd04      	ble.n	8002866 <__aeabi_d2iz+0x22>
 800285c:	480f      	ldr	r0, [pc, #60]	; (800289c <__aeabi_d2iz+0x58>)
 800285e:	4283      	cmp	r3, r0
 8002860:	dd02      	ble.n	8002868 <__aeabi_d2iz+0x24>
 8002862:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <__aeabi_d2iz+0x5c>)
 8002864:	18d0      	adds	r0, r2, r3
 8002866:	bd30      	pop	{r4, r5, pc}
 8002868:	2080      	movs	r0, #128	; 0x80
 800286a:	0340      	lsls	r0, r0, #13
 800286c:	4301      	orrs	r1, r0
 800286e:	480d      	ldr	r0, [pc, #52]	; (80028a4 <__aeabi_d2iz+0x60>)
 8002870:	1ac0      	subs	r0, r0, r3
 8002872:	281f      	cmp	r0, #31
 8002874:	dd08      	ble.n	8002888 <__aeabi_d2iz+0x44>
 8002876:	480c      	ldr	r0, [pc, #48]	; (80028a8 <__aeabi_d2iz+0x64>)
 8002878:	1ac3      	subs	r3, r0, r3
 800287a:	40d9      	lsrs	r1, r3
 800287c:	000b      	movs	r3, r1
 800287e:	4258      	negs	r0, r3
 8002880:	2a00      	cmp	r2, #0
 8002882:	d1f0      	bne.n	8002866 <__aeabi_d2iz+0x22>
 8002884:	0018      	movs	r0, r3
 8002886:	e7ee      	b.n	8002866 <__aeabi_d2iz+0x22>
 8002888:	4c08      	ldr	r4, [pc, #32]	; (80028ac <__aeabi_d2iz+0x68>)
 800288a:	40c5      	lsrs	r5, r0
 800288c:	46a4      	mov	ip, r4
 800288e:	4463      	add	r3, ip
 8002890:	4099      	lsls	r1, r3
 8002892:	000b      	movs	r3, r1
 8002894:	432b      	orrs	r3, r5
 8002896:	e7f2      	b.n	800287e <__aeabi_d2iz+0x3a>
 8002898:	000003fe 	.word	0x000003fe
 800289c:	0000041d 	.word	0x0000041d
 80028a0:	7fffffff 	.word	0x7fffffff
 80028a4:	00000433 	.word	0x00000433
 80028a8:	00000413 	.word	0x00000413
 80028ac:	fffffbed 	.word	0xfffffbed

080028b0 <__aeabi_i2d>:
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	2800      	cmp	r0, #0
 80028b4:	d016      	beq.n	80028e4 <__aeabi_i2d+0x34>
 80028b6:	17c3      	asrs	r3, r0, #31
 80028b8:	18c5      	adds	r5, r0, r3
 80028ba:	405d      	eors	r5, r3
 80028bc:	0fc4      	lsrs	r4, r0, #31
 80028be:	0028      	movs	r0, r5
 80028c0:	f000 f91c 	bl	8002afc <__clzsi2>
 80028c4:	4a11      	ldr	r2, [pc, #68]	; (800290c <__aeabi_i2d+0x5c>)
 80028c6:	1a12      	subs	r2, r2, r0
 80028c8:	280a      	cmp	r0, #10
 80028ca:	dc16      	bgt.n	80028fa <__aeabi_i2d+0x4a>
 80028cc:	0003      	movs	r3, r0
 80028ce:	002e      	movs	r6, r5
 80028d0:	3315      	adds	r3, #21
 80028d2:	409e      	lsls	r6, r3
 80028d4:	230b      	movs	r3, #11
 80028d6:	1a18      	subs	r0, r3, r0
 80028d8:	40c5      	lsrs	r5, r0
 80028da:	0552      	lsls	r2, r2, #21
 80028dc:	032d      	lsls	r5, r5, #12
 80028de:	0b2d      	lsrs	r5, r5, #12
 80028e0:	0d53      	lsrs	r3, r2, #21
 80028e2:	e003      	b.n	80028ec <__aeabi_i2d+0x3c>
 80028e4:	2400      	movs	r4, #0
 80028e6:	2300      	movs	r3, #0
 80028e8:	2500      	movs	r5, #0
 80028ea:	2600      	movs	r6, #0
 80028ec:	051b      	lsls	r3, r3, #20
 80028ee:	432b      	orrs	r3, r5
 80028f0:	07e4      	lsls	r4, r4, #31
 80028f2:	4323      	orrs	r3, r4
 80028f4:	0030      	movs	r0, r6
 80028f6:	0019      	movs	r1, r3
 80028f8:	bd70      	pop	{r4, r5, r6, pc}
 80028fa:	380b      	subs	r0, #11
 80028fc:	4085      	lsls	r5, r0
 80028fe:	0552      	lsls	r2, r2, #21
 8002900:	032d      	lsls	r5, r5, #12
 8002902:	2600      	movs	r6, #0
 8002904:	0b2d      	lsrs	r5, r5, #12
 8002906:	0d53      	lsrs	r3, r2, #21
 8002908:	e7f0      	b.n	80028ec <__aeabi_i2d+0x3c>
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	0000041e 	.word	0x0000041e

08002910 <__aeabi_ui2d>:
 8002910:	b510      	push	{r4, lr}
 8002912:	1e04      	subs	r4, r0, #0
 8002914:	d010      	beq.n	8002938 <__aeabi_ui2d+0x28>
 8002916:	f000 f8f1 	bl	8002afc <__clzsi2>
 800291a:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <__aeabi_ui2d+0x48>)
 800291c:	1a1b      	subs	r3, r3, r0
 800291e:	280a      	cmp	r0, #10
 8002920:	dc11      	bgt.n	8002946 <__aeabi_ui2d+0x36>
 8002922:	220b      	movs	r2, #11
 8002924:	0021      	movs	r1, r4
 8002926:	1a12      	subs	r2, r2, r0
 8002928:	40d1      	lsrs	r1, r2
 800292a:	3015      	adds	r0, #21
 800292c:	030a      	lsls	r2, r1, #12
 800292e:	055b      	lsls	r3, r3, #21
 8002930:	4084      	lsls	r4, r0
 8002932:	0b12      	lsrs	r2, r2, #12
 8002934:	0d5b      	lsrs	r3, r3, #21
 8002936:	e001      	b.n	800293c <__aeabi_ui2d+0x2c>
 8002938:	2300      	movs	r3, #0
 800293a:	2200      	movs	r2, #0
 800293c:	051b      	lsls	r3, r3, #20
 800293e:	4313      	orrs	r3, r2
 8002940:	0020      	movs	r0, r4
 8002942:	0019      	movs	r1, r3
 8002944:	bd10      	pop	{r4, pc}
 8002946:	0022      	movs	r2, r4
 8002948:	380b      	subs	r0, #11
 800294a:	4082      	lsls	r2, r0
 800294c:	055b      	lsls	r3, r3, #21
 800294e:	0312      	lsls	r2, r2, #12
 8002950:	2400      	movs	r4, #0
 8002952:	0b12      	lsrs	r2, r2, #12
 8002954:	0d5b      	lsrs	r3, r3, #21
 8002956:	e7f1      	b.n	800293c <__aeabi_ui2d+0x2c>
 8002958:	0000041e 	.word	0x0000041e

0800295c <__aeabi_f2d>:
 800295c:	b570      	push	{r4, r5, r6, lr}
 800295e:	0043      	lsls	r3, r0, #1
 8002960:	0246      	lsls	r6, r0, #9
 8002962:	0fc4      	lsrs	r4, r0, #31
 8002964:	20fe      	movs	r0, #254	; 0xfe
 8002966:	0e1b      	lsrs	r3, r3, #24
 8002968:	1c59      	adds	r1, r3, #1
 800296a:	0a75      	lsrs	r5, r6, #9
 800296c:	4208      	tst	r0, r1
 800296e:	d00c      	beq.n	800298a <__aeabi_f2d+0x2e>
 8002970:	22e0      	movs	r2, #224	; 0xe0
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	4694      	mov	ip, r2
 8002976:	076d      	lsls	r5, r5, #29
 8002978:	0b36      	lsrs	r6, r6, #12
 800297a:	4463      	add	r3, ip
 800297c:	051b      	lsls	r3, r3, #20
 800297e:	4333      	orrs	r3, r6
 8002980:	07e4      	lsls	r4, r4, #31
 8002982:	4323      	orrs	r3, r4
 8002984:	0028      	movs	r0, r5
 8002986:	0019      	movs	r1, r3
 8002988:	bd70      	pop	{r4, r5, r6, pc}
 800298a:	2b00      	cmp	r3, #0
 800298c:	d114      	bne.n	80029b8 <__aeabi_f2d+0x5c>
 800298e:	2d00      	cmp	r5, #0
 8002990:	d01b      	beq.n	80029ca <__aeabi_f2d+0x6e>
 8002992:	0028      	movs	r0, r5
 8002994:	f000 f8b2 	bl	8002afc <__clzsi2>
 8002998:	280a      	cmp	r0, #10
 800299a:	dc1c      	bgt.n	80029d6 <__aeabi_f2d+0x7a>
 800299c:	230b      	movs	r3, #11
 800299e:	002e      	movs	r6, r5
 80029a0:	1a1b      	subs	r3, r3, r0
 80029a2:	40de      	lsrs	r6, r3
 80029a4:	0003      	movs	r3, r0
 80029a6:	3315      	adds	r3, #21
 80029a8:	409d      	lsls	r5, r3
 80029aa:	4a0e      	ldr	r2, [pc, #56]	; (80029e4 <__aeabi_f2d+0x88>)
 80029ac:	0336      	lsls	r6, r6, #12
 80029ae:	1a12      	subs	r2, r2, r0
 80029b0:	0552      	lsls	r2, r2, #21
 80029b2:	0b36      	lsrs	r6, r6, #12
 80029b4:	0d53      	lsrs	r3, r2, #21
 80029b6:	e7e1      	b.n	800297c <__aeabi_f2d+0x20>
 80029b8:	2d00      	cmp	r5, #0
 80029ba:	d009      	beq.n	80029d0 <__aeabi_f2d+0x74>
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	0b36      	lsrs	r6, r6, #12
 80029c0:	0312      	lsls	r2, r2, #12
 80029c2:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <__aeabi_f2d+0x8c>)
 80029c4:	076d      	lsls	r5, r5, #29
 80029c6:	4316      	orrs	r6, r2
 80029c8:	e7d8      	b.n	800297c <__aeabi_f2d+0x20>
 80029ca:	2300      	movs	r3, #0
 80029cc:	2600      	movs	r6, #0
 80029ce:	e7d5      	b.n	800297c <__aeabi_f2d+0x20>
 80029d0:	2600      	movs	r6, #0
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <__aeabi_f2d+0x8c>)
 80029d4:	e7d2      	b.n	800297c <__aeabi_f2d+0x20>
 80029d6:	0003      	movs	r3, r0
 80029d8:	3b0b      	subs	r3, #11
 80029da:	409d      	lsls	r5, r3
 80029dc:	002e      	movs	r6, r5
 80029de:	2500      	movs	r5, #0
 80029e0:	e7e3      	b.n	80029aa <__aeabi_f2d+0x4e>
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	00000389 	.word	0x00000389
 80029e8:	000007ff 	.word	0x000007ff

080029ec <__aeabi_d2f>:
 80029ec:	0002      	movs	r2, r0
 80029ee:	004b      	lsls	r3, r1, #1
 80029f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f2:	0d5b      	lsrs	r3, r3, #21
 80029f4:	030c      	lsls	r4, r1, #12
 80029f6:	4e3d      	ldr	r6, [pc, #244]	; (8002aec <__aeabi_d2f+0x100>)
 80029f8:	0a64      	lsrs	r4, r4, #9
 80029fa:	0f40      	lsrs	r0, r0, #29
 80029fc:	1c5f      	adds	r7, r3, #1
 80029fe:	0fc9      	lsrs	r1, r1, #31
 8002a00:	4304      	orrs	r4, r0
 8002a02:	00d5      	lsls	r5, r2, #3
 8002a04:	4237      	tst	r7, r6
 8002a06:	d00a      	beq.n	8002a1e <__aeabi_d2f+0x32>
 8002a08:	4839      	ldr	r0, [pc, #228]	; (8002af0 <__aeabi_d2f+0x104>)
 8002a0a:	181e      	adds	r6, r3, r0
 8002a0c:	2efe      	cmp	r6, #254	; 0xfe
 8002a0e:	dd16      	ble.n	8002a3e <__aeabi_d2f+0x52>
 8002a10:	20ff      	movs	r0, #255	; 0xff
 8002a12:	2400      	movs	r4, #0
 8002a14:	05c0      	lsls	r0, r0, #23
 8002a16:	4320      	orrs	r0, r4
 8002a18:	07c9      	lsls	r1, r1, #31
 8002a1a:	4308      	orrs	r0, r1
 8002a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <__aeabi_d2f+0x44>
 8002a22:	432c      	orrs	r4, r5
 8002a24:	d026      	beq.n	8002a74 <__aeabi_d2f+0x88>
 8002a26:	2205      	movs	r2, #5
 8002a28:	0192      	lsls	r2, r2, #6
 8002a2a:	0a54      	lsrs	r4, r2, #9
 8002a2c:	b2d8      	uxtb	r0, r3
 8002a2e:	e7f1      	b.n	8002a14 <__aeabi_d2f+0x28>
 8002a30:	4325      	orrs	r5, r4
 8002a32:	d0ed      	beq.n	8002a10 <__aeabi_d2f+0x24>
 8002a34:	2080      	movs	r0, #128	; 0x80
 8002a36:	03c0      	lsls	r0, r0, #15
 8002a38:	4304      	orrs	r4, r0
 8002a3a:	20ff      	movs	r0, #255	; 0xff
 8002a3c:	e7ea      	b.n	8002a14 <__aeabi_d2f+0x28>
 8002a3e:	2e00      	cmp	r6, #0
 8002a40:	dd1b      	ble.n	8002a7a <__aeabi_d2f+0x8e>
 8002a42:	0192      	lsls	r2, r2, #6
 8002a44:	1e53      	subs	r3, r2, #1
 8002a46:	419a      	sbcs	r2, r3
 8002a48:	00e4      	lsls	r4, r4, #3
 8002a4a:	0f6d      	lsrs	r5, r5, #29
 8002a4c:	4322      	orrs	r2, r4
 8002a4e:	432a      	orrs	r2, r5
 8002a50:	0753      	lsls	r3, r2, #29
 8002a52:	d048      	beq.n	8002ae6 <__aeabi_d2f+0xfa>
 8002a54:	230f      	movs	r3, #15
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d000      	beq.n	8002a5e <__aeabi_d2f+0x72>
 8002a5c:	3204      	adds	r2, #4
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	04db      	lsls	r3, r3, #19
 8002a62:	4013      	ands	r3, r2
 8002a64:	d03f      	beq.n	8002ae6 <__aeabi_d2f+0xfa>
 8002a66:	1c70      	adds	r0, r6, #1
 8002a68:	2efe      	cmp	r6, #254	; 0xfe
 8002a6a:	d0d1      	beq.n	8002a10 <__aeabi_d2f+0x24>
 8002a6c:	0192      	lsls	r2, r2, #6
 8002a6e:	0a54      	lsrs	r4, r2, #9
 8002a70:	b2c0      	uxtb	r0, r0
 8002a72:	e7cf      	b.n	8002a14 <__aeabi_d2f+0x28>
 8002a74:	2000      	movs	r0, #0
 8002a76:	2400      	movs	r4, #0
 8002a78:	e7cc      	b.n	8002a14 <__aeabi_d2f+0x28>
 8002a7a:	0032      	movs	r2, r6
 8002a7c:	3217      	adds	r2, #23
 8002a7e:	db22      	blt.n	8002ac6 <__aeabi_d2f+0xda>
 8002a80:	2080      	movs	r0, #128	; 0x80
 8002a82:	0400      	lsls	r0, r0, #16
 8002a84:	4320      	orrs	r0, r4
 8002a86:	241e      	movs	r4, #30
 8002a88:	1ba4      	subs	r4, r4, r6
 8002a8a:	2c1f      	cmp	r4, #31
 8002a8c:	dd1d      	ble.n	8002aca <__aeabi_d2f+0xde>
 8002a8e:	2202      	movs	r2, #2
 8002a90:	4252      	negs	r2, r2
 8002a92:	1b96      	subs	r6, r2, r6
 8002a94:	0002      	movs	r2, r0
 8002a96:	40f2      	lsrs	r2, r6
 8002a98:	0016      	movs	r6, r2
 8002a9a:	2c20      	cmp	r4, #32
 8002a9c:	d004      	beq.n	8002aa8 <__aeabi_d2f+0xbc>
 8002a9e:	4a15      	ldr	r2, [pc, #84]	; (8002af4 <__aeabi_d2f+0x108>)
 8002aa0:	4694      	mov	ip, r2
 8002aa2:	4463      	add	r3, ip
 8002aa4:	4098      	lsls	r0, r3
 8002aa6:	4305      	orrs	r5, r0
 8002aa8:	002a      	movs	r2, r5
 8002aaa:	1e53      	subs	r3, r2, #1
 8002aac:	419a      	sbcs	r2, r3
 8002aae:	4332      	orrs	r2, r6
 8002ab0:	2600      	movs	r6, #0
 8002ab2:	0753      	lsls	r3, r2, #29
 8002ab4:	d1ce      	bne.n	8002a54 <__aeabi_d2f+0x68>
 8002ab6:	2480      	movs	r4, #128	; 0x80
 8002ab8:	0013      	movs	r3, r2
 8002aba:	04e4      	lsls	r4, r4, #19
 8002abc:	2001      	movs	r0, #1
 8002abe:	4023      	ands	r3, r4
 8002ac0:	4222      	tst	r2, r4
 8002ac2:	d1d3      	bne.n	8002a6c <__aeabi_d2f+0x80>
 8002ac4:	e7b0      	b.n	8002a28 <__aeabi_d2f+0x3c>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e7ad      	b.n	8002a26 <__aeabi_d2f+0x3a>
 8002aca:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <__aeabi_d2f+0x10c>)
 8002acc:	4694      	mov	ip, r2
 8002ace:	002a      	movs	r2, r5
 8002ad0:	40e2      	lsrs	r2, r4
 8002ad2:	0014      	movs	r4, r2
 8002ad4:	002a      	movs	r2, r5
 8002ad6:	4463      	add	r3, ip
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	4098      	lsls	r0, r3
 8002adc:	1e55      	subs	r5, r2, #1
 8002ade:	41aa      	sbcs	r2, r5
 8002ae0:	4302      	orrs	r2, r0
 8002ae2:	4322      	orrs	r2, r4
 8002ae4:	e7e4      	b.n	8002ab0 <__aeabi_d2f+0xc4>
 8002ae6:	0033      	movs	r3, r6
 8002ae8:	e79e      	b.n	8002a28 <__aeabi_d2f+0x3c>
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	000007fe 	.word	0x000007fe
 8002af0:	fffffc80 	.word	0xfffffc80
 8002af4:	fffffca2 	.word	0xfffffca2
 8002af8:	fffffc82 	.word	0xfffffc82

08002afc <__clzsi2>:
 8002afc:	211c      	movs	r1, #28
 8002afe:	2301      	movs	r3, #1
 8002b00:	041b      	lsls	r3, r3, #16
 8002b02:	4298      	cmp	r0, r3
 8002b04:	d301      	bcc.n	8002b0a <__clzsi2+0xe>
 8002b06:	0c00      	lsrs	r0, r0, #16
 8002b08:	3910      	subs	r1, #16
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	4298      	cmp	r0, r3
 8002b0e:	d301      	bcc.n	8002b14 <__clzsi2+0x18>
 8002b10:	0a00      	lsrs	r0, r0, #8
 8002b12:	3908      	subs	r1, #8
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	4298      	cmp	r0, r3
 8002b18:	d301      	bcc.n	8002b1e <__clzsi2+0x22>
 8002b1a:	0900      	lsrs	r0, r0, #4
 8002b1c:	3904      	subs	r1, #4
 8002b1e:	a202      	add	r2, pc, #8	; (adr r2, 8002b28 <__clzsi2+0x2c>)
 8002b20:	5c10      	ldrb	r0, [r2, r0]
 8002b22:	1840      	adds	r0, r0, r1
 8002b24:	4770      	bx	lr
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	02020304 	.word	0x02020304
 8002b2c:	01010101 	.word	0x01010101
	...

08002b38 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	000a      	movs	r2, r1
 8002b42:	1cbb      	adds	r3, r7, #2
 8002b44:	801a      	strh	r2, [r3, #0]
    oldPos = newPos; //keep track of the last position in the buffer
 8002b46:	4b30      	ldr	r3, [pc, #192]	; (8002c08 <HAL_UARTEx_RxEventCallback+0xd0>)
 8002b48:	881a      	ldrh	r2, [r3, #0]
 8002b4a:	4b30      	ldr	r3, [pc, #192]	; (8002c0c <HAL_UARTEx_RxEventCallback+0xd4>)
 8002b4c:	801a      	strh	r2, [r3, #0]
    if(oldPos + Size > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8002b4e:	4b2f      	ldr	r3, [pc, #188]	; (8002c0c <HAL_UARTEx_RxEventCallback+0xd4>)
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	001a      	movs	r2, r3
 8002b54:	1cbb      	adds	r3, r7, #2
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	18d2      	adds	r2, r2, r3
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	dd2c      	ble.n	8002bbc <HAL_UARTEx_RxEventCallback+0x84>

        uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 8002b62:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <HAL_UARTEx_RxEventCallback+0xd4>)
 8002b64:	881a      	ldrh	r2, [r3, #0]
 8002b66:	240e      	movs	r4, #14
 8002b68:	193b      	adds	r3, r7, r4
 8002b6a:	2180      	movs	r1, #128	; 0x80
 8002b6c:	0089      	lsls	r1, r1, #2
 8002b6e:	1a8a      	subs	r2, r1, r2
 8002b70:	801a      	strh	r2, [r3, #0]
        memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8002b72:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <HAL_UARTEx_RxEventCallback+0xd4>)
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	001a      	movs	r2, r3
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002b7a:	18d0      	adds	r0, r2, r3
 8002b7c:	193b      	adds	r3, r7, r4
 8002b7e:	881a      	ldrh	r2, [r3, #0]
 8002b80:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002b82:	0019      	movs	r1, r3
 8002b84:	f003 fde0 	bl	8006748 <memcpy>

        oldPos = 0;  // point to the start of the buffer
 8002b88:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <HAL_UARTEx_RxEventCallback+0xd4>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	801a      	strh	r2, [r3, #0]
        memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (Size-datatocopy));  // copy the remaining data
 8002b8e:	193b      	adds	r3, r7, r4
 8002b90:	881a      	ldrh	r2, [r3, #0]
 8002b92:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002b94:	18d1      	adds	r1, r2, r3
 8002b96:	1cbb      	adds	r3, r7, #2
 8002b98:	881a      	ldrh	r2, [r3, #0]
 8002b9a:	193b      	adds	r3, r7, r4
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	001a      	movs	r2, r3
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f003 fdcf 	bl	8006748 <memcpy>
        newPos = (Size-datatocopy);  // update the position
 8002baa:	1cba      	adds	r2, r7, #2
 8002bac:	193b      	adds	r3, r7, r4
 8002bae:	8812      	ldrh	r2, [r2, #0]
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <HAL_UARTEx_RxEventCallback+0xd0>)
 8002bb8:	801a      	strh	r2, [r3, #0]
 8002bba:	e012      	b.n	8002be2 <HAL_UARTEx_RxEventCallback+0xaa>
    }
    else{
        memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, Size); //copy received data to the buffer
 8002bbc:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <HAL_UARTEx_RxEventCallback+0xd4>)
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	001a      	movs	r2, r3
 8002bc2:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002bc4:	18d0      	adds	r0, r2, r3
 8002bc6:	1cbb      	adds	r3, r7, #2
 8002bc8:	881a      	ldrh	r2, [r3, #0]
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002bcc:	0019      	movs	r1, r3
 8002bce:	f003 fdbb 	bl	8006748 <memcpy>
        newPos = Size+oldPos; //update buffer position
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <HAL_UARTEx_RxEventCallback+0xd4>)
 8002bd4:	881a      	ldrh	r2, [r3, #0]
 8002bd6:	1cbb      	adds	r3, r7, #2
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	18d3      	adds	r3, r2, r3
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_UARTEx_RxEventCallback+0xd0>)
 8002be0:	801a      	strh	r2, [r3, #0]

    }
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)RxBuffer, RxBuffer_SIZE); //re-enable the DMA interrupt
 8002be2:	490c      	ldr	r1, [pc, #48]	; (8002c14 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002be4:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <HAL_UARTEx_RxEventCallback+0xe0>)
 8002be6:	2240      	movs	r2, #64	; 0x40
 8002be8:	0018      	movs	r0, r3
 8002bea:	f003 fd06 	bl	80065fa <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT); //disable the half transfer interrupt
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_UARTEx_RxEventCallback+0xe4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_UARTEx_RxEventCallback+0xe4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2104      	movs	r1, #4
 8002bfa:	438a      	bics	r2, r1
 8002bfc:	601a      	str	r2, [r3, #0]
}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b005      	add	sp, #20
 8002c04:	bd90      	pop	{r4, r7, pc}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	20000352 	.word	0x20000352
 8002c0c:	20000350 	.word	0x20000350
 8002c10:	20000394 	.word	0x20000394
 8002c14:	20000354 	.word	0x20000354
 8002c18:	200001fc 	.word	0x200001fc
 8002c1c:	2000030c 	.word	0x2000030c

08002c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c22:	46ce      	mov	lr, r9
 8002c24:	4647      	mov	r7, r8
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b097      	sub	sp, #92	; 0x5c
 8002c2a:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c2c:	f001 f96a 	bl	8003f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c30:	f000 f8b6 	bl	8002da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c34:	f000 f994 	bl	8002f60 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c38:	f000 f974 	bl	8002f24 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002c3c:	f000 f942 	bl	8002ec4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002c40:	f000 f910 	bl	8002e64 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8002c44:	494c      	ldr	r1, [pc, #304]	; (8002d78 <main+0x158>)
 8002c46:	4b4d      	ldr	r3, [pc, #308]	; (8002d7c <main+0x15c>)
 8002c48:	2240      	movs	r2, #64	; 0x40
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f003 fcd5 	bl	80065fa <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8002c50:	4b4b      	ldr	r3, [pc, #300]	; (8002d80 <main+0x160>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	4b4a      	ldr	r3, [pc, #296]	; (8002d80 <main+0x160>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2104      	movs	r1, #4
 8002c5c:	438a      	bics	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]
  int Serialcnt = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  nmea_parse(&myData, DataBuffer);
 8002c64:	4a47      	ldr	r2, [pc, #284]	; (8002d84 <main+0x164>)
 8002c66:	4b48      	ldr	r3, [pc, #288]	; (8002d88 <main+0x168>)
 8002c68:	0011      	movs	r1, r2
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f000 fe92 	bl	8003994 <nmea_parse>

	      if(myData.fix == 1){ //if the GPS has a fix, print the data
 8002c70:	4b45      	ldr	r3, [pc, #276]	; (8002d88 <main+0x168>)
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d15c      	bne.n	8002d32 <main+0x112>
	          char * str = (char*)malloc(sizeof(char)*200);
 8002c78:	20c8      	movs	r0, #200	; 0xc8
 8002c7a:	f003 fd51 	bl	8006720 <malloc>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	617b      	str	r3, [r7, #20]
	          sprintf(str, "\r\n%d: Lat: %2.6f %c, Lon: %2.6f %c, Alt: %2.6f m, Satellites: %d HDOP: %f\r\n", Serialcnt, myData.latitude, myData.latSide, myData.longitude, myData.lonSide, myData.altitude, myData.satelliteCount, myData.hdop); // @suppress("Float formatting support")
 8002c82:	4b41      	ldr	r3, [pc, #260]	; (8002d88 <main+0x168>)
 8002c84:	681c      	ldr	r4, [r3, #0]
 8002c86:	685d      	ldr	r5, [r3, #4]
 8002c88:	4b3f      	ldr	r3, [pc, #252]	; (8002d88 <main+0x168>)
 8002c8a:	7a1b      	ldrb	r3, [r3, #8]
 8002c8c:	4698      	mov	r8, r3
 8002c8e:	4b3e      	ldr	r3, [pc, #248]	; (8002d88 <main+0x168>)
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	60ba      	str	r2, [r7, #8]
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <main+0x168>)
 8002c9a:	7e1b      	ldrb	r3, [r3, #24]
 8002c9c:	4699      	mov	r9, r3
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <main+0x168>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	1c18      	adds	r0, r3, #0
 8002ca4:	f7ff fe5a 	bl	800295c <__aeabi_f2d>
 8002ca8:	6038      	str	r0, [r7, #0]
 8002caa:	6079      	str	r1, [r7, #4]
 8002cac:	4b36      	ldr	r3, [pc, #216]	; (8002d88 <main+0x168>)
 8002cae:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8002cb0:	4b35      	ldr	r3, [pc, #212]	; (8002d88 <main+0x168>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	1c18      	adds	r0, r3, #0
 8002cb6:	f7ff fe51 	bl	800295c <__aeabi_f2d>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	000b      	movs	r3, r1
 8002cbe:	69f9      	ldr	r1, [r7, #28]
 8002cc0:	468c      	mov	ip, r1
 8002cc2:	4932      	ldr	r1, [pc, #200]	; (8002d8c <main+0x16c>)
 8002cc4:	6978      	ldr	r0, [r7, #20]
 8002cc6:	920c      	str	r2, [sp, #48]	; 0x30
 8002cc8:	930d      	str	r3, [sp, #52]	; 0x34
 8002cca:	960a      	str	r6, [sp, #40]	; 0x28
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	9208      	str	r2, [sp, #32]
 8002cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8002cd4:	464b      	mov	r3, r9
 8002cd6:	9306      	str	r3, [sp, #24]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	9204      	str	r2, [sp, #16]
 8002cde:	9305      	str	r3, [sp, #20]
 8002ce0:	4643      	mov	r3, r8
 8002ce2:	9302      	str	r3, [sp, #8]
 8002ce4:	9400      	str	r4, [sp, #0]
 8002ce6:	9501      	str	r5, [sp, #4]
 8002ce8:	4662      	mov	r2, ip
 8002cea:	f004 faa1 	bl	8007230 <siprintf>
	          HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7fd fa09 	bl	8000108 <strlen>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	23fa      	movs	r3, #250	; 0xfa
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	6979      	ldr	r1, [r7, #20]
 8002d00:	4823      	ldr	r0, [pc, #140]	; (8002d90 <main+0x170>)
 8002d02:	f002 fb89 	bl	8005418 <HAL_UART_Transmit>
	          //Transmit last measure time for troubleshooting
	          HAL_UART_Transmit(&huart2, (uint8_t *)myData.lastMeasure, strlen(myData.lastMeasure), 1000);
 8002d06:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <main+0x174>)
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f7fd f9fd 	bl	8000108 <strlen>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	23fa      	movs	r3, #250	; 0xfa
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	491f      	ldr	r1, [pc, #124]	; (8002d94 <main+0x174>)
 8002d18:	481d      	ldr	r0, [pc, #116]	; (8002d90 <main+0x170>)
 8002d1a:	f002 fb7d 	bl	8005418 <HAL_UART_Transmit>
	          HAL_Delay(1000);
 8002d1e:	23fa      	movs	r3, #250	; 0xfa
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	0018      	movs	r0, r3
 8002d24:	f001 f952 	bl	8003fcc <HAL_Delay>
	          free(str);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f003 fd02 	bl	8006734 <free>
 8002d30:	e01e      	b.n	8002d70 <main+0x150>
	      }
	      else{ //if the GPS doesn't have a fix, print a message
	          char *str = (char*)malloc(sizeof(char)*15);
 8002d32:	200f      	movs	r0, #15
 8002d34:	f003 fcf4 	bl	8006720 <malloc>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	61bb      	str	r3, [r7, #24]
	          sprintf(str, "%d: No fix\r\n", Serialcnt);
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	4916      	ldr	r1, [pc, #88]	; (8002d98 <main+0x178>)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	0018      	movs	r0, r3
 8002d44:	f004 fa74 	bl	8007230 <siprintf>
	          HAL_UART_Transmit(&huart2, str, strlen(str), 1000);
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f7fd f9dc 	bl	8000108 <strlen>
 8002d50:	0003      	movs	r3, r0
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	23fa      	movs	r3, #250	; 0xfa
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	69b9      	ldr	r1, [r7, #24]
 8002d5a:	480d      	ldr	r0, [pc, #52]	; (8002d90 <main+0x170>)
 8002d5c:	f002 fb5c 	bl	8005418 <HAL_UART_Transmit>
	          HAL_Delay(5000);
 8002d60:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <main+0x17c>)
 8002d62:	0018      	movs	r0, r3
 8002d64:	f001 f932 	bl	8003fcc <HAL_Delay>
	          free(str);
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f003 fce2 	bl	8006734 <free>
	      }
	      Serialcnt++;
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	3301      	adds	r3, #1
 8002d74:	61fb      	str	r3, [r7, #28]
	  nmea_parse(&myData, DataBuffer);
 8002d76:	e775      	b.n	8002c64 <main+0x44>
 8002d78:	20000354 	.word	0x20000354
 8002d7c:	200001fc 	.word	0x200001fc
 8002d80:	2000030c 	.word	0x2000030c
 8002d84:	20000394 	.word	0x20000394
 8002d88:	20000598 	.word	0x20000598
 8002d8c:	0800af50 	.word	0x0800af50
 8002d90:	20000284 	.word	0x20000284
 8002d94:	200005c4 	.word	0x200005c4
 8002d98:	0800af9c 	.word	0x0800af9c
 8002d9c:	00001388 	.word	0x00001388

08002da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002da0:	b590      	push	{r4, r7, lr}
 8002da2:	b095      	sub	sp, #84	; 0x54
 8002da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002da6:	2420      	movs	r4, #32
 8002da8:	193b      	adds	r3, r7, r4
 8002daa:	0018      	movs	r0, r3
 8002dac:	2330      	movs	r3, #48	; 0x30
 8002dae:	001a      	movs	r2, r3
 8002db0:	2100      	movs	r1, #0
 8002db2:	f003 fcd2 	bl	800675a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002db6:	2310      	movs	r3, #16
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	0018      	movs	r0, r3
 8002dbc:	2310      	movs	r3, #16
 8002dbe:	001a      	movs	r2, r3
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	f003 fcca 	bl	800675a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dc6:	003b      	movs	r3, r7
 8002dc8:	0018      	movs	r0, r3
 8002dca:	2310      	movs	r3, #16
 8002dcc:	001a      	movs	r2, r3
 8002dce:	2100      	movs	r1, #0
 8002dd0:	f003 fcc3 	bl	800675a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dd4:	0021      	movs	r1, r4
 8002dd6:	187b      	adds	r3, r7, r1
 8002dd8:	2202      	movs	r2, #2
 8002dda:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ddc:	187b      	adds	r3, r7, r1
 8002dde:	2201      	movs	r2, #1
 8002de0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002de2:	187b      	adds	r3, r7, r1
 8002de4:	2210      	movs	r2, #16
 8002de6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002de8:	187b      	adds	r3, r7, r1
 8002dea:	2202      	movs	r2, #2
 8002dec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002dee:	187b      	adds	r3, r7, r1
 8002df0:	2200      	movs	r2, #0
 8002df2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002df4:	187b      	adds	r3, r7, r1
 8002df6:	22a0      	movs	r2, #160	; 0xa0
 8002df8:	0392      	lsls	r2, r2, #14
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002dfc:	187b      	adds	r3, r7, r1
 8002dfe:	2200      	movs	r2, #0
 8002e00:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e02:	187b      	adds	r3, r7, r1
 8002e04:	0018      	movs	r0, r3
 8002e06:	f001 fd87 	bl	8004918 <HAL_RCC_OscConfig>
 8002e0a:	1e03      	subs	r3, r0, #0
 8002e0c:	d001      	beq.n	8002e12 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002e0e:	f000 f911 	bl	8003034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e12:	2110      	movs	r1, #16
 8002e14:	187b      	adds	r3, r7, r1
 8002e16:	2207      	movs	r2, #7
 8002e18:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e1a:	187b      	adds	r3, r7, r1
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e20:	187b      	adds	r3, r7, r1
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e26:	187b      	adds	r3, r7, r1
 8002e28:	2200      	movs	r2, #0
 8002e2a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002e2c:	187b      	adds	r3, r7, r1
 8002e2e:	2101      	movs	r1, #1
 8002e30:	0018      	movs	r0, r3
 8002e32:	f002 f88b 	bl	8004f4c <HAL_RCC_ClockConfig>
 8002e36:	1e03      	subs	r3, r0, #0
 8002e38:	d001      	beq.n	8002e3e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002e3a:	f000 f8fb 	bl	8003034 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e3e:	003b      	movs	r3, r7
 8002e40:	2201      	movs	r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002e44:	003b      	movs	r3, r7
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e4a:	003b      	movs	r3, r7
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f002 f9c1 	bl	80051d4 <HAL_RCCEx_PeriphCLKConfig>
 8002e52:	1e03      	subs	r3, r0, #0
 8002e54:	d001      	beq.n	8002e5a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002e56:	f000 f8ed 	bl	8003034 <Error_Handler>
  }
}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b015      	add	sp, #84	; 0x54
 8002e60:	bd90      	pop	{r4, r7, pc}
	...

08002e64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e68:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <MX_USART1_UART_Init+0x58>)
 8002e6a:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <MX_USART1_UART_Init+0x5c>)
 8002e6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002e6e:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <MX_USART1_UART_Init+0x58>)
 8002e70:	2296      	movs	r2, #150	; 0x96
 8002e72:	0192      	lsls	r2, r2, #6
 8002e74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e76:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <MX_USART1_UART_Init+0x58>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <MX_USART1_UART_Init+0x58>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e82:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <MX_USART1_UART_Init+0x58>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <MX_USART1_UART_Init+0x58>)
 8002e8a:	220c      	movs	r2, #12
 8002e8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <MX_USART1_UART_Init+0x58>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <MX_USART1_UART_Init+0x58>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <MX_USART1_UART_Init+0x58>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <MX_USART1_UART_Init+0x58>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <MX_USART1_UART_Init+0x58>)
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f002 fa61 	bl	8005370 <HAL_UART_Init>
 8002eae:	1e03      	subs	r3, r0, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002eb2:	f000 f8bf 	bl	8003034 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	200001fc 	.word	0x200001fc
 8002ec0:	40013800 	.word	0x40013800

08002ec4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ec8:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002eca:	4a15      	ldr	r2, [pc, #84]	; (8002f20 <MX_USART2_UART_Init+0x5c>)
 8002ecc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ece:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002ed0:	22e1      	movs	r2, #225	; 0xe1
 8002ed2:	0252      	lsls	r2, r2, #9
 8002ed4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ed6:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002edc:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002eea:	220c      	movs	r2, #12
 8002eec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef4:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <MX_USART2_UART_Init+0x58>)
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f002 fa31 	bl	8005370 <HAL_UART_Init>
 8002f0e:	1e03      	subs	r3, r0, #0
 8002f10:	d001      	beq.n	8002f16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f12:	f000 f88f 	bl	8003034 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000284 	.word	0x20000284
 8002f20:	40004400 	.word	0x40004400

08002f24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f2a:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <MX_DMA_Init+0x38>)
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <MX_DMA_Init+0x38>)
 8002f30:	2101      	movs	r1, #1
 8002f32:	430a      	orrs	r2, r1
 8002f34:	615a      	str	r2, [r3, #20]
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <MX_DMA_Init+0x38>)
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002f42:	2200      	movs	r2, #0
 8002f44:	2100      	movs	r1, #0
 8002f46:	200a      	movs	r0, #10
 8002f48:	f001 f910 	bl	800416c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002f4c:	200a      	movs	r0, #10
 8002f4e:	f001 f922 	bl	8004196 <HAL_NVIC_EnableIRQ>

}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b002      	add	sp, #8
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	40021000 	.word	0x40021000

08002f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b089      	sub	sp, #36	; 0x24
 8002f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f66:	240c      	movs	r4, #12
 8002f68:	193b      	adds	r3, r7, r4
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	2314      	movs	r3, #20
 8002f6e:	001a      	movs	r2, r3
 8002f70:	2100      	movs	r1, #0
 8002f72:	f003 fbf2 	bl	800675a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f76:	4b2d      	ldr	r3, [pc, #180]	; (800302c <MX_GPIO_Init+0xcc>)
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	4b2c      	ldr	r3, [pc, #176]	; (800302c <MX_GPIO_Init+0xcc>)
 8002f7c:	2180      	movs	r1, #128	; 0x80
 8002f7e:	0309      	lsls	r1, r1, #12
 8002f80:	430a      	orrs	r2, r1
 8002f82:	615a      	str	r2, [r3, #20]
 8002f84:	4b29      	ldr	r3, [pc, #164]	; (800302c <MX_GPIO_Init+0xcc>)
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	031b      	lsls	r3, r3, #12
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f92:	4b26      	ldr	r3, [pc, #152]	; (800302c <MX_GPIO_Init+0xcc>)
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	4b25      	ldr	r3, [pc, #148]	; (800302c <MX_GPIO_Init+0xcc>)
 8002f98:	2180      	movs	r1, #128	; 0x80
 8002f9a:	03c9      	lsls	r1, r1, #15
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	615a      	str	r2, [r3, #20]
 8002fa0:	4b22      	ldr	r3, [pc, #136]	; (800302c <MX_GPIO_Init+0xcc>)
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	03db      	lsls	r3, r3, #15
 8002fa8:	4013      	ands	r3, r2
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fae:	4b1f      	ldr	r3, [pc, #124]	; (800302c <MX_GPIO_Init+0xcc>)
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	4b1e      	ldr	r3, [pc, #120]	; (800302c <MX_GPIO_Init+0xcc>)
 8002fb4:	2180      	movs	r1, #128	; 0x80
 8002fb6:	0289      	lsls	r1, r1, #10
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	615a      	str	r2, [r3, #20]
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	; (800302c <MX_GPIO_Init+0xcc>)
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	029b      	lsls	r3, r3, #10
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002fca:	2390      	movs	r3, #144	; 0x90
 8002fcc:	05db      	lsls	r3, r3, #23
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2120      	movs	r1, #32
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f001 fc82 	bl	80048dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002fd8:	193b      	adds	r3, r7, r4
 8002fda:	2280      	movs	r2, #128	; 0x80
 8002fdc:	0192      	lsls	r2, r2, #6
 8002fde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fe0:	193b      	adds	r3, r7, r4
 8002fe2:	2284      	movs	r2, #132	; 0x84
 8002fe4:	0392      	lsls	r2, r2, #14
 8002fe6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	193b      	adds	r3, r7, r4
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	4a0f      	ldr	r2, [pc, #60]	; (8003030 <MX_GPIO_Init+0xd0>)
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	0010      	movs	r0, r2
 8002ff6:	f001 fb01 	bl	80045fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002ffa:	0021      	movs	r1, r4
 8002ffc:	187b      	adds	r3, r7, r1
 8002ffe:	2220      	movs	r2, #32
 8003000:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003002:	187b      	adds	r3, r7, r1
 8003004:	2201      	movs	r2, #1
 8003006:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	187b      	adds	r3, r7, r1
 800300a:	2200      	movs	r2, #0
 800300c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300e:	187b      	adds	r3, r7, r1
 8003010:	2200      	movs	r2, #0
 8003012:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003014:	187a      	adds	r2, r7, r1
 8003016:	2390      	movs	r3, #144	; 0x90
 8003018:	05db      	lsls	r3, r3, #23
 800301a:	0011      	movs	r1, r2
 800301c:	0018      	movs	r0, r3
 800301e:	f001 faed 	bl	80045fc <HAL_GPIO_Init>

}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	46bd      	mov	sp, r7
 8003026:	b009      	add	sp, #36	; 0x24
 8003028:	bd90      	pop	{r4, r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	40021000 	.word	0x40021000
 8003030:	48000800 	.word	0x48000800

08003034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003038:	b672      	cpsid	i
}
 800303a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800303c:	e7fe      	b.n	800303c <Error_Handler+0x8>

0800303e <gps_checksum>:


char *data[15];

int gps_checksum(char *nmea_data)
{
 800303e:	b590      	push	{r4, r7, lr}
 8003040:	b087      	sub	sp, #28
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	0018      	movs	r0, r3
 800304a:	f7fd f85d 	bl	8000108 <strlen>
 800304e:	0003      	movs	r3, r0
 8003050:	2b04      	cmp	r3, #4
 8003052:	d801      	bhi.n	8003058 <gps_checksum+0x1a>
 8003054:	2300      	movs	r3, #0
 8003056:	e03f      	b.n	80030d8 <gps_checksum+0x9a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	0018      	movs	r0, r3
 800305c:	f7fd f854 	bl	8000108 <strlen>
 8003060:	0003      	movs	r3, r0
 8003062:	3b04      	subs	r3, #4
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	18d3      	adds	r3, r2, r3
 8003068:	781a      	ldrb	r2, [r3, #0]
 800306a:	2408      	movs	r4, #8
 800306c:	193b      	adds	r3, r7, r4
 800306e:	701a      	strb	r2, [r3, #0]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	0018      	movs	r0, r3
 8003074:	f7fd f848 	bl	8000108 <strlen>
 8003078:	0003      	movs	r3, r0
 800307a:	3b03      	subs	r3, #3
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	18d3      	adds	r3, r2, r3
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	193b      	adds	r3, r7, r4
 8003084:	705a      	strb	r2, [r3, #1]
    int crc = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	e00a      	b.n	80030a6 <gps_checksum+0x68>
        crc ^= nmea_data[i];
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	18d3      	adds	r3, r2, r3
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	001a      	movs	r2, r3
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	4053      	eors	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	3301      	adds	r3, #1
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	0018      	movs	r0, r3
 80030aa:	f7fd f82d 	bl	8000108 <strlen>
 80030ae:	0003      	movs	r3, r0
 80030b0:	1f5a      	subs	r2, r3, #5
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d8eb      	bhi.n	8003090 <gps_checksum+0x52>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 80030b8:	2308      	movs	r3, #8
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	2210      	movs	r2, #16
 80030be:	2100      	movs	r1, #0
 80030c0:	0018      	movs	r0, r3
 80030c2:	f005 f867 	bl	8008194 <strtol>
 80030c6:	0003      	movs	r3, r0
 80030c8:	60fb      	str	r3, [r7, #12]
    if (crc == receivedHash) {
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d101      	bne.n	80030d6 <gps_checksum+0x98>
        return 1;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <gps_checksum+0x9a>
    }
    else{
        return 0;
 80030d6:	2300      	movs	r3, #0
    }
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b007      	add	sp, #28
 80030de:	bd90      	pop	{r4, r7, pc}

080030e0 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 80030e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e2:	b0b7      	sub	sp, #220	; 0xdc
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	22d4      	movs	r2, #212	; 0xd4
 80030ee:	18ba      	adds	r2, r7, r2
 80030f0:	6013      	str	r3, [r2, #0]
    memset(values, 0, sizeof(values));
 80030f2:	2320      	movs	r3, #32
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	2264      	movs	r2, #100	; 0x64
 80030f8:	2100      	movs	r1, #0
 80030fa:	0018      	movs	r0, r3
 80030fc:	f003 fb2d 	bl	800675a <memset>
    char *marker = strtok(inputString, ",");
 8003100:	4ae2      	ldr	r2, [pc, #904]	; (800348c <nmea_GPGGA+0x3ac>)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	0011      	movs	r1, r2
 8003106:	0018      	movs	r0, r3
 8003108:	f004 ff52 	bl	8007fb0 <strtok>
 800310c:	0003      	movs	r3, r0
 800310e:	22d0      	movs	r2, #208	; 0xd0
 8003110:	18ba      	adds	r2, r7, r2
 8003112:	6013      	str	r3, [r2, #0]
    while (marker != NULL) {
 8003114:	e02a      	b.n	800316c <nmea_GPGGA+0x8c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003116:	25d0      	movs	r5, #208	; 0xd0
 8003118:	197b      	adds	r3, r7, r5
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	0018      	movs	r0, r3
 800311e:	f7fc fff3 	bl	8000108 <strlen>
 8003122:	0003      	movs	r3, r0
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	26d4      	movs	r6, #212	; 0xd4
 8003128:	19bb      	adds	r3, r7, r6
 800312a:	681c      	ldr	r4, [r3, #0]
 800312c:	1c63      	adds	r3, r4, #1
 800312e:	19b9      	adds	r1, r7, r6
 8003130:	600b      	str	r3, [r1, #0]
 8003132:	0010      	movs	r0, r2
 8003134:	f003 faf4 	bl	8006720 <malloc>
 8003138:	0003      	movs	r3, r0
 800313a:	0019      	movs	r1, r3
 800313c:	2020      	movs	r0, #32
 800313e:	183b      	adds	r3, r7, r0
 8003140:	00a2      	lsls	r2, r4, #2
 8003142:	50d1      	str	r1, [r2, r3]
        strcpy(values[counter - 1], marker);
 8003144:	19bb      	adds	r3, r7, r6
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	1e5a      	subs	r2, r3, #1
 800314a:	183b      	adds	r3, r7, r0
 800314c:	0092      	lsls	r2, r2, #2
 800314e:	58d3      	ldr	r3, [r2, r3]
 8003150:	197a      	adds	r2, r7, r5
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	0011      	movs	r1, r2
 8003156:	0018      	movs	r0, r3
 8003158:	f004 f88a 	bl	8007270 <strcpy>
        marker = strtok(NULL, ",");
 800315c:	4bcb      	ldr	r3, [pc, #812]	; (800348c <nmea_GPGGA+0x3ac>)
 800315e:	0019      	movs	r1, r3
 8003160:	2000      	movs	r0, #0
 8003162:	f004 ff25 	bl	8007fb0 <strtok>
 8003166:	0003      	movs	r3, r0
 8003168:	197a      	adds	r2, r7, r5
 800316a:	6013      	str	r3, [r2, #0]
    while (marker != NULL) {
 800316c:	23d0      	movs	r3, #208	; 0xd0
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1cf      	bne.n	8003116 <nmea_GPGGA+0x36>
    }
    char lonSide = values[5][0];
 8003176:	2120      	movs	r1, #32
 8003178:	187b      	adds	r3, r7, r1
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	23b7      	movs	r3, #183	; 0xb7
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	7812      	ldrb	r2, [r2, #0]
 8003182:	701a      	strb	r2, [r3, #0]
    char latSide = values[3][0];
 8003184:	187b      	adds	r3, r7, r1
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	24b6      	movs	r4, #182	; 0xb6
 800318a:	193b      	adds	r3, r7, r4
 800318c:	7812      	ldrb	r2, [r2, #0]
 800318e:	701a      	strb	r2, [r3, #0]
    strcpy(gps_data->lastMeasure, values[1]);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	332c      	adds	r3, #44	; 0x2c
 8003194:	001a      	movs	r2, r3
 8003196:	187b      	adds	r3, r7, r1
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	0019      	movs	r1, r3
 800319c:	0010      	movs	r0, r2
 800319e:	f004 f867 	bl	8007270 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 80031a2:	193b      	adds	r3, r7, r4
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b53      	cmp	r3, #83	; 0x53
 80031a8:	d004      	beq.n	80031b4 <nmea_GPGGA+0xd4>
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b4e      	cmp	r3, #78	; 0x4e
 80031b0:	d000      	beq.n	80031b4 <nmea_GPGGA+0xd4>
 80031b2:	e18c      	b.n	80034ce <nmea_GPGGA+0x3ee>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 80031b4:	2300      	movs	r3, #0
 80031b6:	22cc      	movs	r2, #204	; 0xcc
 80031b8:	18ba      	adds	r2, r7, r2
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	e013      	b.n	80031e6 <nmea_GPGGA+0x106>
 80031be:	2320      	movs	r3, #32
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	20cc      	movs	r0, #204	; 0xcc
 80031c6:	183b      	adds	r3, r7, r0
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	18d3      	adds	r3, r2, r3
 80031cc:	7819      	ldrb	r1, [r3, #0]
 80031ce:	231c      	movs	r3, #28
 80031d0:	18fa      	adds	r2, r7, r3
 80031d2:	183b      	adds	r3, r7, r0
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	18d3      	adds	r3, r2, r3
 80031d8:	1c0a      	adds	r2, r1, #0
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	183b      	adds	r3, r7, r0
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	183a      	adds	r2, r7, r0
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	23cc      	movs	r3, #204	; 0xcc
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	dde6      	ble.n	80031be <nmea_GPGGA+0xde>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 80031f0:	2300      	movs	r3, #0
 80031f2:	22c8      	movs	r2, #200	; 0xc8
 80031f4:	18ba      	adds	r2, r7, r2
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	e014      	b.n	8003224 <nmea_GPGGA+0x144>
 80031fa:	2320      	movs	r3, #32
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	20c8      	movs	r0, #200	; 0xc8
 8003202:	183b      	adds	r3, r7, r0
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3302      	adds	r3, #2
 8003208:	18d3      	adds	r3, r2, r3
 800320a:	7819      	ldrb	r1, [r3, #0]
 800320c:	2314      	movs	r3, #20
 800320e:	18fa      	adds	r2, r7, r3
 8003210:	183b      	adds	r3, r7, r0
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	18d3      	adds	r3, r2, r3
 8003216:	1c0a      	adds	r2, r1, #0
 8003218:	701a      	strb	r2, [r3, #0]
 800321a:	183b      	adds	r3, r7, r0
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3301      	adds	r3, #1
 8003220:	183a      	adds	r2, r7, r0
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	23c8      	movs	r3, #200	; 0xc8
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b05      	cmp	r3, #5
 800322c:	dde5      	ble.n	80031fa <nmea_GPGGA+0x11a>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 800322e:	231c      	movs	r3, #28
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	220a      	movs	r2, #10
 8003234:	2100      	movs	r1, #0
 8003236:	0018      	movs	r0, r3
 8003238:	f004 ffac 	bl	8008194 <strtol>
 800323c:	0003      	movs	r3, r0
 800323e:	24b0      	movs	r4, #176	; 0xb0
 8003240:	193a      	adds	r2, r7, r4
 8003242:	6013      	str	r3, [r2, #0]
        float lat_min_strtof = strtof(lat_m, NULL);
 8003244:	2314      	movs	r3, #20
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	2100      	movs	r1, #0
 800324a:	0018      	movs	r0, r3
 800324c:	f004 fe5a 	bl	8007f04 <strtof>
 8003250:	1c03      	adds	r3, r0, #0
 8003252:	25ac      	movs	r5, #172	; 0xac
 8003254:	197a      	adds	r2, r7, r5
 8003256:	6013      	str	r3, [r2, #0]
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8003258:	193b      	adds	r3, r7, r4
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	f7fd fd4a 	bl	8000cf4 <__aeabi_i2f>
 8003260:	1c04      	adds	r4, r0, #0
 8003262:	498b      	ldr	r1, [pc, #556]	; (8003490 <nmea_GPGGA+0x3b0>)
 8003264:	197b      	adds	r3, r7, r5
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	f7fd fb66 	bl	8000938 <__aeabi_fdiv>
 800326c:	1c03      	adds	r3, r0, #0
 800326e:	1c19      	adds	r1, r3, #0
 8003270:	1c20      	adds	r0, r4, #0
 8003272:	f7fd f9c3 	bl	80005fc <__aeabi_fadd>
 8003276:	1c03      	adds	r3, r0, #0
 8003278:	1c18      	adds	r0, r3, #0
 800327a:	f7ff fb6f 	bl	800295c <__aeabi_f2d>
 800327e:	0002      	movs	r2, r0
 8003280:	000b      	movs	r3, r1
 8003282:	21a0      	movs	r1, #160	; 0xa0
 8003284:	1879      	adds	r1, r7, r1
 8003286:	600a      	str	r2, [r1, #0]
 8003288:	604b      	str	r3, [r1, #4]

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 800328a:	2300      	movs	r3, #0
 800328c:	22c4      	movs	r2, #196	; 0xc4
 800328e:	18ba      	adds	r2, r7, r2
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e013      	b.n	80032bc <nmea_GPGGA+0x1dc>
 8003294:	2320      	movs	r3, #32
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	20c4      	movs	r0, #196	; 0xc4
 800329c:	183b      	adds	r3, r7, r0
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	18d3      	adds	r3, r2, r3
 80032a2:	7819      	ldrb	r1, [r3, #0]
 80032a4:	2310      	movs	r3, #16
 80032a6:	18fa      	adds	r2, r7, r3
 80032a8:	183b      	adds	r3, r7, r0
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	18d3      	adds	r3, r2, r3
 80032ae:	1c0a      	adds	r2, r1, #0
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	183b      	adds	r3, r7, r0
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3301      	adds	r3, #1
 80032b8:	183a      	adds	r2, r7, r0
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	23c4      	movs	r3, #196	; 0xc4
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	dde6      	ble.n	8003294 <nmea_GPGGA+0x1b4>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 80032c6:	2300      	movs	r3, #0
 80032c8:	22c0      	movs	r2, #192	; 0xc0
 80032ca:	18ba      	adds	r2, r7, r2
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e014      	b.n	80032fa <nmea_GPGGA+0x21a>
 80032d0:	2320      	movs	r3, #32
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	20c0      	movs	r0, #192	; 0xc0
 80032d8:	183b      	adds	r3, r7, r0
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3303      	adds	r3, #3
 80032de:	18d3      	adds	r3, r2, r3
 80032e0:	7819      	ldrb	r1, [r3, #0]
 80032e2:	2308      	movs	r3, #8
 80032e4:	18fa      	adds	r2, r7, r3
 80032e6:	183b      	adds	r3, r7, r0
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	18d3      	adds	r3, r2, r3
 80032ec:	1c0a      	adds	r2, r1, #0
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	183b      	adds	r3, r7, r0
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3301      	adds	r3, #1
 80032f6:	183a      	adds	r2, r7, r0
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	23c0      	movs	r3, #192	; 0xc0
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b05      	cmp	r3, #5
 8003302:	dde5      	ble.n	80032d0 <nmea_GPGGA+0x1f0>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8003304:	2310      	movs	r3, #16
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	220a      	movs	r2, #10
 800330a:	2100      	movs	r1, #0
 800330c:	0018      	movs	r0, r3
 800330e:	f004 ff41 	bl	8008194 <strtol>
 8003312:	0003      	movs	r3, r0
 8003314:	249c      	movs	r4, #156	; 0x9c
 8003316:	193a      	adds	r2, r7, r4
 8003318:	6013      	str	r3, [r2, #0]
        float lon_min_strtof = strtof(lon_m, NULL);
 800331a:	2308      	movs	r3, #8
 800331c:	18fb      	adds	r3, r7, r3
 800331e:	2100      	movs	r1, #0
 8003320:	0018      	movs	r0, r3
 8003322:	f004 fdef 	bl	8007f04 <strtof>
 8003326:	1c03      	adds	r3, r0, #0
 8003328:	2598      	movs	r5, #152	; 0x98
 800332a:	197a      	adds	r2, r7, r5
 800332c:	6013      	str	r3, [r2, #0]
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 800332e:	193b      	adds	r3, r7, r4
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	f7fd fcdf 	bl	8000cf4 <__aeabi_i2f>
 8003336:	1c04      	adds	r4, r0, #0
 8003338:	4955      	ldr	r1, [pc, #340]	; (8003490 <nmea_GPGGA+0x3b0>)
 800333a:	197b      	adds	r3, r7, r5
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	f7fd fafb 	bl	8000938 <__aeabi_fdiv>
 8003342:	1c03      	adds	r3, r0, #0
 8003344:	1c19      	adds	r1, r3, #0
 8003346:	1c20      	adds	r0, r4, #0
 8003348:	f7fd f958 	bl	80005fc <__aeabi_fadd>
 800334c:	1c03      	adds	r3, r0, #0
 800334e:	1c18      	adds	r0, r3, #0
 8003350:	f7ff fb04 	bl	800295c <__aeabi_f2d>
 8003354:	0002      	movs	r2, r0
 8003356:	000b      	movs	r3, r1
 8003358:	2490      	movs	r4, #144	; 0x90
 800335a:	1939      	adds	r1, r7, r4
 800335c:	600a      	str	r2, [r1, #0]
 800335e:	604b      	str	r3, [r1, #4]

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003360:	2200      	movs	r2, #0
 8003362:	2300      	movs	r3, #0
 8003364:	25a0      	movs	r5, #160	; 0xa0
 8003366:	1979      	adds	r1, r7, r5
 8003368:	6808      	ldr	r0, [r1, #0]
 800336a:	6849      	ldr	r1, [r1, #4]
 800336c:	f7fd f86e 	bl	800044c <__aeabi_dcmpeq>
 8003370:	1e03      	subs	r3, r0, #0
 8003372:	d000      	beq.n	8003376 <nmea_GPGGA+0x296>
 8003374:	e085      	b.n	8003482 <nmea_GPGGA+0x3a2>
 8003376:	2200      	movs	r2, #0
 8003378:	2300      	movs	r3, #0
 800337a:	1939      	adds	r1, r7, r4
 800337c:	6808      	ldr	r0, [r1, #0]
 800337e:	6849      	ldr	r1, [r1, #4]
 8003380:	f7fd f864 	bl	800044c <__aeabi_dcmpeq>
 8003384:	1e03      	subs	r3, r0, #0
 8003386:	d000      	beq.n	800338a <nmea_GPGGA+0x2aa>
 8003388:	e07b      	b.n	8003482 <nmea_GPGGA+0x3a2>
 800338a:	2200      	movs	r2, #0
 800338c:	4b41      	ldr	r3, [pc, #260]	; (8003494 <nmea_GPGGA+0x3b4>)
 800338e:	1979      	adds	r1, r7, r5
 8003390:	6808      	ldr	r0, [r1, #0]
 8003392:	6849      	ldr	r1, [r1, #4]
 8003394:	f7fd f860 	bl	8000458 <__aeabi_dcmplt>
 8003398:	1e03      	subs	r3, r0, #0
 800339a:	d100      	bne.n	800339e <nmea_GPGGA+0x2be>
 800339c:	e071      	b.n	8003482 <nmea_GPGGA+0x3a2>
 800339e:	2200      	movs	r2, #0
 80033a0:	4b3d      	ldr	r3, [pc, #244]	; (8003498 <nmea_GPGGA+0x3b8>)
 80033a2:	1939      	adds	r1, r7, r4
 80033a4:	6808      	ldr	r0, [r1, #0]
 80033a6:	6849      	ldr	r1, [r1, #4]
 80033a8:	f7fd f856 	bl	8000458 <__aeabi_dcmplt>
 80033ac:	1e03      	subs	r3, r0, #0
 80033ae:	d068      	beq.n	8003482 <nmea_GPGGA+0x3a2>
            gps_data->latitude = lat_deg;
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	197b      	adds	r3, r7, r5
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	600a      	str	r2, [r1, #0]
 80033ba:	604b      	str	r3, [r1, #4]
            gps_data->latSide = latSide;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	22b6      	movs	r2, #182	; 0xb6
 80033c0:	18ba      	adds	r2, r7, r2
 80033c2:	7812      	ldrb	r2, [r2, #0]
 80033c4:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	193b      	adds	r3, r7, r4
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	610a      	str	r2, [r1, #16]
 80033d0:	614b      	str	r3, [r1, #20]
            gps_data->lonSide = lonSide;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	22b7      	movs	r2, #183	; 0xb7
 80033d6:	18ba      	adds	r2, r7, r2
 80033d8:	7812      	ldrb	r2, [r2, #0]
 80033da:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 80033dc:	2320      	movs	r3, #32
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2100      	movs	r1, #0
 80033e4:	0018      	movs	r0, r3
 80033e6:	f004 fd8d 	bl	8007f04 <strtof>
 80033ea:	1c03      	adds	r3, r0, #0
 80033ec:	228c      	movs	r2, #140	; 0x8c
 80033ee:	18b9      	adds	r1, r7, r2
 80033f0:	600b      	str	r3, [r1, #0]
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80033f2:	2100      	movs	r1, #0
 80033f4:	18bb      	adds	r3, r7, r2
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	f7fd f862 	bl	80004c0 <__aeabi_fcmpeq>
 80033fc:	1e03      	subs	r3, r0, #0
 80033fe:	d002      	beq.n	8003406 <nmea_GPGGA+0x326>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	e002      	b.n	800340c <nmea_GPGGA+0x32c>
 8003406:	238c      	movs	r3, #140	; 0x8c
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	61da      	str	r2, [r3, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8003410:	2420      	movs	r4, #32
 8003412:	193b      	adds	r3, r7, r4
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	220a      	movs	r2, #10
 8003418:	2100      	movs	r1, #0
 800341a:	0018      	movs	r0, r3
 800341c:	f004 feba 	bl	8008194 <strtol>
 8003420:	0002      	movs	r2, r0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8003426:	193b      	adds	r3, r7, r4
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	220a      	movs	r2, #10
 800342c:	2100      	movs	r1, #0
 800342e:	0018      	movs	r0, r3
 8003430:	f004 feb0 	bl	8008194 <strtol>
 8003434:	0003      	movs	r3, r0
 8003436:	2288      	movs	r2, #136	; 0x88
 8003438:	18b9      	adds	r1, r7, r2
 800343a:	600b      	str	r3, [r1, #0]
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 800343c:	18bb      	adds	r3, r7, r2
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	17da      	asrs	r2, r3, #31
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	0fdb      	lsrs	r3, r3, #31
 8003446:	b2db      	uxtb	r3, r3
 8003448:	001a      	movs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 800344e:	193b      	adds	r3, r7, r4
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	2100      	movs	r1, #0
 8003454:	0018      	movs	r0, r3
 8003456:	f004 fd55 	bl	8007f04 <strtof>
 800345a:	1c03      	adds	r3, r0, #0
 800345c:	2284      	movs	r2, #132	; 0x84
 800345e:	18b9      	adds	r1, r7, r2
 8003460:	600b      	str	r3, [r1, #0]
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8003462:	2100      	movs	r1, #0
 8003464:	18bb      	adds	r3, r7, r2
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	f7fd f82a 	bl	80004c0 <__aeabi_fcmpeq>
 800346c:	1e03      	subs	r3, r0, #0
 800346e:	d002      	beq.n	8003476 <nmea_GPGGA+0x396>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1a      	ldr	r2, [r3, #32]
 8003474:	e002      	b.n	800347c <nmea_GPGGA+0x39c>
 8003476:	2384      	movs	r3, #132	; 0x84
 8003478:	18fb      	adds	r3, r7, r3
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	621a      	str	r2, [r3, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003480:	e025      	b.n	80034ce <nmea_GPGGA+0x3ee>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8003482:	2300      	movs	r3, #0
 8003484:	22bc      	movs	r2, #188	; 0xbc
 8003486:	18ba      	adds	r2, r7, r2
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	e016      	b.n	80034ba <nmea_GPGGA+0x3da>
 800348c:	0800afac 	.word	0x0800afac
 8003490:	42700000 	.word	0x42700000
 8003494:	40568000 	.word	0x40568000
 8003498:	40668000 	.word	0x40668000
 800349c:	2320      	movs	r3, #32
 800349e:	18fb      	adds	r3, r7, r3
 80034a0:	24bc      	movs	r4, #188	; 0xbc
 80034a2:	193a      	adds	r2, r7, r4
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	0092      	lsls	r2, r2, #2
 80034a8:	58d3      	ldr	r3, [r2, r3]
 80034aa:	0018      	movs	r0, r3
 80034ac:	f003 f942 	bl	8006734 <free>
 80034b0:	193b      	adds	r3, r7, r4
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3301      	adds	r3, #1
 80034b6:	193a      	adds	r2, r7, r4
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	23bc      	movs	r3, #188	; 0xbc
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	23d4      	movs	r3, #212	; 0xd4
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	dbe8      	blt.n	800349c <nmea_GPGGA+0x3bc>
            return 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	e01c      	b.n	8003508 <nmea_GPGGA+0x428>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 80034ce:	2300      	movs	r3, #0
 80034d0:	22b8      	movs	r2, #184	; 0xb8
 80034d2:	18ba      	adds	r2, r7, r2
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	e00e      	b.n	80034f6 <nmea_GPGGA+0x416>
 80034d8:	2320      	movs	r3, #32
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	24b8      	movs	r4, #184	; 0xb8
 80034de:	193a      	adds	r2, r7, r4
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	0092      	lsls	r2, r2, #2
 80034e4:	58d3      	ldr	r3, [r2, r3]
 80034e6:	0018      	movs	r0, r3
 80034e8:	f003 f924 	bl	8006734 <free>
 80034ec:	193b      	adds	r3, r7, r4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3301      	adds	r3, #1
 80034f2:	193a      	adds	r2, r7, r4
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	23b8      	movs	r3, #184	; 0xb8
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	23d4      	movs	r3, #212	; 0xd4
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	dbe8      	blt.n	80034d8 <nmea_GPGGA+0x3f8>
    return 1;
 8003506:	2301      	movs	r3, #1
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b037      	add	sp, #220	; 0xdc
 800350e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003510 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8003510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003512:	b0a3      	sub	sp, #140	; 0x8c
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	2284      	movs	r2, #132	; 0x84
 800351e:	18ba      	adds	r2, r7, r2
 8003520:	6013      	str	r3, [r2, #0]
    memset(values, 0, sizeof(values));
 8003522:	230c      	movs	r3, #12
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	2264      	movs	r2, #100	; 0x64
 8003528:	2100      	movs	r1, #0
 800352a:	0018      	movs	r0, r3
 800352c:	f003 f915 	bl	800675a <memset>
    char *marker = strtok(inputString, ",");
 8003530:	4a40      	ldr	r2, [pc, #256]	; (8003634 <nmea_GPGSA+0x124>)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	0011      	movs	r1, r2
 8003536:	0018      	movs	r0, r3
 8003538:	f004 fd3a 	bl	8007fb0 <strtok>
 800353c:	0003      	movs	r3, r0
 800353e:	2280      	movs	r2, #128	; 0x80
 8003540:	18ba      	adds	r2, r7, r2
 8003542:	6013      	str	r3, [r2, #0]
    while (marker != NULL) {
 8003544:	e02a      	b.n	800359c <nmea_GPGSA+0x8c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003546:	2580      	movs	r5, #128	; 0x80
 8003548:	197b      	adds	r3, r7, r5
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	0018      	movs	r0, r3
 800354e:	f7fc fddb 	bl	8000108 <strlen>
 8003552:	0003      	movs	r3, r0
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	2684      	movs	r6, #132	; 0x84
 8003558:	19bb      	adds	r3, r7, r6
 800355a:	681c      	ldr	r4, [r3, #0]
 800355c:	1c63      	adds	r3, r4, #1
 800355e:	19b9      	adds	r1, r7, r6
 8003560:	600b      	str	r3, [r1, #0]
 8003562:	0010      	movs	r0, r2
 8003564:	f003 f8dc 	bl	8006720 <malloc>
 8003568:	0003      	movs	r3, r0
 800356a:	0019      	movs	r1, r3
 800356c:	200c      	movs	r0, #12
 800356e:	183b      	adds	r3, r7, r0
 8003570:	00a2      	lsls	r2, r4, #2
 8003572:	50d1      	str	r1, [r2, r3]
        strcpy(values[counter - 1], marker);
 8003574:	19bb      	adds	r3, r7, r6
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	1e5a      	subs	r2, r3, #1
 800357a:	183b      	adds	r3, r7, r0
 800357c:	0092      	lsls	r2, r2, #2
 800357e:	58d3      	ldr	r3, [r2, r3]
 8003580:	197a      	adds	r2, r7, r5
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	0011      	movs	r1, r2
 8003586:	0018      	movs	r0, r3
 8003588:	f003 fe72 	bl	8007270 <strcpy>
        marker = strtok(NULL, ",");
 800358c:	4b29      	ldr	r3, [pc, #164]	; (8003634 <nmea_GPGSA+0x124>)
 800358e:	0019      	movs	r1, r3
 8003590:	2000      	movs	r0, #0
 8003592:	f004 fd0d 	bl	8007fb0 <strtok>
 8003596:	0003      	movs	r3, r0
 8003598:	197a      	adds	r2, r7, r5
 800359a:	6013      	str	r3, [r2, #0]
    while (marker != NULL) {
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	18fb      	adds	r3, r7, r3
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1cf      	bne.n	8003546 <nmea_GPGSA+0x36>
    }
    int fix = strtol(values[2], NULL, 10);
 80035a6:	230c      	movs	r3, #12
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	220a      	movs	r2, #10
 80035ae:	2100      	movs	r1, #0
 80035b0:	0018      	movs	r0, r3
 80035b2:	f004 fdef 	bl	8008194 <strtol>
 80035b6:	0003      	movs	r3, r0
 80035b8:	673b      	str	r3, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 80035ba:	2301      	movs	r3, #1
 80035bc:	1c1a      	adds	r2, r3, #0
 80035be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	dc01      	bgt.n	80035c8 <nmea_GPGSA+0xb8>
 80035c4:	2300      	movs	r3, #0
 80035c6:	1c1a      	adds	r2, r3, #0
 80035c8:	b2d3      	uxtb	r3, r2
 80035ca:	001a      	movs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 80035d4:	2303      	movs	r3, #3
 80035d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80035d8:	e00d      	b.n	80035f6 <nmea_GPGSA+0xe6>
        if(values[i][0] != '\0'){
 80035da:	230c      	movs	r3, #12
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035e0:	0092      	lsls	r2, r2, #2
 80035e2:	58d3      	ldr	r3, [r2, r3]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <nmea_GPGSA+0xe0>
            satelliteCount++;
 80035ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035ec:	3301      	adds	r3, #1
 80035ee:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 80035f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035f2:	3301      	adds	r3, #1
 80035f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80035f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035f8:	2b0e      	cmp	r3, #14
 80035fa:	ddee      	ble.n	80035da <nmea_GPGSA+0xca>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003600:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8003602:	2300      	movs	r3, #0
 8003604:	677b      	str	r3, [r7, #116]	; 0x74
 8003606:	e00a      	b.n	800361e <nmea_GPGSA+0x10e>
 8003608:	230c      	movs	r3, #12
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800360e:	0092      	lsls	r2, r2, #2
 8003610:	58d3      	ldr	r3, [r2, r3]
 8003612:	0018      	movs	r0, r3
 8003614:	f003 f88e 	bl	8006734 <free>
 8003618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800361a:	3301      	adds	r3, #1
 800361c:	677b      	str	r3, [r7, #116]	; 0x74
 800361e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003620:	2384      	movs	r3, #132	; 0x84
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	dbee      	blt.n	8003608 <nmea_GPGSA+0xf8>
    return 1;
 800362a:	2301      	movs	r3, #1
}
 800362c:	0018      	movs	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	b023      	add	sp, #140	; 0x8c
 8003632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003634:	0800afac 	.word	0x0800afac

08003638 <nmea_GPGLL>:



int nmea_GPGLL(GPS *gps_data, char*inputString) {
 8003638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363a:	b0b7      	sub	sp, #220	; 0xdc
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	22d4      	movs	r2, #212	; 0xd4
 8003646:	18ba      	adds	r2, r7, r2
 8003648:	6013      	str	r3, [r2, #0]
    memset(values, 0, sizeof(values));
 800364a:	2324      	movs	r3, #36	; 0x24
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	2264      	movs	r2, #100	; 0x64
 8003650:	2100      	movs	r1, #0
 8003652:	0018      	movs	r0, r3
 8003654:	f003 f881 	bl	800675a <memset>
    char *marker = strtok(inputString, ",");
 8003658:	4acc      	ldr	r2, [pc, #816]	; (800398c <nmea_GPGLL+0x354>)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	0011      	movs	r1, r2
 800365e:	0018      	movs	r0, r3
 8003660:	f004 fca6 	bl	8007fb0 <strtok>
 8003664:	0003      	movs	r3, r0
 8003666:	22d0      	movs	r2, #208	; 0xd0
 8003668:	18ba      	adds	r2, r7, r2
 800366a:	6013      	str	r3, [r2, #0]
    while (marker != NULL) {
 800366c:	e02a      	b.n	80036c4 <nmea_GPGLL+0x8c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800366e:	25d0      	movs	r5, #208	; 0xd0
 8003670:	197b      	adds	r3, r7, r5
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	0018      	movs	r0, r3
 8003676:	f7fc fd47 	bl	8000108 <strlen>
 800367a:	0003      	movs	r3, r0
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	26d4      	movs	r6, #212	; 0xd4
 8003680:	19bb      	adds	r3, r7, r6
 8003682:	681c      	ldr	r4, [r3, #0]
 8003684:	1c63      	adds	r3, r4, #1
 8003686:	19b9      	adds	r1, r7, r6
 8003688:	600b      	str	r3, [r1, #0]
 800368a:	0010      	movs	r0, r2
 800368c:	f003 f848 	bl	8006720 <malloc>
 8003690:	0003      	movs	r3, r0
 8003692:	0019      	movs	r1, r3
 8003694:	2024      	movs	r0, #36	; 0x24
 8003696:	183b      	adds	r3, r7, r0
 8003698:	00a2      	lsls	r2, r4, #2
 800369a:	50d1      	str	r1, [r2, r3]
        strcpy(values[counter - 1], marker);
 800369c:	19bb      	adds	r3, r7, r6
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	1e5a      	subs	r2, r3, #1
 80036a2:	183b      	adds	r3, r7, r0
 80036a4:	0092      	lsls	r2, r2, #2
 80036a6:	58d3      	ldr	r3, [r2, r3]
 80036a8:	197a      	adds	r2, r7, r5
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	0011      	movs	r1, r2
 80036ae:	0018      	movs	r0, r3
 80036b0:	f003 fdde 	bl	8007270 <strcpy>
        marker = strtok(NULL, ",");
 80036b4:	4bb5      	ldr	r3, [pc, #724]	; (800398c <nmea_GPGLL+0x354>)
 80036b6:	0019      	movs	r1, r3
 80036b8:	2000      	movs	r0, #0
 80036ba:	f004 fc79 	bl	8007fb0 <strtok>
 80036be:	0003      	movs	r3, r0
 80036c0:	197a      	adds	r2, r7, r5
 80036c2:	6013      	str	r3, [r2, #0]
    while (marker != NULL) {
 80036c4:	23d0      	movs	r3, #208	; 0xd0
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1cf      	bne.n	800366e <nmea_GPGLL+0x36>
    }
    char latSide = values[2][0];
 80036ce:	2324      	movs	r3, #36	; 0x24
 80036d0:	18fb      	adds	r3, r7, r3
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	21b7      	movs	r1, #183	; 0xb7
 80036d6:	187b      	adds	r3, r7, r1
 80036d8:	7812      	ldrb	r2, [r2, #0]
 80036da:	701a      	strb	r2, [r3, #0]
    if (latSide == 'S' || latSide == 'N') { //check if data is sorta intact
 80036dc:	000a      	movs	r2, r1
 80036de:	18bb      	adds	r3, r7, r2
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b53      	cmp	r3, #83	; 0x53
 80036e4:	d004      	beq.n	80036f0 <nmea_GPGLL+0xb8>
 80036e6:	18bb      	adds	r3, r7, r2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b4e      	cmp	r3, #78	; 0x4e
 80036ec:	d000      	beq.n	80036f0 <nmea_GPGLL+0xb8>
 80036ee:	e148      	b.n	8003982 <nmea_GPGLL+0x34a>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[1][z];
 80036f0:	2300      	movs	r3, #0
 80036f2:	22cc      	movs	r2, #204	; 0xcc
 80036f4:	18ba      	adds	r2, r7, r2
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	e013      	b.n	8003722 <nmea_GPGLL+0xea>
 80036fa:	2324      	movs	r3, #36	; 0x24
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	20cc      	movs	r0, #204	; 0xcc
 8003702:	183b      	adds	r3, r7, r0
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	18d3      	adds	r3, r2, r3
 8003708:	7819      	ldrb	r1, [r3, #0]
 800370a:	2320      	movs	r3, #32
 800370c:	18fa      	adds	r2, r7, r3
 800370e:	183b      	adds	r3, r7, r0
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	18d3      	adds	r3, r2, r3
 8003714:	1c0a      	adds	r2, r1, #0
 8003716:	701a      	strb	r2, [r3, #0]
 8003718:	183b      	adds	r3, r7, r0
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3301      	adds	r3, #1
 800371e:	183a      	adds	r2, r7, r0
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	23cc      	movs	r3, #204	; 0xcc
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	dde6      	ble.n	80036fa <nmea_GPGLL+0xc2>
        for (int z = 0; z < 6; z++) lat_m[z] = values[1][z + 2];
 800372c:	2300      	movs	r3, #0
 800372e:	22c8      	movs	r2, #200	; 0xc8
 8003730:	18ba      	adds	r2, r7, r2
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	e014      	b.n	8003760 <nmea_GPGLL+0x128>
 8003736:	2324      	movs	r3, #36	; 0x24
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	20c8      	movs	r0, #200	; 0xc8
 800373e:	183b      	adds	r3, r7, r0
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3302      	adds	r3, #2
 8003744:	18d3      	adds	r3, r2, r3
 8003746:	7819      	ldrb	r1, [r3, #0]
 8003748:	2318      	movs	r3, #24
 800374a:	18fa      	adds	r2, r7, r3
 800374c:	183b      	adds	r3, r7, r0
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	18d3      	adds	r3, r2, r3
 8003752:	1c0a      	adds	r2, r1, #0
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	183b      	adds	r3, r7, r0
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3301      	adds	r3, #1
 800375c:	183a      	adds	r2, r7, r0
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	23c8      	movs	r3, #200	; 0xc8
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b05      	cmp	r3, #5
 8003768:	dde5      	ble.n	8003736 <nmea_GPGLL+0xfe>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 800376a:	2320      	movs	r3, #32
 800376c:	18fb      	adds	r3, r7, r3
 800376e:	220a      	movs	r2, #10
 8003770:	2100      	movs	r1, #0
 8003772:	0018      	movs	r0, r3
 8003774:	f004 fd0e 	bl	8008194 <strtol>
 8003778:	0003      	movs	r3, r0
 800377a:	24b0      	movs	r4, #176	; 0xb0
 800377c:	193a      	adds	r2, r7, r4
 800377e:	6013      	str	r3, [r2, #0]
        float lat_min_strtof = strtof(lat_m, NULL);
 8003780:	2318      	movs	r3, #24
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	2100      	movs	r1, #0
 8003786:	0018      	movs	r0, r3
 8003788:	f004 fbbc 	bl	8007f04 <strtof>
 800378c:	1c03      	adds	r3, r0, #0
 800378e:	25ac      	movs	r5, #172	; 0xac
 8003790:	197a      	adds	r2, r7, r5
 8003792:	6013      	str	r3, [r2, #0]
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8003794:	193b      	adds	r3, r7, r4
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	f7fd faac 	bl	8000cf4 <__aeabi_i2f>
 800379c:	1c04      	adds	r4, r0, #0
 800379e:	497c      	ldr	r1, [pc, #496]	; (8003990 <nmea_GPGLL+0x358>)
 80037a0:	197b      	adds	r3, r7, r5
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	f7fd f8c8 	bl	8000938 <__aeabi_fdiv>
 80037a8:	1c03      	adds	r3, r0, #0
 80037aa:	1c19      	adds	r1, r3, #0
 80037ac:	1c20      	adds	r0, r4, #0
 80037ae:	f7fc ff25 	bl	80005fc <__aeabi_fadd>
 80037b2:	1c03      	adds	r3, r0, #0
 80037b4:	1c18      	adds	r0, r3, #0
 80037b6:	f7ff f8d1 	bl	800295c <__aeabi_f2d>
 80037ba:	0002      	movs	r2, r0
 80037bc:	000b      	movs	r3, r1
 80037be:	21a0      	movs	r1, #160	; 0xa0
 80037c0:	1879      	adds	r1, r7, r1
 80037c2:	600a      	str	r2, [r1, #0]
 80037c4:	604b      	str	r3, [r1, #4]

        char lon_d[3];
        char lon_m[7];
        char lonSide = values[4][0];
 80037c6:	2324      	movs	r3, #36	; 0x24
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	239f      	movs	r3, #159	; 0x9f
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	7812      	ldrb	r2, [r2, #0]
 80037d2:	701a      	strb	r2, [r3, #0]
        for (int z = 0; z < 3; z++) lon_d[z] = values[3][z];
 80037d4:	2300      	movs	r3, #0
 80037d6:	22c4      	movs	r2, #196	; 0xc4
 80037d8:	18ba      	adds	r2, r7, r2
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	e013      	b.n	8003806 <nmea_GPGLL+0x1ce>
 80037de:	2324      	movs	r3, #36	; 0x24
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	20c4      	movs	r0, #196	; 0xc4
 80037e6:	183b      	adds	r3, r7, r0
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	18d3      	adds	r3, r2, r3
 80037ec:	7819      	ldrb	r1, [r3, #0]
 80037ee:	2314      	movs	r3, #20
 80037f0:	18fa      	adds	r2, r7, r3
 80037f2:	183b      	adds	r3, r7, r0
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	18d3      	adds	r3, r2, r3
 80037f8:	1c0a      	adds	r2, r1, #0
 80037fa:	701a      	strb	r2, [r3, #0]
 80037fc:	183b      	adds	r3, r7, r0
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3301      	adds	r3, #1
 8003802:	183a      	adds	r2, r7, r0
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	23c4      	movs	r3, #196	; 0xc4
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b02      	cmp	r3, #2
 800380e:	dde6      	ble.n	80037de <nmea_GPGLL+0x1a6>
        for (int z = 0; z < 6; z++) lon_m[z] = values[3][z + 3];
 8003810:	2300      	movs	r3, #0
 8003812:	22c0      	movs	r2, #192	; 0xc0
 8003814:	18ba      	adds	r2, r7, r2
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	e014      	b.n	8003844 <nmea_GPGLL+0x20c>
 800381a:	2324      	movs	r3, #36	; 0x24
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	20c0      	movs	r0, #192	; 0xc0
 8003822:	183b      	adds	r3, r7, r0
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3303      	adds	r3, #3
 8003828:	18d3      	adds	r3, r2, r3
 800382a:	7819      	ldrb	r1, [r3, #0]
 800382c:	230c      	movs	r3, #12
 800382e:	18fa      	adds	r2, r7, r3
 8003830:	183b      	adds	r3, r7, r0
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	18d3      	adds	r3, r2, r3
 8003836:	1c0a      	adds	r2, r1, #0
 8003838:	701a      	strb	r2, [r3, #0]
 800383a:	183b      	adds	r3, r7, r0
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3301      	adds	r3, #1
 8003840:	183a      	adds	r2, r7, r0
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	23c0      	movs	r3, #192	; 0xc0
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b05      	cmp	r3, #5
 800384c:	dde5      	ble.n	800381a <nmea_GPGLL+0x1e2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 800384e:	2314      	movs	r3, #20
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	220a      	movs	r2, #10
 8003854:	2100      	movs	r1, #0
 8003856:	0018      	movs	r0, r3
 8003858:	f004 fc9c 	bl	8008194 <strtol>
 800385c:	0003      	movs	r3, r0
 800385e:	2598      	movs	r5, #152	; 0x98
 8003860:	197a      	adds	r2, r7, r5
 8003862:	6013      	str	r3, [r2, #0]
        float lon_min_strtof = strtof(lon_m, NULL);
 8003864:	230c      	movs	r3, #12
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	2100      	movs	r1, #0
 800386a:	0018      	movs	r0, r3
 800386c:	f004 fb4a 	bl	8007f04 <strtof>
 8003870:	1c03      	adds	r3, r0, #0
 8003872:	2694      	movs	r6, #148	; 0x94
 8003874:	19ba      	adds	r2, r7, r6
 8003876:	6013      	str	r3, [r2, #0]
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003878:	197b      	adds	r3, r7, r5
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	f7fd fa3a 	bl	8000cf4 <__aeabi_i2f>
 8003880:	1c04      	adds	r4, r0, #0
 8003882:	4943      	ldr	r1, [pc, #268]	; (8003990 <nmea_GPGLL+0x358>)
 8003884:	19bb      	adds	r3, r7, r6
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	f7fd f856 	bl	8000938 <__aeabi_fdiv>
 800388c:	1c03      	adds	r3, r0, #0
 800388e:	1c19      	adds	r1, r3, #0
 8003890:	1c20      	adds	r0, r4, #0
 8003892:	f7fc feb3 	bl	80005fc <__aeabi_fadd>
 8003896:	1c03      	adds	r3, r0, #0
 8003898:	1c18      	adds	r0, r3, #0
 800389a:	f7ff f85f 	bl	800295c <__aeabi_f2d>
 800389e:	0002      	movs	r2, r0
 80038a0:	000b      	movs	r3, r1
 80038a2:	2188      	movs	r1, #136	; 0x88
 80038a4:	1879      	adds	r1, r7, r1
 80038a6:	600a      	str	r2, [r1, #0]
 80038a8:	604b      	str	r3, [r1, #4]
        //confirm that we aren't on null island
        if(lon_deg_strtol == 0 || lon_min_strtof == 0 || lat_deg_strtol == 0 || lat_min_strtof == 0) {
 80038aa:	197b      	adds	r3, r7, r5
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d013      	beq.n	80038da <nmea_GPGLL+0x2a2>
 80038b2:	2100      	movs	r1, #0
 80038b4:	19bb      	adds	r3, r7, r6
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	f7fc fe02 	bl	80004c0 <__aeabi_fcmpeq>
 80038bc:	1e03      	subs	r3, r0, #0
 80038be:	d10c      	bne.n	80038da <nmea_GPGLL+0x2a2>
 80038c0:	23b0      	movs	r3, #176	; 0xb0
 80038c2:	18fb      	adds	r3, r7, r3
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d007      	beq.n	80038da <nmea_GPGLL+0x2a2>
 80038ca:	2100      	movs	r1, #0
 80038cc:	23ac      	movs	r3, #172	; 0xac
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	f7fc fdf5 	bl	80004c0 <__aeabi_fcmpeq>
 80038d6:	1e03      	subs	r3, r0, #0
 80038d8:	d01d      	beq.n	8003916 <nmea_GPGLL+0x2de>
            for(int i = 0; i<counter; i++) free(values[i]);
 80038da:	2300      	movs	r3, #0
 80038dc:	22bc      	movs	r2, #188	; 0xbc
 80038de:	18ba      	adds	r2, r7, r2
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	e00e      	b.n	8003902 <nmea_GPGLL+0x2ca>
 80038e4:	2324      	movs	r3, #36	; 0x24
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	24bc      	movs	r4, #188	; 0xbc
 80038ea:	193a      	adds	r2, r7, r4
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	0092      	lsls	r2, r2, #2
 80038f0:	58d3      	ldr	r3, [r2, r3]
 80038f2:	0018      	movs	r0, r3
 80038f4:	f002 ff1e 	bl	8006734 <free>
 80038f8:	193b      	adds	r3, r7, r4
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3301      	adds	r3, #1
 80038fe:	193a      	adds	r2, r7, r4
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	23bc      	movs	r3, #188	; 0xbc
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	23d4      	movs	r3, #212	; 0xd4
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	dbe8      	blt.n	80038e4 <nmea_GPGLL+0x2ac>
            return 0;
 8003912:	2300      	movs	r3, #0
 8003914:	e036      	b.n	8003984 <nmea_GPGLL+0x34c>
        }
        else{
            gps_data->latitude = lat_deg;
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	23a0      	movs	r3, #160	; 0xa0
 800391a:	18fb      	adds	r3, r7, r3
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	600a      	str	r2, [r1, #0]
 8003922:	604b      	str	r3, [r1, #4]
            gps_data->longitude = lon_deg;
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	2388      	movs	r3, #136	; 0x88
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	610a      	str	r2, [r1, #16]
 8003930:	614b      	str	r3, [r1, #20]
            gps_data->latSide = latSide;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	22b7      	movs	r2, #183	; 0xb7
 8003936:	18ba      	adds	r2, r7, r2
 8003938:	7812      	ldrb	r2, [r2, #0]
 800393a:	721a      	strb	r2, [r3, #8]
            gps_data->lonSide = lonSide;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	229f      	movs	r2, #159	; 0x9f
 8003940:	18ba      	adds	r2, r7, r2
 8003942:	7812      	ldrb	r2, [r2, #0]
 8003944:	761a      	strb	r2, [r3, #24]
            for(int i = 0; i<counter; i++) free(values[i]);
 8003946:	2300      	movs	r3, #0
 8003948:	22b8      	movs	r2, #184	; 0xb8
 800394a:	18ba      	adds	r2, r7, r2
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e00e      	b.n	800396e <nmea_GPGLL+0x336>
 8003950:	2324      	movs	r3, #36	; 0x24
 8003952:	18fb      	adds	r3, r7, r3
 8003954:	24b8      	movs	r4, #184	; 0xb8
 8003956:	193a      	adds	r2, r7, r4
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	0092      	lsls	r2, r2, #2
 800395c:	58d3      	ldr	r3, [r2, r3]
 800395e:	0018      	movs	r0, r3
 8003960:	f002 fee8 	bl	8006734 <free>
 8003964:	193b      	adds	r3, r7, r4
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	193a      	adds	r2, r7, r4
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	23b8      	movs	r3, #184	; 0xb8
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	23d4      	movs	r3, #212	; 0xd4
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	dbe8      	blt.n	8003950 <nmea_GPGLL+0x318>
            return 1;
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <nmea_GPGLL+0x34c>
        }
    }
    else return 0;
 8003982:	2300      	movs	r3, #0
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b037      	add	sp, #220	; 0xdc
 800398a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800398c:	0800afac 	.word	0x0800afac
 8003990:	42700000 	.word	0x42700000

08003994 <nmea_parse>:

void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8003994:	b590      	push	{r4, r7, lr}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 800399e:	4b54      	ldr	r3, [pc, #336]	; (8003af0 <nmea_parse+0x15c>)
 80039a0:	223c      	movs	r2, #60	; 0x3c
 80039a2:	2100      	movs	r1, #0
 80039a4:	0018      	movs	r0, r3
 80039a6:	f002 fed8 	bl	800675a <memset>
    char * token = strtok(buffer, "$");
 80039aa:	4a52      	ldr	r2, [pc, #328]	; (8003af4 <nmea_parse+0x160>)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	0011      	movs	r1, r2
 80039b0:	0018      	movs	r0, r3
 80039b2:	f004 fafd 	bl	8007fb0 <strtok>
 80039b6:	0003      	movs	r3, r0
 80039b8:	617b      	str	r3, [r7, #20]
    int cnt = 0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 80039be:	e021      	b.n	8003a04 <nmea_parse+0x70>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7fc fba0 	bl	8000108 <strlen>
 80039c8:	0003      	movs	r3, r0
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	693c      	ldr	r4, [r7, #16]
 80039ce:	1c63      	adds	r3, r4, #1
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	0010      	movs	r0, r2
 80039d4:	f002 fea4 	bl	8006720 <malloc>
 80039d8:	0003      	movs	r3, r0
 80039da:	0019      	movs	r1, r3
 80039dc:	4b44      	ldr	r3, [pc, #272]	; (8003af0 <nmea_parse+0x15c>)
 80039de:	00a2      	lsls	r2, r4, #2
 80039e0:	50d1      	str	r1, [r2, r3]
        strcpy(data[cnt-1], token);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1e5a      	subs	r2, r3, #1
 80039e6:	4b42      	ldr	r3, [pc, #264]	; (8003af0 <nmea_parse+0x15c>)
 80039e8:	0092      	lsls	r2, r2, #2
 80039ea:	58d3      	ldr	r3, [r2, r3]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	0011      	movs	r1, r2
 80039f0:	0018      	movs	r0, r3
 80039f2:	f003 fc3d 	bl	8007270 <strcpy>
        token = strtok(NULL, "$");
 80039f6:	4b3f      	ldr	r3, [pc, #252]	; (8003af4 <nmea_parse+0x160>)
 80039f8:	0019      	movs	r1, r3
 80039fa:	2000      	movs	r0, #0
 80039fc:	f004 fad8 	bl	8007fb0 <strtok>
 8003a00:	0003      	movs	r3, r0
 8003a02:	617b      	str	r3, [r7, #20]
    while(token !=NULL){
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1da      	bne.n	80039c0 <nmea_parse+0x2c>
    }
    for(int i = 0; i<cnt; i++){
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	e054      	b.n	8003aba <nmea_parse+0x126>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8003a10:	4b37      	ldr	r3, [pc, #220]	; (8003af0 <nmea_parse+0x15c>)
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	0092      	lsls	r2, r2, #2
 8003a16:	58d3      	ldr	r3, [r2, r3]
 8003a18:	4a37      	ldr	r2, [pc, #220]	; (8003af8 <nmea_parse+0x164>)
 8003a1a:	0011      	movs	r1, r2
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f003 fc2f 	bl	8007280 <strstr>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d046      	beq.n	8003ab4 <nmea_parse+0x120>
 8003a26:	4b32      	ldr	r3, [pc, #200]	; (8003af0 <nmea_parse+0x15c>)
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	0092      	lsls	r2, r2, #2
 8003a2c:	58d3      	ldr	r3, [r2, r3]
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f7ff fb05 	bl	800303e <gps_checksum>
 8003a34:	1e03      	subs	r3, r0, #0
 8003a36:	d03d      	beq.n	8003ab4 <nmea_parse+0x120>
           if(strstr(data[i], "GPGLL")!=NULL){
 8003a38:	4b2d      	ldr	r3, [pc, #180]	; (8003af0 <nmea_parse+0x15c>)
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	0092      	lsls	r2, r2, #2
 8003a3e:	58d3      	ldr	r3, [r2, r3]
 8003a40:	4a2e      	ldr	r2, [pc, #184]	; (8003afc <nmea_parse+0x168>)
 8003a42:	0011      	movs	r1, r2
 8003a44:	0018      	movs	r0, r3
 8003a46:	f003 fc1b 	bl	8007280 <strstr>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d009      	beq.n	8003a62 <nmea_parse+0xce>
               nmea_GPGLL(gps_data, data[i]);
 8003a4e:	4b28      	ldr	r3, [pc, #160]	; (8003af0 <nmea_parse+0x15c>)
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	0092      	lsls	r2, r2, #2
 8003a54:	58d2      	ldr	r2, [r2, r3]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	0011      	movs	r1, r2
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f7ff fdec 	bl	8003638 <nmea_GPGLL>
 8003a60:	e028      	b.n	8003ab4 <nmea_parse+0x120>
           }
           else if(strstr(data[i], "GPGSA")!=NULL){
 8003a62:	4b23      	ldr	r3, [pc, #140]	; (8003af0 <nmea_parse+0x15c>)
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	0092      	lsls	r2, r2, #2
 8003a68:	58d3      	ldr	r3, [r2, r3]
 8003a6a:	4a25      	ldr	r2, [pc, #148]	; (8003b00 <nmea_parse+0x16c>)
 8003a6c:	0011      	movs	r1, r2
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f003 fc06 	bl	8007280 <strstr>
 8003a74:	1e03      	subs	r3, r0, #0
 8003a76:	d009      	beq.n	8003a8c <nmea_parse+0xf8>
               nmea_GPGSA(gps_data, data[i]);
 8003a78:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <nmea_parse+0x15c>)
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	0092      	lsls	r2, r2, #2
 8003a7e:	58d2      	ldr	r2, [r2, r3]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	0011      	movs	r1, r2
 8003a84:	0018      	movs	r0, r3
 8003a86:	f7ff fd43 	bl	8003510 <nmea_GPGSA>
 8003a8a:	e013      	b.n	8003ab4 <nmea_parse+0x120>
           }
           else if(strstr(data[i], "GPGGA")!=NULL){
 8003a8c:	4b18      	ldr	r3, [pc, #96]	; (8003af0 <nmea_parse+0x15c>)
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	0092      	lsls	r2, r2, #2
 8003a92:	58d3      	ldr	r3, [r2, r3]
 8003a94:	4a1b      	ldr	r2, [pc, #108]	; (8003b04 <nmea_parse+0x170>)
 8003a96:	0011      	movs	r1, r2
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f003 fbf1 	bl	8007280 <strstr>
 8003a9e:	1e03      	subs	r3, r0, #0
 8003aa0:	d008      	beq.n	8003ab4 <nmea_parse+0x120>
               nmea_GPGGA(gps_data, data[i]);
 8003aa2:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <nmea_parse+0x15c>)
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	0092      	lsls	r2, r2, #2
 8003aa8:	58d2      	ldr	r2, [r2, r3]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	0011      	movs	r1, r2
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f7ff fb16 	bl	80030e0 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	dba6      	blt.n	8003a10 <nmea_parse+0x7c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	e009      	b.n	8003adc <nmea_parse+0x148>
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <nmea_parse+0x15c>)
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	0092      	lsls	r2, r2, #2
 8003ace:	58d3      	ldr	r3, [r2, r3]
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f002 fe2f 	bl	8006734 <free>
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	dbf1      	blt.n	8003ac8 <nmea_parse+0x134>


 8003ae4:	46c0      	nop			; (mov r8, r8)
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b007      	add	sp, #28
 8003aec:	bd90      	pop	{r4, r7, pc}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	200005d0 	.word	0x200005d0
 8003af4:	0800afb0 	.word	0x0800afb0
 8003af8:	0800afb4 	.word	0x0800afb4
 8003afc:	0800afb8 	.word	0x0800afb8
 8003b00:	0800afc0 	.word	0x0800afc0
 8003b04:	0800afc8 	.word	0x0800afc8

08003b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b0e:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <HAL_MspInit+0x44>)
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <HAL_MspInit+0x44>)
 8003b14:	2101      	movs	r1, #1
 8003b16:	430a      	orrs	r2, r1
 8003b18:	619a      	str	r2, [r3, #24]
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <HAL_MspInit+0x44>)
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	4013      	ands	r3, r2
 8003b22:	607b      	str	r3, [r7, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <HAL_MspInit+0x44>)
 8003b28:	69da      	ldr	r2, [r3, #28]
 8003b2a:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <HAL_MspInit+0x44>)
 8003b2c:	2180      	movs	r1, #128	; 0x80
 8003b2e:	0549      	lsls	r1, r1, #21
 8003b30:	430a      	orrs	r2, r1
 8003b32:	61da      	str	r2, [r3, #28]
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_MspInit+0x44>)
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	055b      	lsls	r3, r3, #21
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b002      	add	sp, #8
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	40021000 	.word	0x40021000

08003b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b50:	b590      	push	{r4, r7, lr}
 8003b52:	b08d      	sub	sp, #52	; 0x34
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b58:	241c      	movs	r4, #28
 8003b5a:	193b      	adds	r3, r7, r4
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	2314      	movs	r3, #20
 8003b60:	001a      	movs	r2, r3
 8003b62:	2100      	movs	r1, #0
 8003b64:	f002 fdf9 	bl	800675a <memset>
  if(huart->Instance==USART1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a51      	ldr	r2, [pc, #324]	; (8003cb4 <HAL_UART_MspInit+0x164>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d163      	bne.n	8003c3a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b72:	4b51      	ldr	r3, [pc, #324]	; (8003cb8 <HAL_UART_MspInit+0x168>)
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	4b50      	ldr	r3, [pc, #320]	; (8003cb8 <HAL_UART_MspInit+0x168>)
 8003b78:	2180      	movs	r1, #128	; 0x80
 8003b7a:	01c9      	lsls	r1, r1, #7
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	619a      	str	r2, [r3, #24]
 8003b80:	4b4d      	ldr	r3, [pc, #308]	; (8003cb8 <HAL_UART_MspInit+0x168>)
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	01db      	lsls	r3, r3, #7
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8e:	4b4a      	ldr	r3, [pc, #296]	; (8003cb8 <HAL_UART_MspInit+0x168>)
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	4b49      	ldr	r3, [pc, #292]	; (8003cb8 <HAL_UART_MspInit+0x168>)
 8003b94:	2180      	movs	r1, #128	; 0x80
 8003b96:	0289      	lsls	r1, r1, #10
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	615a      	str	r2, [r3, #20]
 8003b9c:	4b46      	ldr	r3, [pc, #280]	; (8003cb8 <HAL_UART_MspInit+0x168>)
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	2380      	movs	r3, #128	; 0x80
 8003ba2:	029b      	lsls	r3, r3, #10
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003baa:	193b      	adds	r3, r7, r4
 8003bac:	22c0      	movs	r2, #192	; 0xc0
 8003bae:	00d2      	lsls	r2, r2, #3
 8003bb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb2:	0021      	movs	r1, r4
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bba:	187b      	adds	r3, r7, r1
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bc0:	187b      	adds	r3, r7, r1
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	2201      	movs	r2, #1
 8003bca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bcc:	187a      	adds	r2, r7, r1
 8003bce:	2390      	movs	r3, #144	; 0x90
 8003bd0:	05db      	lsls	r3, r3, #23
 8003bd2:	0011      	movs	r1, r2
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f000 fd11 	bl	80045fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8003bda:	4b38      	ldr	r3, [pc, #224]	; (8003cbc <HAL_UART_MspInit+0x16c>)
 8003bdc:	4a38      	ldr	r2, [pc, #224]	; (8003cc0 <HAL_UART_MspInit+0x170>)
 8003bde:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003be0:	4b36      	ldr	r3, [pc, #216]	; (8003cbc <HAL_UART_MspInit+0x16c>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003be6:	4b35      	ldr	r3, [pc, #212]	; (8003cbc <HAL_UART_MspInit+0x16c>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bec:	4b33      	ldr	r3, [pc, #204]	; (8003cbc <HAL_UART_MspInit+0x16c>)
 8003bee:	2280      	movs	r2, #128	; 0x80
 8003bf0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bf2:	4b32      	ldr	r3, [pc, #200]	; (8003cbc <HAL_UART_MspInit+0x16c>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bf8:	4b30      	ldr	r3, [pc, #192]	; (8003cbc <HAL_UART_MspInit+0x16c>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003bfe:	4b2f      	ldr	r3, [pc, #188]	; (8003cbc <HAL_UART_MspInit+0x16c>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c04:	4b2d      	ldr	r3, [pc, #180]	; (8003cbc <HAL_UART_MspInit+0x16c>)
 8003c06:	2280      	movs	r2, #128	; 0x80
 8003c08:	0192      	lsls	r2, r2, #6
 8003c0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003c0c:	4b2b      	ldr	r3, [pc, #172]	; (8003cbc <HAL_UART_MspInit+0x16c>)
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f000 fade 	bl	80041d0 <HAL_DMA_Init>
 8003c14:	1e03      	subs	r3, r0, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003c18:	f7ff fa0c 	bl	8003034 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a27      	ldr	r2, [pc, #156]	; (8003cbc <HAL_UART_MspInit+0x16c>)
 8003c20:	675a      	str	r2, [r3, #116]	; 0x74
 8003c22:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <HAL_UART_MspInit+0x16c>)
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	201b      	movs	r0, #27
 8003c2e:	f000 fa9d 	bl	800416c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c32:	201b      	movs	r0, #27
 8003c34:	f000 faaf 	bl	8004196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c38:	e037      	b.n	8003caa <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART2)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <HAL_UART_MspInit+0x174>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d132      	bne.n	8003caa <HAL_UART_MspInit+0x15a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c44:	4b1c      	ldr	r3, [pc, #112]	; (8003cb8 <HAL_UART_MspInit+0x168>)
 8003c46:	69da      	ldr	r2, [r3, #28]
 8003c48:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <HAL_UART_MspInit+0x168>)
 8003c4a:	2180      	movs	r1, #128	; 0x80
 8003c4c:	0289      	lsls	r1, r1, #10
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	61da      	str	r2, [r3, #28]
 8003c52:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <HAL_UART_MspInit+0x168>)
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	029b      	lsls	r3, r3, #10
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c60:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <HAL_UART_MspInit+0x168>)
 8003c62:	695a      	ldr	r2, [r3, #20]
 8003c64:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <HAL_UART_MspInit+0x168>)
 8003c66:	2180      	movs	r1, #128	; 0x80
 8003c68:	0289      	lsls	r1, r1, #10
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	615a      	str	r2, [r3, #20]
 8003c6e:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <HAL_UART_MspInit+0x168>)
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	2380      	movs	r3, #128	; 0x80
 8003c74:	029b      	lsls	r3, r3, #10
 8003c76:	4013      	ands	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003c7c:	211c      	movs	r1, #28
 8003c7e:	187b      	adds	r3, r7, r1
 8003c80:	220c      	movs	r2, #12
 8003c82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c84:	187b      	adds	r3, r7, r1
 8003c86:	2202      	movs	r2, #2
 8003c88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8a:	187b      	adds	r3, r7, r1
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c90:	187b      	adds	r3, r7, r1
 8003c92:	2200      	movs	r2, #0
 8003c94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003c96:	187b      	adds	r3, r7, r1
 8003c98:	2201      	movs	r2, #1
 8003c9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9c:	187a      	adds	r2, r7, r1
 8003c9e:	2390      	movs	r3, #144	; 0x90
 8003ca0:	05db      	lsls	r3, r3, #23
 8003ca2:	0011      	movs	r1, r2
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f000 fca9 	bl	80045fc <HAL_GPIO_Init>
}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b00d      	add	sp, #52	; 0x34
 8003cb0:	bd90      	pop	{r4, r7, pc}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	40013800 	.word	0x40013800
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	2000030c 	.word	0x2000030c
 8003cc0:	40020030 	.word	0x40020030
 8003cc4:	40004400 	.word	0x40004400

08003cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ccc:	e7fe      	b.n	8003ccc <NMI_Handler+0x4>

08003cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cd2:	e7fe      	b.n	8003cd2 <HardFault_Handler+0x4>

08003cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003cd8:	46c0      	nop			; (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cec:	f000 f952 	bl	8003f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cf0:	46c0      	nop			; (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <DMA1_Channel2_3_IRQHandler+0x14>)
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f000 fb91 	bl	8004426 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003d04:	46c0      	nop			; (mov r8, r8)
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	2000030c 	.word	0x2000030c

08003d10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d14:	4b03      	ldr	r3, [pc, #12]	; (8003d24 <USART1_IRQHandler+0x14>)
 8003d16:	0018      	movs	r0, r3
 8003d18:	f001 fc1e 	bl	8005558 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d1c:	46c0      	nop			; (mov r8, r8)
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	200001fc 	.word	0x200001fc

08003d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
	return 1;
 8003d2c:	2301      	movs	r3, #1
}
 8003d2e:	0018      	movs	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <_kill>:

int _kill(int pid, int sig)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d3e:	f002 fcc5 	bl	80066cc <__errno>
 8003d42:	0003      	movs	r3, r0
 8003d44:	2216      	movs	r2, #22
 8003d46:	601a      	str	r2, [r3, #0]
	return -1;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	425b      	negs	r3, r3
}
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b002      	add	sp, #8
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <_exit>:

void _exit (int status)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	425a      	negs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	0011      	movs	r1, r2
 8003d64:	0018      	movs	r0, r3
 8003d66:	f7ff ffe5 	bl	8003d34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d6a:	e7fe      	b.n	8003d6a <_exit+0x16>

08003d6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	e00a      	b.n	8003d94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d7e:	e000      	b.n	8003d82 <_read+0x16>
 8003d80:	bf00      	nop
 8003d82:	0001      	movs	r1, r0
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	60ba      	str	r2, [r7, #8]
 8003d8a:	b2ca      	uxtb	r2, r1
 8003d8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	3301      	adds	r3, #1
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	dbf0      	blt.n	8003d7e <_read+0x12>
	}

return len;
 8003d9c:	687b      	ldr	r3, [r7, #4]
}
 8003d9e:	0018      	movs	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b006      	add	sp, #24
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	e009      	b.n	8003dcc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	60ba      	str	r2, [r7, #8]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	e000      	b.n	8003dc6 <_write+0x20>
 8003dc4:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	dbf1      	blt.n	8003db8 <_write+0x12>
	}
	return len;
 8003dd4:	687b      	ldr	r3, [r7, #4]
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b006      	add	sp, #24
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <_close>:

int _close(int file)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
	return -1;
 8003de6:	2301      	movs	r3, #1
 8003de8:	425b      	negs	r3, r3
}
 8003dea:	0018      	movs	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b002      	add	sp, #8
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2280      	movs	r2, #128	; 0x80
 8003e00:	0192      	lsls	r2, r2, #6
 8003e02:	605a      	str	r2, [r3, #4]
	return 0;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b002      	add	sp, #8
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <_isatty>:

int _isatty(int file)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
	return 1;
 8003e16:	2301      	movs	r3, #1
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b002      	add	sp, #8
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
	return 0;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	0018      	movs	r0, r3
 8003e30:	46bd      	mov	sp, r7
 8003e32:	b004      	add	sp, #16
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e40:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <_sbrk+0x5c>)
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <_sbrk+0x60>)
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e4c:	4b13      	ldr	r3, [pc, #76]	; (8003e9c <_sbrk+0x64>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d102      	bne.n	8003e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e54:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <_sbrk+0x64>)
 8003e56:	4a12      	ldr	r2, [pc, #72]	; (8003ea0 <_sbrk+0x68>)
 8003e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e5a:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <_sbrk+0x64>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	18d3      	adds	r3, r2, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d207      	bcs.n	8003e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e68:	f002 fc30 	bl	80066cc <__errno>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	220c      	movs	r2, #12
 8003e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e72:	2301      	movs	r3, #1
 8003e74:	425b      	negs	r3, r3
 8003e76:	e009      	b.n	8003e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e78:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <_sbrk+0x64>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <_sbrk+0x64>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	18d2      	adds	r2, r2, r3
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <_sbrk+0x64>)
 8003e88:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
}
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b006      	add	sp, #24
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20002000 	.word	0x20002000
 8003e98:	00000400 	.word	0x00000400
 8003e9c:	2000060c 	.word	0x2000060c
 8003ea0:	20000628 	.word	0x20000628

08003ea4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003ea8:	46c0      	nop			; (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003eb0:	480d      	ldr	r0, [pc, #52]	; (8003ee8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003eb2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003eb4:	f7ff fff6 	bl	8003ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003eb8:	480c      	ldr	r0, [pc, #48]	; (8003eec <LoopForever+0x6>)
  ldr r1, =_edata
 8003eba:	490d      	ldr	r1, [pc, #52]	; (8003ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ebc:	4a0d      	ldr	r2, [pc, #52]	; (8003ef4 <LoopForever+0xe>)
  movs r3, #0
 8003ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ec0:	e002      	b.n	8003ec8 <LoopCopyDataInit>

08003ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ec6:	3304      	adds	r3, #4

08003ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ecc:	d3f9      	bcc.n	8003ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ece:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ed0:	4c0a      	ldr	r4, [pc, #40]	; (8003efc <LoopForever+0x16>)
  movs r3, #0
 8003ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ed4:	e001      	b.n	8003eda <LoopFillZerobss>

08003ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ed8:	3204      	adds	r2, #4

08003eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003edc:	d3fb      	bcc.n	8003ed6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003ede:	f002 fbfb 	bl	80066d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ee2:	f7fe fe9d 	bl	8002c20 <main>

08003ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ee6:	e7fe      	b.n	8003ee6 <LoopForever>
  ldr   r0, =_estack
 8003ee8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ef0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003ef4:	0800b608 	.word	0x0800b608
  ldr r2, =_sbss
 8003ef8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003efc:	20000624 	.word	0x20000624

08003f00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f00:	e7fe      	b.n	8003f00 <ADC1_IRQHandler>
	...

08003f04 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f08:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <HAL_Init+0x24>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_Init+0x24>)
 8003f0e:	2110      	movs	r1, #16
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003f14:	2000      	movs	r0, #0
 8003f16:	f000 f809 	bl	8003f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f1a:	f7ff fdf5 	bl	8003b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	0018      	movs	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	40022000 	.word	0x40022000

08003f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f34:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <HAL_InitTick+0x5c>)
 8003f36:	681c      	ldr	r4, [r3, #0]
 8003f38:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <HAL_InitTick+0x60>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	0019      	movs	r1, r3
 8003f3e:	23fa      	movs	r3, #250	; 0xfa
 8003f40:	0098      	lsls	r0, r3, #2
 8003f42:	f7fc f8fd 	bl	8000140 <__udivsi3>
 8003f46:	0003      	movs	r3, r0
 8003f48:	0019      	movs	r1, r3
 8003f4a:	0020      	movs	r0, r4
 8003f4c:	f7fc f8f8 	bl	8000140 <__udivsi3>
 8003f50:	0003      	movs	r3, r0
 8003f52:	0018      	movs	r0, r3
 8003f54:	f000 f92f 	bl	80041b6 <HAL_SYSTICK_Config>
 8003f58:	1e03      	subs	r3, r0, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e00f      	b.n	8003f80 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d80b      	bhi.n	8003f7e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	2301      	movs	r3, #1
 8003f6a:	425b      	negs	r3, r3
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f000 f8fc 	bl	800416c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f74:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <HAL_InitTick+0x64>)
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e000      	b.n	8003f80 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
}
 8003f80:	0018      	movs	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	b003      	add	sp, #12
 8003f86:	bd90      	pop	{r4, r7, pc}
 8003f88:	20000000 	.word	0x20000000
 8003f8c:	20000008 	.word	0x20000008
 8003f90:	20000004 	.word	0x20000004

08003f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f98:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <HAL_IncTick+0x1c>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	001a      	movs	r2, r3
 8003f9e:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <HAL_IncTick+0x20>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	18d2      	adds	r2, r2, r3
 8003fa4:	4b03      	ldr	r3, [pc, #12]	; (8003fb4 <HAL_IncTick+0x20>)
 8003fa6:	601a      	str	r2, [r3, #0]
}
 8003fa8:	46c0      	nop			; (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	20000008 	.word	0x20000008
 8003fb4:	20000610 	.word	0x20000610

08003fb8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  return uwTick;
 8003fbc:	4b02      	ldr	r3, [pc, #8]	; (8003fc8 <HAL_GetTick+0x10>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
}
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	20000610 	.word	0x20000610

08003fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fd4:	f7ff fff0 	bl	8003fb8 <HAL_GetTick>
 8003fd8:	0003      	movs	r3, r0
 8003fda:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	d005      	beq.n	8003ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <HAL_Delay+0x44>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	001a      	movs	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	189b      	adds	r3, r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	f7ff ffe0 	bl	8003fb8 <HAL_GetTick>
 8003ff8:	0002      	movs	r2, r0
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	429a      	cmp	r2, r3
 8004002:	d8f7      	bhi.n	8003ff4 <HAL_Delay+0x28>
  {
  }
}
 8004004:	46c0      	nop			; (mov r8, r8)
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	46bd      	mov	sp, r7
 800400a:	b004      	add	sp, #16
 800400c:	bd80      	pop	{r7, pc}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	20000008 	.word	0x20000008

08004014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	0002      	movs	r2, r0
 800401c:	1dfb      	adds	r3, r7, #7
 800401e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004020:	1dfb      	adds	r3, r7, #7
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b7f      	cmp	r3, #127	; 0x7f
 8004026:	d809      	bhi.n	800403c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004028:	1dfb      	adds	r3, r7, #7
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	001a      	movs	r2, r3
 800402e:	231f      	movs	r3, #31
 8004030:	401a      	ands	r2, r3
 8004032:	4b04      	ldr	r3, [pc, #16]	; (8004044 <__NVIC_EnableIRQ+0x30>)
 8004034:	2101      	movs	r1, #1
 8004036:	4091      	lsls	r1, r2
 8004038:	000a      	movs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]
  }
}
 800403c:	46c0      	nop			; (mov r8, r8)
 800403e:	46bd      	mov	sp, r7
 8004040:	b002      	add	sp, #8
 8004042:	bd80      	pop	{r7, pc}
 8004044:	e000e100 	.word	0xe000e100

08004048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	0002      	movs	r2, r0
 8004050:	6039      	str	r1, [r7, #0]
 8004052:	1dfb      	adds	r3, r7, #7
 8004054:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004056:	1dfb      	adds	r3, r7, #7
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b7f      	cmp	r3, #127	; 0x7f
 800405c:	d828      	bhi.n	80040b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800405e:	4a2f      	ldr	r2, [pc, #188]	; (800411c <__NVIC_SetPriority+0xd4>)
 8004060:	1dfb      	adds	r3, r7, #7
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	b25b      	sxtb	r3, r3
 8004066:	089b      	lsrs	r3, r3, #2
 8004068:	33c0      	adds	r3, #192	; 0xc0
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	589b      	ldr	r3, [r3, r2]
 800406e:	1dfa      	adds	r2, r7, #7
 8004070:	7812      	ldrb	r2, [r2, #0]
 8004072:	0011      	movs	r1, r2
 8004074:	2203      	movs	r2, #3
 8004076:	400a      	ands	r2, r1
 8004078:	00d2      	lsls	r2, r2, #3
 800407a:	21ff      	movs	r1, #255	; 0xff
 800407c:	4091      	lsls	r1, r2
 800407e:	000a      	movs	r2, r1
 8004080:	43d2      	mvns	r2, r2
 8004082:	401a      	ands	r2, r3
 8004084:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	019b      	lsls	r3, r3, #6
 800408a:	22ff      	movs	r2, #255	; 0xff
 800408c:	401a      	ands	r2, r3
 800408e:	1dfb      	adds	r3, r7, #7
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	0018      	movs	r0, r3
 8004094:	2303      	movs	r3, #3
 8004096:	4003      	ands	r3, r0
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800409c:	481f      	ldr	r0, [pc, #124]	; (800411c <__NVIC_SetPriority+0xd4>)
 800409e:	1dfb      	adds	r3, r7, #7
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	b25b      	sxtb	r3, r3
 80040a4:	089b      	lsrs	r3, r3, #2
 80040a6:	430a      	orrs	r2, r1
 80040a8:	33c0      	adds	r3, #192	; 0xc0
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80040ae:	e031      	b.n	8004114 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040b0:	4a1b      	ldr	r2, [pc, #108]	; (8004120 <__NVIC_SetPriority+0xd8>)
 80040b2:	1dfb      	adds	r3, r7, #7
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	0019      	movs	r1, r3
 80040b8:	230f      	movs	r3, #15
 80040ba:	400b      	ands	r3, r1
 80040bc:	3b08      	subs	r3, #8
 80040be:	089b      	lsrs	r3, r3, #2
 80040c0:	3306      	adds	r3, #6
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	18d3      	adds	r3, r2, r3
 80040c6:	3304      	adds	r3, #4
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	1dfa      	adds	r2, r7, #7
 80040cc:	7812      	ldrb	r2, [r2, #0]
 80040ce:	0011      	movs	r1, r2
 80040d0:	2203      	movs	r2, #3
 80040d2:	400a      	ands	r2, r1
 80040d4:	00d2      	lsls	r2, r2, #3
 80040d6:	21ff      	movs	r1, #255	; 0xff
 80040d8:	4091      	lsls	r1, r2
 80040da:	000a      	movs	r2, r1
 80040dc:	43d2      	mvns	r2, r2
 80040de:	401a      	ands	r2, r3
 80040e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	019b      	lsls	r3, r3, #6
 80040e6:	22ff      	movs	r2, #255	; 0xff
 80040e8:	401a      	ands	r2, r3
 80040ea:	1dfb      	adds	r3, r7, #7
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	0018      	movs	r0, r3
 80040f0:	2303      	movs	r3, #3
 80040f2:	4003      	ands	r3, r0
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040f8:	4809      	ldr	r0, [pc, #36]	; (8004120 <__NVIC_SetPriority+0xd8>)
 80040fa:	1dfb      	adds	r3, r7, #7
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	001c      	movs	r4, r3
 8004100:	230f      	movs	r3, #15
 8004102:	4023      	ands	r3, r4
 8004104:	3b08      	subs	r3, #8
 8004106:	089b      	lsrs	r3, r3, #2
 8004108:	430a      	orrs	r2, r1
 800410a:	3306      	adds	r3, #6
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	18c3      	adds	r3, r0, r3
 8004110:	3304      	adds	r3, #4
 8004112:	601a      	str	r2, [r3, #0]
}
 8004114:	46c0      	nop			; (mov r8, r8)
 8004116:	46bd      	mov	sp, r7
 8004118:	b003      	add	sp, #12
 800411a:	bd90      	pop	{r4, r7, pc}
 800411c:	e000e100 	.word	0xe000e100
 8004120:	e000ed00 	.word	0xe000ed00

08004124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	1e5a      	subs	r2, r3, #1
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	045b      	lsls	r3, r3, #17
 8004134:	429a      	cmp	r2, r3
 8004136:	d301      	bcc.n	800413c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004138:	2301      	movs	r3, #1
 800413a:	e010      	b.n	800415e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <SysTick_Config+0x44>)
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	3a01      	subs	r2, #1
 8004142:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004144:	2301      	movs	r3, #1
 8004146:	425b      	negs	r3, r3
 8004148:	2103      	movs	r1, #3
 800414a:	0018      	movs	r0, r3
 800414c:	f7ff ff7c 	bl	8004048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004150:	4b05      	ldr	r3, [pc, #20]	; (8004168 <SysTick_Config+0x44>)
 8004152:	2200      	movs	r2, #0
 8004154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004156:	4b04      	ldr	r3, [pc, #16]	; (8004168 <SysTick_Config+0x44>)
 8004158:	2207      	movs	r2, #7
 800415a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800415c:	2300      	movs	r3, #0
}
 800415e:	0018      	movs	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	b002      	add	sp, #8
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	e000e010 	.word	0xe000e010

0800416c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
 8004176:	210f      	movs	r1, #15
 8004178:	187b      	adds	r3, r7, r1
 800417a:	1c02      	adds	r2, r0, #0
 800417c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	187b      	adds	r3, r7, r1
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	b25b      	sxtb	r3, r3
 8004186:	0011      	movs	r1, r2
 8004188:	0018      	movs	r0, r3
 800418a:	f7ff ff5d 	bl	8004048 <__NVIC_SetPriority>
}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	46bd      	mov	sp, r7
 8004192:	b004      	add	sp, #16
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	0002      	movs	r2, r0
 800419e:	1dfb      	adds	r3, r7, #7
 80041a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041a2:	1dfb      	adds	r3, r7, #7
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b25b      	sxtb	r3, r3
 80041a8:	0018      	movs	r0, r3
 80041aa:	f7ff ff33 	bl	8004014 <__NVIC_EnableIRQ>
}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b002      	add	sp, #8
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	0018      	movs	r0, r3
 80041c2:	f7ff ffaf 	bl	8004124 <SysTick_Config>
 80041c6:	0003      	movs	r3, r0
}
 80041c8:	0018      	movs	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b002      	add	sp, #8
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e036      	b.n	8004254 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2221      	movs	r2, #33	; 0x21
 80041ea:	2102      	movs	r1, #2
 80041ec:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4a18      	ldr	r2, [pc, #96]	; (800425c <HAL_DMA_Init+0x8c>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004206:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004212:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800421e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	0018      	movs	r0, r3
 8004238:	f000 f9c4 	bl	80045c4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2221      	movs	r2, #33	; 0x21
 8004246:	2101      	movs	r1, #1
 8004248:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	2100      	movs	r1, #0
 8004250:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	0018      	movs	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	b004      	add	sp, #16
 800425a:	bd80      	pop	{r7, pc}
 800425c:	ffffc00f 	.word	0xffffc00f

08004260 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426e:	2317      	movs	r3, #23
 8004270:	18fb      	adds	r3, r7, r3
 8004272:	2200      	movs	r2, #0
 8004274:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	5c9b      	ldrb	r3, [r3, r2]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_DMA_Start_IT+0x24>
 8004280:	2302      	movs	r3, #2
 8004282:	e04f      	b.n	8004324 <HAL_DMA_Start_IT+0xc4>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	2101      	movs	r1, #1
 800428a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2221      	movs	r2, #33	; 0x21
 8004290:	5c9b      	ldrb	r3, [r3, r2]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	d13a      	bne.n	800430e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2221      	movs	r2, #33	; 0x21
 800429c:	2102      	movs	r1, #2
 800429e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2101      	movs	r1, #1
 80042b2:	438a      	bics	r2, r1
 80042b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f954 	bl	800456a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	210e      	movs	r1, #14
 80042d6:	430a      	orrs	r2, r1
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	e00f      	b.n	80042fc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	210a      	movs	r1, #10
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2104      	movs	r1, #4
 80042f8:	438a      	bics	r2, r1
 80042fa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2101      	movs	r1, #1
 8004308:	430a      	orrs	r2, r1
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	e007      	b.n	800431e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	2100      	movs	r1, #0
 8004314:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004316:	2317      	movs	r3, #23
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	2202      	movs	r2, #2
 800431c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800431e:	2317      	movs	r3, #23
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	781b      	ldrb	r3, [r3, #0]
}
 8004324:	0018      	movs	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	b006      	add	sp, #24
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2221      	movs	r2, #33	; 0x21
 8004338:	5c9b      	ldrb	r3, [r3, r2]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d008      	beq.n	8004352 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2204      	movs	r2, #4
 8004344:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	2100      	movs	r1, #0
 800434c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e020      	b.n	8004394 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	210e      	movs	r1, #14
 800435e:	438a      	bics	r2, r1
 8004360:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2101      	movs	r1, #1
 800436e:	438a      	bics	r2, r1
 8004370:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	2101      	movs	r1, #1
 800437c:	4091      	lsls	r1, r2
 800437e:	000a      	movs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2221      	movs	r2, #33	; 0x21
 8004386:	2101      	movs	r1, #1
 8004388:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	2100      	movs	r1, #0
 8004390:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	0018      	movs	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	b002      	add	sp, #8
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a4:	210f      	movs	r1, #15
 80043a6:	187b      	adds	r3, r7, r1
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2221      	movs	r2, #33	; 0x21
 80043b0:	5c9b      	ldrb	r3, [r3, r2]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d006      	beq.n	80043c6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2204      	movs	r2, #4
 80043bc:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80043be:	187b      	adds	r3, r7, r1
 80043c0:	2201      	movs	r2, #1
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	e028      	b.n	8004418 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	210e      	movs	r1, #14
 80043d2:	438a      	bics	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2101      	movs	r1, #1
 80043e2:	438a      	bics	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ee:	2101      	movs	r1, #1
 80043f0:	4091      	lsls	r1, r2
 80043f2:	000a      	movs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2221      	movs	r2, #33	; 0x21
 80043fa:	2101      	movs	r1, #1
 80043fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	2100      	movs	r1, #0
 8004404:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440a:	2b00      	cmp	r3, #0
 800440c:	d004      	beq.n	8004418 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	0010      	movs	r0, r2
 8004416:	4798      	blx	r3
    }
  }
  return status;
 8004418:	230f      	movs	r3, #15
 800441a:	18fb      	adds	r3, r7, r3
 800441c:	781b      	ldrb	r3, [r3, #0]
}
 800441e:	0018      	movs	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	b004      	add	sp, #16
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	2204      	movs	r2, #4
 8004444:	409a      	lsls	r2, r3
 8004446:	0013      	movs	r3, r2
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4013      	ands	r3, r2
 800444c:	d024      	beq.n	8004498 <HAL_DMA_IRQHandler+0x72>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2204      	movs	r2, #4
 8004452:	4013      	ands	r3, r2
 8004454:	d020      	beq.n	8004498 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2220      	movs	r2, #32
 800445e:	4013      	ands	r3, r2
 8004460:	d107      	bne.n	8004472 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2104      	movs	r1, #4
 800446e:	438a      	bics	r2, r1
 8004470:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	2104      	movs	r1, #4
 800447c:	4091      	lsls	r1, r2
 800447e:	000a      	movs	r2, r1
 8004480:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d100      	bne.n	800448c <HAL_DMA_IRQHandler+0x66>
 800448a:	e06a      	b.n	8004562 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	0010      	movs	r0, r2
 8004494:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004496:	e064      	b.n	8004562 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	2202      	movs	r2, #2
 800449e:	409a      	lsls	r2, r3
 80044a0:	0013      	movs	r3, r2
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4013      	ands	r3, r2
 80044a6:	d02b      	beq.n	8004500 <HAL_DMA_IRQHandler+0xda>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2202      	movs	r2, #2
 80044ac:	4013      	ands	r3, r2
 80044ae:	d027      	beq.n	8004500 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2220      	movs	r2, #32
 80044b8:	4013      	ands	r3, r2
 80044ba:	d10b      	bne.n	80044d4 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	210a      	movs	r1, #10
 80044c8:	438a      	bics	r2, r1
 80044ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2221      	movs	r2, #33	; 0x21
 80044d0:	2101      	movs	r1, #1
 80044d2:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	2102      	movs	r1, #2
 80044de:	4091      	lsls	r1, r2
 80044e0:	000a      	movs	r2, r1
 80044e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	2100      	movs	r1, #0
 80044ea:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d036      	beq.n	8004562 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	0010      	movs	r0, r2
 80044fc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80044fe:	e030      	b.n	8004562 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	2208      	movs	r2, #8
 8004506:	409a      	lsls	r2, r3
 8004508:	0013      	movs	r3, r2
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4013      	ands	r3, r2
 800450e:	d028      	beq.n	8004562 <HAL_DMA_IRQHandler+0x13c>
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2208      	movs	r2, #8
 8004514:	4013      	ands	r3, r2
 8004516:	d024      	beq.n	8004562 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	210e      	movs	r1, #14
 8004524:	438a      	bics	r2, r1
 8004526:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004530:	2101      	movs	r1, #1
 8004532:	4091      	lsls	r1, r2
 8004534:	000a      	movs	r2, r1
 8004536:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2221      	movs	r2, #33	; 0x21
 8004542:	2101      	movs	r1, #1
 8004544:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2220      	movs	r2, #32
 800454a:	2100      	movs	r1, #0
 800454c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	0010      	movs	r0, r2
 800455e:	4798      	blx	r3
    }
  }
}
 8004560:	e7ff      	b.n	8004562 <HAL_DMA_IRQHandler+0x13c>
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	46bd      	mov	sp, r7
 8004566:	b004      	add	sp, #16
 8004568:	bd80      	pop	{r7, pc}

0800456a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004580:	2101      	movs	r1, #1
 8004582:	4091      	lsls	r1, r2
 8004584:	000a      	movs	r2, r1
 8004586:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b10      	cmp	r3, #16
 8004596:	d108      	bne.n	80045aa <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045a8:	e007      	b.n	80045ba <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	60da      	str	r2, [r3, #12]
}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	46bd      	mov	sp, r7
 80045be:	b004      	add	sp, #16
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a08      	ldr	r2, [pc, #32]	; (80045f4 <DMA_CalcBaseAndBitshift+0x30>)
 80045d2:	4694      	mov	ip, r2
 80045d4:	4463      	add	r3, ip
 80045d6:	2114      	movs	r1, #20
 80045d8:	0018      	movs	r0, r3
 80045da:	f7fb fdb1 	bl	8000140 <__udivsi3>
 80045de:	0003      	movs	r3, r0
 80045e0:	009a      	lsls	r2, r3, #2
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a03      	ldr	r2, [pc, #12]	; (80045f8 <DMA_CalcBaseAndBitshift+0x34>)
 80045ea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80045ec:	46c0      	nop			; (mov r8, r8)
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b002      	add	sp, #8
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	bffdfff8 	.word	0xbffdfff8
 80045f8:	40020000 	.word	0x40020000

080045fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800460a:	e14f      	b.n	80048ac <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2101      	movs	r1, #1
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4091      	lsls	r1, r2
 8004616:	000a      	movs	r2, r1
 8004618:	4013      	ands	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d100      	bne.n	8004624 <HAL_GPIO_Init+0x28>
 8004622:	e140      	b.n	80048a6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2203      	movs	r2, #3
 800462a:	4013      	ands	r3, r2
 800462c:	2b01      	cmp	r3, #1
 800462e:	d005      	beq.n	800463c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2203      	movs	r2, #3
 8004636:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004638:	2b02      	cmp	r3, #2
 800463a:	d130      	bne.n	800469e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	2203      	movs	r2, #3
 8004648:	409a      	lsls	r2, r3
 800464a:	0013      	movs	r3, r2
 800464c:	43da      	mvns	r2, r3
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4013      	ands	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	409a      	lsls	r2, r3
 800465e:	0013      	movs	r3, r2
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004672:	2201      	movs	r2, #1
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	409a      	lsls	r2, r3
 8004678:	0013      	movs	r3, r2
 800467a:	43da      	mvns	r2, r3
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4013      	ands	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	091b      	lsrs	r3, r3, #4
 8004688:	2201      	movs	r2, #1
 800468a:	401a      	ands	r2, r3
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	409a      	lsls	r2, r3
 8004690:	0013      	movs	r3, r2
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2203      	movs	r2, #3
 80046a4:	4013      	ands	r3, r2
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d017      	beq.n	80046da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	2203      	movs	r2, #3
 80046b6:	409a      	lsls	r2, r3
 80046b8:	0013      	movs	r3, r2
 80046ba:	43da      	mvns	r2, r3
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4013      	ands	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	409a      	lsls	r2, r3
 80046cc:	0013      	movs	r3, r2
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2203      	movs	r2, #3
 80046e0:	4013      	ands	r3, r2
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d123      	bne.n	800472e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	08da      	lsrs	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3208      	adds	r2, #8
 80046ee:	0092      	lsls	r2, r2, #2
 80046f0:	58d3      	ldr	r3, [r2, r3]
 80046f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2207      	movs	r2, #7
 80046f8:	4013      	ands	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	220f      	movs	r2, #15
 80046fe:	409a      	lsls	r2, r3
 8004700:	0013      	movs	r3, r2
 8004702:	43da      	mvns	r2, r3
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4013      	ands	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2107      	movs	r1, #7
 8004712:	400b      	ands	r3, r1
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	409a      	lsls	r2, r3
 8004718:	0013      	movs	r3, r2
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	08da      	lsrs	r2, r3, #3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3208      	adds	r2, #8
 8004728:	0092      	lsls	r2, r2, #2
 800472a:	6939      	ldr	r1, [r7, #16]
 800472c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	2203      	movs	r2, #3
 800473a:	409a      	lsls	r2, r3
 800473c:	0013      	movs	r3, r2
 800473e:	43da      	mvns	r2, r3
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4013      	ands	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2203      	movs	r2, #3
 800474c:	401a      	ands	r2, r3
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	409a      	lsls	r2, r3
 8004754:	0013      	movs	r3, r2
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	23c0      	movs	r3, #192	; 0xc0
 8004768:	029b      	lsls	r3, r3, #10
 800476a:	4013      	ands	r3, r2
 800476c:	d100      	bne.n	8004770 <HAL_GPIO_Init+0x174>
 800476e:	e09a      	b.n	80048a6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004770:	4b54      	ldr	r3, [pc, #336]	; (80048c4 <HAL_GPIO_Init+0x2c8>)
 8004772:	699a      	ldr	r2, [r3, #24]
 8004774:	4b53      	ldr	r3, [pc, #332]	; (80048c4 <HAL_GPIO_Init+0x2c8>)
 8004776:	2101      	movs	r1, #1
 8004778:	430a      	orrs	r2, r1
 800477a:	619a      	str	r2, [r3, #24]
 800477c:	4b51      	ldr	r3, [pc, #324]	; (80048c4 <HAL_GPIO_Init+0x2c8>)
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	2201      	movs	r2, #1
 8004782:	4013      	ands	r3, r2
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004788:	4a4f      	ldr	r2, [pc, #316]	; (80048c8 <HAL_GPIO_Init+0x2cc>)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	089b      	lsrs	r3, r3, #2
 800478e:	3302      	adds	r3, #2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	589b      	ldr	r3, [r3, r2]
 8004794:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2203      	movs	r2, #3
 800479a:	4013      	ands	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	220f      	movs	r2, #15
 80047a0:	409a      	lsls	r2, r3
 80047a2:	0013      	movs	r3, r2
 80047a4:	43da      	mvns	r2, r3
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4013      	ands	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	2390      	movs	r3, #144	; 0x90
 80047b0:	05db      	lsls	r3, r3, #23
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d013      	beq.n	80047de <HAL_GPIO_Init+0x1e2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a44      	ldr	r2, [pc, #272]	; (80048cc <HAL_GPIO_Init+0x2d0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00d      	beq.n	80047da <HAL_GPIO_Init+0x1de>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a43      	ldr	r2, [pc, #268]	; (80048d0 <HAL_GPIO_Init+0x2d4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <HAL_GPIO_Init+0x1da>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a42      	ldr	r2, [pc, #264]	; (80048d4 <HAL_GPIO_Init+0x2d8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d101      	bne.n	80047d2 <HAL_GPIO_Init+0x1d6>
 80047ce:	2303      	movs	r3, #3
 80047d0:	e006      	b.n	80047e0 <HAL_GPIO_Init+0x1e4>
 80047d2:	2305      	movs	r3, #5
 80047d4:	e004      	b.n	80047e0 <HAL_GPIO_Init+0x1e4>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e002      	b.n	80047e0 <HAL_GPIO_Init+0x1e4>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <HAL_GPIO_Init+0x1e4>
 80047de:	2300      	movs	r3, #0
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	2103      	movs	r1, #3
 80047e4:	400a      	ands	r2, r1
 80047e6:	0092      	lsls	r2, r2, #2
 80047e8:	4093      	lsls	r3, r2
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80047f0:	4935      	ldr	r1, [pc, #212]	; (80048c8 <HAL_GPIO_Init+0x2cc>)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	089b      	lsrs	r3, r3, #2
 80047f6:	3302      	adds	r3, #2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047fe:	4b36      	ldr	r3, [pc, #216]	; (80048d8 <HAL_GPIO_Init+0x2dc>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	43da      	mvns	r2, r3
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4013      	ands	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	035b      	lsls	r3, r3, #13
 8004816:	4013      	ands	r3, r2
 8004818:	d003      	beq.n	8004822 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004822:	4b2d      	ldr	r3, [pc, #180]	; (80048d8 <HAL_GPIO_Init+0x2dc>)
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004828:	4b2b      	ldr	r3, [pc, #172]	; (80048d8 <HAL_GPIO_Init+0x2dc>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	43da      	mvns	r2, r3
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4013      	ands	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	039b      	lsls	r3, r3, #14
 8004840:	4013      	ands	r3, r2
 8004842:	d003      	beq.n	800484c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800484c:	4b22      	ldr	r3, [pc, #136]	; (80048d8 <HAL_GPIO_Init+0x2dc>)
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004852:	4b21      	ldr	r3, [pc, #132]	; (80048d8 <HAL_GPIO_Init+0x2dc>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	43da      	mvns	r2, r3
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	4013      	ands	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	029b      	lsls	r3, r3, #10
 800486a:	4013      	ands	r3, r2
 800486c:	d003      	beq.n	8004876 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004876:	4b18      	ldr	r3, [pc, #96]	; (80048d8 <HAL_GPIO_Init+0x2dc>)
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800487c:	4b16      	ldr	r3, [pc, #88]	; (80048d8 <HAL_GPIO_Init+0x2dc>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	43da      	mvns	r2, r3
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4013      	ands	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	2380      	movs	r3, #128	; 0x80
 8004892:	025b      	lsls	r3, r3, #9
 8004894:	4013      	ands	r3, r2
 8004896:	d003      	beq.n	80048a0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80048a0:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <HAL_GPIO_Init+0x2dc>)
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	3301      	adds	r3, #1
 80048aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	40da      	lsrs	r2, r3
 80048b4:	1e13      	subs	r3, r2, #0
 80048b6:	d000      	beq.n	80048ba <HAL_GPIO_Init+0x2be>
 80048b8:	e6a8      	b.n	800460c <HAL_GPIO_Init+0x10>
  } 
}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	46c0      	nop			; (mov r8, r8)
 80048be:	46bd      	mov	sp, r7
 80048c0:	b006      	add	sp, #24
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40010000 	.word	0x40010000
 80048cc:	48000400 	.word	0x48000400
 80048d0:	48000800 	.word	0x48000800
 80048d4:	48000c00 	.word	0x48000c00
 80048d8:	40010400 	.word	0x40010400

080048dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	0008      	movs	r0, r1
 80048e6:	0011      	movs	r1, r2
 80048e8:	1cbb      	adds	r3, r7, #2
 80048ea:	1c02      	adds	r2, r0, #0
 80048ec:	801a      	strh	r2, [r3, #0]
 80048ee:	1c7b      	adds	r3, r7, #1
 80048f0:	1c0a      	adds	r2, r1, #0
 80048f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048f4:	1c7b      	adds	r3, r7, #1
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d004      	beq.n	8004906 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048fc:	1cbb      	adds	r3, r7, #2
 80048fe:	881a      	ldrh	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004904:	e003      	b.n	800490e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004906:	1cbb      	adds	r3, r7, #2
 8004908:	881a      	ldrh	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	46bd      	mov	sp, r7
 8004912:	b002      	add	sp, #8
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e301      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2201      	movs	r2, #1
 8004930:	4013      	ands	r3, r2
 8004932:	d100      	bne.n	8004936 <HAL_RCC_OscConfig+0x1e>
 8004934:	e08d      	b.n	8004a52 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004936:	4bc3      	ldr	r3, [pc, #780]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	220c      	movs	r2, #12
 800493c:	4013      	ands	r3, r2
 800493e:	2b04      	cmp	r3, #4
 8004940:	d00e      	beq.n	8004960 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004942:	4bc0      	ldr	r3, [pc, #768]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	220c      	movs	r2, #12
 8004948:	4013      	ands	r3, r2
 800494a:	2b08      	cmp	r3, #8
 800494c:	d116      	bne.n	800497c <HAL_RCC_OscConfig+0x64>
 800494e:	4bbd      	ldr	r3, [pc, #756]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	2380      	movs	r3, #128	; 0x80
 8004954:	025b      	lsls	r3, r3, #9
 8004956:	401a      	ands	r2, r3
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	025b      	lsls	r3, r3, #9
 800495c:	429a      	cmp	r2, r3
 800495e:	d10d      	bne.n	800497c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004960:	4bb8      	ldr	r3, [pc, #736]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	2380      	movs	r3, #128	; 0x80
 8004966:	029b      	lsls	r3, r3, #10
 8004968:	4013      	ands	r3, r2
 800496a:	d100      	bne.n	800496e <HAL_RCC_OscConfig+0x56>
 800496c:	e070      	b.n	8004a50 <HAL_RCC_OscConfig+0x138>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d000      	beq.n	8004978 <HAL_RCC_OscConfig+0x60>
 8004976:	e06b      	b.n	8004a50 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e2d8      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d107      	bne.n	8004994 <HAL_RCC_OscConfig+0x7c>
 8004984:	4baf      	ldr	r3, [pc, #700]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	4bae      	ldr	r3, [pc, #696]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 800498a:	2180      	movs	r1, #128	; 0x80
 800498c:	0249      	lsls	r1, r1, #9
 800498e:	430a      	orrs	r2, r1
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e02f      	b.n	80049f4 <HAL_RCC_OscConfig+0xdc>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10c      	bne.n	80049b6 <HAL_RCC_OscConfig+0x9e>
 800499c:	4ba9      	ldr	r3, [pc, #676]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4ba8      	ldr	r3, [pc, #672]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 80049a2:	49a9      	ldr	r1, [pc, #676]	; (8004c48 <HAL_RCC_OscConfig+0x330>)
 80049a4:	400a      	ands	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	4ba6      	ldr	r3, [pc, #664]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	4ba5      	ldr	r3, [pc, #660]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 80049ae:	49a7      	ldr	r1, [pc, #668]	; (8004c4c <HAL_RCC_OscConfig+0x334>)
 80049b0:	400a      	ands	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	e01e      	b.n	80049f4 <HAL_RCC_OscConfig+0xdc>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b05      	cmp	r3, #5
 80049bc:	d10e      	bne.n	80049dc <HAL_RCC_OscConfig+0xc4>
 80049be:	4ba1      	ldr	r3, [pc, #644]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	4ba0      	ldr	r3, [pc, #640]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 80049c4:	2180      	movs	r1, #128	; 0x80
 80049c6:	02c9      	lsls	r1, r1, #11
 80049c8:	430a      	orrs	r2, r1
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	4b9d      	ldr	r3, [pc, #628]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	4b9c      	ldr	r3, [pc, #624]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 80049d2:	2180      	movs	r1, #128	; 0x80
 80049d4:	0249      	lsls	r1, r1, #9
 80049d6:	430a      	orrs	r2, r1
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	e00b      	b.n	80049f4 <HAL_RCC_OscConfig+0xdc>
 80049dc:	4b99      	ldr	r3, [pc, #612]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4b98      	ldr	r3, [pc, #608]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 80049e2:	4999      	ldr	r1, [pc, #612]	; (8004c48 <HAL_RCC_OscConfig+0x330>)
 80049e4:	400a      	ands	r2, r1
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	4b96      	ldr	r3, [pc, #600]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	4b95      	ldr	r3, [pc, #596]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 80049ee:	4997      	ldr	r1, [pc, #604]	; (8004c4c <HAL_RCC_OscConfig+0x334>)
 80049f0:	400a      	ands	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d014      	beq.n	8004a26 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fc:	f7ff fadc 	bl	8003fb8 <HAL_GetTick>
 8004a00:	0003      	movs	r3, r0
 8004a02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a06:	f7ff fad7 	bl	8003fb8 <HAL_GetTick>
 8004a0a:	0002      	movs	r2, r0
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b64      	cmp	r3, #100	; 0x64
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e28a      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a18:	4b8a      	ldr	r3, [pc, #552]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	029b      	lsls	r3, r3, #10
 8004a20:	4013      	ands	r3, r2
 8004a22:	d0f0      	beq.n	8004a06 <HAL_RCC_OscConfig+0xee>
 8004a24:	e015      	b.n	8004a52 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a26:	f7ff fac7 	bl	8003fb8 <HAL_GetTick>
 8004a2a:	0003      	movs	r3, r0
 8004a2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a30:	f7ff fac2 	bl	8003fb8 <HAL_GetTick>
 8004a34:	0002      	movs	r2, r0
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b64      	cmp	r3, #100	; 0x64
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e275      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a42:	4b80      	ldr	r3, [pc, #512]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	2380      	movs	r3, #128	; 0x80
 8004a48:	029b      	lsls	r3, r3, #10
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d1f0      	bne.n	8004a30 <HAL_RCC_OscConfig+0x118>
 8004a4e:	e000      	b.n	8004a52 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a50:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2202      	movs	r2, #2
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d100      	bne.n	8004a5e <HAL_RCC_OscConfig+0x146>
 8004a5c:	e069      	b.n	8004b32 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004a5e:	4b79      	ldr	r3, [pc, #484]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	220c      	movs	r2, #12
 8004a64:	4013      	ands	r3, r2
 8004a66:	d00b      	beq.n	8004a80 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004a68:	4b76      	ldr	r3, [pc, #472]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	220c      	movs	r2, #12
 8004a6e:	4013      	ands	r3, r2
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d11c      	bne.n	8004aae <HAL_RCC_OscConfig+0x196>
 8004a74:	4b73      	ldr	r3, [pc, #460]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	2380      	movs	r3, #128	; 0x80
 8004a7a:	025b      	lsls	r3, r3, #9
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d116      	bne.n	8004aae <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a80:	4b70      	ldr	r3, [pc, #448]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2202      	movs	r2, #2
 8004a86:	4013      	ands	r3, r2
 8004a88:	d005      	beq.n	8004a96 <HAL_RCC_OscConfig+0x17e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d001      	beq.n	8004a96 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e24b      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a96:	4b6b      	ldr	r3, [pc, #428]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	22f8      	movs	r2, #248	; 0xf8
 8004a9c:	4393      	bics	r3, r2
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	00da      	lsls	r2, r3, #3
 8004aa6:	4b67      	ldr	r3, [pc, #412]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aac:	e041      	b.n	8004b32 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d024      	beq.n	8004b00 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab6:	4b63      	ldr	r3, [pc, #396]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4b62      	ldr	r3, [pc, #392]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004abc:	2101      	movs	r1, #1
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac2:	f7ff fa79 	bl	8003fb8 <HAL_GetTick>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004acc:	f7ff fa74 	bl	8003fb8 <HAL_GetTick>
 8004ad0:	0002      	movs	r2, r0
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e227      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ade:	4b59      	ldr	r3, [pc, #356]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	d0f1      	beq.n	8004acc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae8:	4b56      	ldr	r3, [pc, #344]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	22f8      	movs	r2, #248	; 0xf8
 8004aee:	4393      	bics	r3, r2
 8004af0:	0019      	movs	r1, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	00da      	lsls	r2, r3, #3
 8004af8:	4b52      	ldr	r3, [pc, #328]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004afa:	430a      	orrs	r2, r1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e018      	b.n	8004b32 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b00:	4b50      	ldr	r3, [pc, #320]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	4b4f      	ldr	r3, [pc, #316]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004b06:	2101      	movs	r1, #1
 8004b08:	438a      	bics	r2, r1
 8004b0a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0c:	f7ff fa54 	bl	8003fb8 <HAL_GetTick>
 8004b10:	0003      	movs	r3, r0
 8004b12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b16:	f7ff fa4f 	bl	8003fb8 <HAL_GetTick>
 8004b1a:	0002      	movs	r2, r0
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e202      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b28:	4b46      	ldr	r3, [pc, #280]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d1f1      	bne.n	8004b16 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2208      	movs	r2, #8
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d036      	beq.n	8004baa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d019      	beq.n	8004b78 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b44:	4b3f      	ldr	r3, [pc, #252]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b48:	4b3e      	ldr	r3, [pc, #248]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b50:	f7ff fa32 	bl	8003fb8 <HAL_GetTick>
 8004b54:	0003      	movs	r3, r0
 8004b56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b5a:	f7ff fa2d 	bl	8003fb8 <HAL_GetTick>
 8004b5e:	0002      	movs	r2, r0
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e1e0      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b6c:	4b35      	ldr	r3, [pc, #212]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	2202      	movs	r2, #2
 8004b72:	4013      	ands	r3, r2
 8004b74:	d0f1      	beq.n	8004b5a <HAL_RCC_OscConfig+0x242>
 8004b76:	e018      	b.n	8004baa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b78:	4b32      	ldr	r3, [pc, #200]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b7c:	4b31      	ldr	r3, [pc, #196]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004b7e:	2101      	movs	r1, #1
 8004b80:	438a      	bics	r2, r1
 8004b82:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b84:	f7ff fa18 	bl	8003fb8 <HAL_GetTick>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b8e:	f7ff fa13 	bl	8003fb8 <HAL_GetTick>
 8004b92:	0002      	movs	r2, r0
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e1c6      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba0:	4b28      	ldr	r3, [pc, #160]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	d1f1      	bne.n	8004b8e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2204      	movs	r2, #4
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d100      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x29e>
 8004bb4:	e0b4      	b.n	8004d20 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bb6:	201f      	movs	r0, #31
 8004bb8:	183b      	adds	r3, r7, r0
 8004bba:	2200      	movs	r2, #0
 8004bbc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bbe:	4b21      	ldr	r3, [pc, #132]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004bc0:	69da      	ldr	r2, [r3, #28]
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	055b      	lsls	r3, r3, #21
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d110      	bne.n	8004bec <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bca:	4b1e      	ldr	r3, [pc, #120]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004bcc:	69da      	ldr	r2, [r3, #28]
 8004bce:	4b1d      	ldr	r3, [pc, #116]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004bd0:	2180      	movs	r1, #128	; 0x80
 8004bd2:	0549      	lsls	r1, r1, #21
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	61da      	str	r2, [r3, #28]
 8004bd8:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	2380      	movs	r3, #128	; 0x80
 8004bde:	055b      	lsls	r3, r3, #21
 8004be0:	4013      	ands	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004be6:	183b      	adds	r3, r7, r0
 8004be8:	2201      	movs	r2, #1
 8004bea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bec:	4b18      	ldr	r3, [pc, #96]	; (8004c50 <HAL_RCC_OscConfig+0x338>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	2380      	movs	r3, #128	; 0x80
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d11a      	bne.n	8004c2e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bf8:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <HAL_RCC_OscConfig+0x338>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	4b14      	ldr	r3, [pc, #80]	; (8004c50 <HAL_RCC_OscConfig+0x338>)
 8004bfe:	2180      	movs	r1, #128	; 0x80
 8004c00:	0049      	lsls	r1, r1, #1
 8004c02:	430a      	orrs	r2, r1
 8004c04:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c06:	f7ff f9d7 	bl	8003fb8 <HAL_GetTick>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c10:	f7ff f9d2 	bl	8003fb8 <HAL_GetTick>
 8004c14:	0002      	movs	r2, r0
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	; 0x64
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e185      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c22:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <HAL_RCC_OscConfig+0x338>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	2380      	movs	r3, #128	; 0x80
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d10e      	bne.n	8004c54 <HAL_RCC_OscConfig+0x33c>
 8004c36:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004c38:	6a1a      	ldr	r2, [r3, #32]
 8004c3a:	4b02      	ldr	r3, [pc, #8]	; (8004c44 <HAL_RCC_OscConfig+0x32c>)
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	621a      	str	r2, [r3, #32]
 8004c42:	e035      	b.n	8004cb0 <HAL_RCC_OscConfig+0x398>
 8004c44:	40021000 	.word	0x40021000
 8004c48:	fffeffff 	.word	0xfffeffff
 8004c4c:	fffbffff 	.word	0xfffbffff
 8004c50:	40007000 	.word	0x40007000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10c      	bne.n	8004c76 <HAL_RCC_OscConfig+0x35e>
 8004c5c:	4bb6      	ldr	r3, [pc, #728]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004c5e:	6a1a      	ldr	r2, [r3, #32]
 8004c60:	4bb5      	ldr	r3, [pc, #724]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004c62:	2101      	movs	r1, #1
 8004c64:	438a      	bics	r2, r1
 8004c66:	621a      	str	r2, [r3, #32]
 8004c68:	4bb3      	ldr	r3, [pc, #716]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004c6a:	6a1a      	ldr	r2, [r3, #32]
 8004c6c:	4bb2      	ldr	r3, [pc, #712]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004c6e:	2104      	movs	r1, #4
 8004c70:	438a      	bics	r2, r1
 8004c72:	621a      	str	r2, [r3, #32]
 8004c74:	e01c      	b.n	8004cb0 <HAL_RCC_OscConfig+0x398>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b05      	cmp	r3, #5
 8004c7c:	d10c      	bne.n	8004c98 <HAL_RCC_OscConfig+0x380>
 8004c7e:	4bae      	ldr	r3, [pc, #696]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004c80:	6a1a      	ldr	r2, [r3, #32]
 8004c82:	4bad      	ldr	r3, [pc, #692]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004c84:	2104      	movs	r1, #4
 8004c86:	430a      	orrs	r2, r1
 8004c88:	621a      	str	r2, [r3, #32]
 8004c8a:	4bab      	ldr	r3, [pc, #684]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004c8c:	6a1a      	ldr	r2, [r3, #32]
 8004c8e:	4baa      	ldr	r3, [pc, #680]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004c90:	2101      	movs	r1, #1
 8004c92:	430a      	orrs	r2, r1
 8004c94:	621a      	str	r2, [r3, #32]
 8004c96:	e00b      	b.n	8004cb0 <HAL_RCC_OscConfig+0x398>
 8004c98:	4ba7      	ldr	r3, [pc, #668]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004c9a:	6a1a      	ldr	r2, [r3, #32]
 8004c9c:	4ba6      	ldr	r3, [pc, #664]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	438a      	bics	r2, r1
 8004ca2:	621a      	str	r2, [r3, #32]
 8004ca4:	4ba4      	ldr	r3, [pc, #656]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004ca6:	6a1a      	ldr	r2, [r3, #32]
 8004ca8:	4ba3      	ldr	r3, [pc, #652]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004caa:	2104      	movs	r1, #4
 8004cac:	438a      	bics	r2, r1
 8004cae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d014      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cb8:	f7ff f97e 	bl	8003fb8 <HAL_GetTick>
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc0:	e009      	b.n	8004cd6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cc2:	f7ff f979 	bl	8003fb8 <HAL_GetTick>
 8004cc6:	0002      	movs	r2, r0
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	4a9b      	ldr	r2, [pc, #620]	; (8004f3c <HAL_RCC_OscConfig+0x624>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e12b      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd6:	4b98      	ldr	r3, [pc, #608]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x3aa>
 8004ce0:	e013      	b.n	8004d0a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce2:	f7ff f969 	bl	8003fb8 <HAL_GetTick>
 8004ce6:	0003      	movs	r3, r0
 8004ce8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cea:	e009      	b.n	8004d00 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cec:	f7ff f964 	bl	8003fb8 <HAL_GetTick>
 8004cf0:	0002      	movs	r2, r0
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	4a91      	ldr	r2, [pc, #580]	; (8004f3c <HAL_RCC_OscConfig+0x624>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e116      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d00:	4b8d      	ldr	r3, [pc, #564]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	2202      	movs	r2, #2
 8004d06:	4013      	ands	r3, r2
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d0a:	231f      	movs	r3, #31
 8004d0c:	18fb      	adds	r3, r7, r3
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d105      	bne.n	8004d20 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d14:	4b88      	ldr	r3, [pc, #544]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	4b87      	ldr	r3, [pc, #540]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004d1a:	4989      	ldr	r1, [pc, #548]	; (8004f40 <HAL_RCC_OscConfig+0x628>)
 8004d1c:	400a      	ands	r2, r1
 8004d1e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2210      	movs	r2, #16
 8004d26:	4013      	ands	r3, r2
 8004d28:	d063      	beq.n	8004df2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d12a      	bne.n	8004d88 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004d32:	4b81      	ldr	r3, [pc, #516]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d36:	4b80      	ldr	r3, [pc, #512]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004d38:	2104      	movs	r1, #4
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004d3e:	4b7e      	ldr	r3, [pc, #504]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d42:	4b7d      	ldr	r3, [pc, #500]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004d44:	2101      	movs	r1, #1
 8004d46:	430a      	orrs	r2, r1
 8004d48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d4a:	f7ff f935 	bl	8003fb8 <HAL_GetTick>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004d54:	f7ff f930 	bl	8003fb8 <HAL_GetTick>
 8004d58:	0002      	movs	r2, r0
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e0e3      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004d66:	4b74      	ldr	r3, [pc, #464]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	d0f1      	beq.n	8004d54 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004d70:	4b71      	ldr	r3, [pc, #452]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d74:	22f8      	movs	r2, #248	; 0xf8
 8004d76:	4393      	bics	r3, r2
 8004d78:	0019      	movs	r1, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	00da      	lsls	r2, r3, #3
 8004d80:	4b6d      	ldr	r3, [pc, #436]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004d82:	430a      	orrs	r2, r1
 8004d84:	635a      	str	r2, [r3, #52]	; 0x34
 8004d86:	e034      	b.n	8004df2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	3305      	adds	r3, #5
 8004d8e:	d111      	bne.n	8004db4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004d90:	4b69      	ldr	r3, [pc, #420]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d94:	4b68      	ldr	r3, [pc, #416]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004d96:	2104      	movs	r1, #4
 8004d98:	438a      	bics	r2, r1
 8004d9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004d9c:	4b66      	ldr	r3, [pc, #408]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da0:	22f8      	movs	r2, #248	; 0xf8
 8004da2:	4393      	bics	r3, r2
 8004da4:	0019      	movs	r1, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	00da      	lsls	r2, r3, #3
 8004dac:	4b62      	ldr	r3, [pc, #392]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004dae:	430a      	orrs	r2, r1
 8004db0:	635a      	str	r2, [r3, #52]	; 0x34
 8004db2:	e01e      	b.n	8004df2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004db4:	4b60      	ldr	r3, [pc, #384]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db8:	4b5f      	ldr	r3, [pc, #380]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004dba:	2104      	movs	r1, #4
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004dc0:	4b5d      	ldr	r3, [pc, #372]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dc4:	4b5c      	ldr	r3, [pc, #368]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	438a      	bics	r2, r1
 8004dca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dcc:	f7ff f8f4 	bl	8003fb8 <HAL_GetTick>
 8004dd0:	0003      	movs	r3, r0
 8004dd2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004dd6:	f7ff f8ef 	bl	8003fb8 <HAL_GetTick>
 8004dda:	0002      	movs	r2, r0
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e0a2      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004de8:	4b53      	ldr	r3, [pc, #332]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	2202      	movs	r2, #2
 8004dee:	4013      	ands	r3, r2
 8004df0:	d1f1      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d100      	bne.n	8004dfc <HAL_RCC_OscConfig+0x4e4>
 8004dfa:	e097      	b.n	8004f2c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dfc:	4b4e      	ldr	r3, [pc, #312]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	220c      	movs	r2, #12
 8004e02:	4013      	ands	r3, r2
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d100      	bne.n	8004e0a <HAL_RCC_OscConfig+0x4f2>
 8004e08:	e06b      	b.n	8004ee2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d14c      	bne.n	8004eac <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e12:	4b49      	ldr	r3, [pc, #292]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4b48      	ldr	r3, [pc, #288]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004e18:	494a      	ldr	r1, [pc, #296]	; (8004f44 <HAL_RCC_OscConfig+0x62c>)
 8004e1a:	400a      	ands	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1e:	f7ff f8cb 	bl	8003fb8 <HAL_GetTick>
 8004e22:	0003      	movs	r3, r0
 8004e24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e28:	f7ff f8c6 	bl	8003fb8 <HAL_GetTick>
 8004e2c:	0002      	movs	r2, r0
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e079      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e3a:	4b3f      	ldr	r3, [pc, #252]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	2380      	movs	r3, #128	; 0x80
 8004e40:	049b      	lsls	r3, r3, #18
 8004e42:	4013      	ands	r3, r2
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e46:	4b3c      	ldr	r3, [pc, #240]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	220f      	movs	r2, #15
 8004e4c:	4393      	bics	r3, r2
 8004e4e:	0019      	movs	r1, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e54:	4b38      	ldr	r3, [pc, #224]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004e56:	430a      	orrs	r2, r1
 8004e58:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e5a:	4b37      	ldr	r3, [pc, #220]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	4a3a      	ldr	r2, [pc, #232]	; (8004f48 <HAL_RCC_OscConfig+0x630>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	0019      	movs	r1, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	4b32      	ldr	r3, [pc, #200]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004e70:	430a      	orrs	r2, r1
 8004e72:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e74:	4b30      	ldr	r3, [pc, #192]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	4b2f      	ldr	r3, [pc, #188]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004e7a:	2180      	movs	r1, #128	; 0x80
 8004e7c:	0449      	lsls	r1, r1, #17
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e82:	f7ff f899 	bl	8003fb8 <HAL_GetTick>
 8004e86:	0003      	movs	r3, r0
 8004e88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e8c:	f7ff f894 	bl	8003fb8 <HAL_GetTick>
 8004e90:	0002      	movs	r2, r0
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e047      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e9e:	4b26      	ldr	r3, [pc, #152]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	2380      	movs	r3, #128	; 0x80
 8004ea4:	049b      	lsls	r3, r3, #18
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCC_OscConfig+0x574>
 8004eaa:	e03f      	b.n	8004f2c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eac:	4b22      	ldr	r3, [pc, #136]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	4b21      	ldr	r3, [pc, #132]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004eb2:	4924      	ldr	r1, [pc, #144]	; (8004f44 <HAL_RCC_OscConfig+0x62c>)
 8004eb4:	400a      	ands	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb8:	f7ff f87e 	bl	8003fb8 <HAL_GetTick>
 8004ebc:	0003      	movs	r3, r0
 8004ebe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec2:	f7ff f879 	bl	8003fb8 <HAL_GetTick>
 8004ec6:	0002      	movs	r2, r0
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e02c      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ed4:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	2380      	movs	r3, #128	; 0x80
 8004eda:	049b      	lsls	r3, r3, #18
 8004edc:	4013      	ands	r3, r2
 8004ede:	d1f0      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x5aa>
 8004ee0:	e024      	b.n	8004f2c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d101      	bne.n	8004eee <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e01f      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004eee:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004ef4:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <HAL_RCC_OscConfig+0x620>)
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	2380      	movs	r3, #128	; 0x80
 8004efe:	025b      	lsls	r3, r3, #9
 8004f00:	401a      	ands	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d10e      	bne.n	8004f28 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	220f      	movs	r2, #15
 8004f0e:	401a      	ands	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d107      	bne.n	8004f28 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	23f0      	movs	r3, #240	; 0xf0
 8004f1c:	039b      	lsls	r3, r3, #14
 8004f1e:	401a      	ands	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d001      	beq.n	8004f2c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	0018      	movs	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b008      	add	sp, #32
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	00001388 	.word	0x00001388
 8004f40:	efffffff 	.word	0xefffffff
 8004f44:	feffffff 	.word	0xfeffffff
 8004f48:	ffc2ffff 	.word	0xffc2ffff

08004f4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0b3      	b.n	80050c8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f60:	4b5b      	ldr	r3, [pc, #364]	; (80050d0 <HAL_RCC_ClockConfig+0x184>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2201      	movs	r2, #1
 8004f66:	4013      	ands	r3, r2
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d911      	bls.n	8004f92 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6e:	4b58      	ldr	r3, [pc, #352]	; (80050d0 <HAL_RCC_ClockConfig+0x184>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2201      	movs	r2, #1
 8004f74:	4393      	bics	r3, r2
 8004f76:	0019      	movs	r1, r3
 8004f78:	4b55      	ldr	r3, [pc, #340]	; (80050d0 <HAL_RCC_ClockConfig+0x184>)
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f80:	4b53      	ldr	r3, [pc, #332]	; (80050d0 <HAL_RCC_ClockConfig+0x184>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2201      	movs	r2, #1
 8004f86:	4013      	ands	r3, r2
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d001      	beq.n	8004f92 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e09a      	b.n	80050c8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2202      	movs	r2, #2
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d015      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	d006      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004fa6:	4b4b      	ldr	r3, [pc, #300]	; (80050d4 <HAL_RCC_ClockConfig+0x188>)
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	4b4a      	ldr	r3, [pc, #296]	; (80050d4 <HAL_RCC_ClockConfig+0x188>)
 8004fac:	21e0      	movs	r1, #224	; 0xe0
 8004fae:	00c9      	lsls	r1, r1, #3
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb4:	4b47      	ldr	r3, [pc, #284]	; (80050d4 <HAL_RCC_ClockConfig+0x188>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	22f0      	movs	r2, #240	; 0xf0
 8004fba:	4393      	bics	r3, r2
 8004fbc:	0019      	movs	r1, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	4b44      	ldr	r3, [pc, #272]	; (80050d4 <HAL_RCC_ClockConfig+0x188>)
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d040      	beq.n	8005054 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d107      	bne.n	8004fea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fda:	4b3e      	ldr	r3, [pc, #248]	; (80050d4 <HAL_RCC_ClockConfig+0x188>)
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	029b      	lsls	r3, r3, #10
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d114      	bne.n	8005010 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e06e      	b.n	80050c8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d107      	bne.n	8005002 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff2:	4b38      	ldr	r3, [pc, #224]	; (80050d4 <HAL_RCC_ClockConfig+0x188>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	2380      	movs	r3, #128	; 0x80
 8004ff8:	049b      	lsls	r3, r3, #18
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d108      	bne.n	8005010 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e062      	b.n	80050c8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005002:	4b34      	ldr	r3, [pc, #208]	; (80050d4 <HAL_RCC_ClockConfig+0x188>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2202      	movs	r2, #2
 8005008:	4013      	ands	r3, r2
 800500a:	d101      	bne.n	8005010 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e05b      	b.n	80050c8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005010:	4b30      	ldr	r3, [pc, #192]	; (80050d4 <HAL_RCC_ClockConfig+0x188>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2203      	movs	r2, #3
 8005016:	4393      	bics	r3, r2
 8005018:	0019      	movs	r1, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	4b2d      	ldr	r3, [pc, #180]	; (80050d4 <HAL_RCC_ClockConfig+0x188>)
 8005020:	430a      	orrs	r2, r1
 8005022:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005024:	f7fe ffc8 	bl	8003fb8 <HAL_GetTick>
 8005028:	0003      	movs	r3, r0
 800502a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502c:	e009      	b.n	8005042 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800502e:	f7fe ffc3 	bl	8003fb8 <HAL_GetTick>
 8005032:	0002      	movs	r2, r0
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	4a27      	ldr	r2, [pc, #156]	; (80050d8 <HAL_RCC_ClockConfig+0x18c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e042      	b.n	80050c8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005042:	4b24      	ldr	r3, [pc, #144]	; (80050d4 <HAL_RCC_ClockConfig+0x188>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	220c      	movs	r2, #12
 8005048:	401a      	ands	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	429a      	cmp	r2, r3
 8005052:	d1ec      	bne.n	800502e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005054:	4b1e      	ldr	r3, [pc, #120]	; (80050d0 <HAL_RCC_ClockConfig+0x184>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2201      	movs	r2, #1
 800505a:	4013      	ands	r3, r2
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d211      	bcs.n	8005086 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005062:	4b1b      	ldr	r3, [pc, #108]	; (80050d0 <HAL_RCC_ClockConfig+0x184>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2201      	movs	r2, #1
 8005068:	4393      	bics	r3, r2
 800506a:	0019      	movs	r1, r3
 800506c:	4b18      	ldr	r3, [pc, #96]	; (80050d0 <HAL_RCC_ClockConfig+0x184>)
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005074:	4b16      	ldr	r3, [pc, #88]	; (80050d0 <HAL_RCC_ClockConfig+0x184>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2201      	movs	r2, #1
 800507a:	4013      	ands	r3, r2
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d001      	beq.n	8005086 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e020      	b.n	80050c8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2204      	movs	r2, #4
 800508c:	4013      	ands	r3, r2
 800508e:	d009      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005090:	4b10      	ldr	r3, [pc, #64]	; (80050d4 <HAL_RCC_ClockConfig+0x188>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	4a11      	ldr	r2, [pc, #68]	; (80050dc <HAL_RCC_ClockConfig+0x190>)
 8005096:	4013      	ands	r3, r2
 8005098:	0019      	movs	r1, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	4b0d      	ldr	r3, [pc, #52]	; (80050d4 <HAL_RCC_ClockConfig+0x188>)
 80050a0:	430a      	orrs	r2, r1
 80050a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80050a4:	f000 f820 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 80050a8:	0001      	movs	r1, r0
 80050aa:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <HAL_RCC_ClockConfig+0x188>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	091b      	lsrs	r3, r3, #4
 80050b0:	220f      	movs	r2, #15
 80050b2:	4013      	ands	r3, r2
 80050b4:	4a0a      	ldr	r2, [pc, #40]	; (80050e0 <HAL_RCC_ClockConfig+0x194>)
 80050b6:	5cd3      	ldrb	r3, [r2, r3]
 80050b8:	000a      	movs	r2, r1
 80050ba:	40da      	lsrs	r2, r3
 80050bc:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <HAL_RCC_ClockConfig+0x198>)
 80050be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80050c0:	2000      	movs	r0, #0
 80050c2:	f7fe ff33 	bl	8003f2c <HAL_InitTick>
  
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	0018      	movs	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	b004      	add	sp, #16
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40022000 	.word	0x40022000
 80050d4:	40021000 	.word	0x40021000
 80050d8:	00001388 	.word	0x00001388
 80050dc:	fffff8ff 	.word	0xfffff8ff
 80050e0:	0800b0d0 	.word	0x0800b0d0
 80050e4:	20000000 	.word	0x20000000

080050e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	2300      	movs	r3, #0
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	2300      	movs	r3, #0
 80050fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005102:	4b20      	ldr	r3, [pc, #128]	; (8005184 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	220c      	movs	r2, #12
 800510c:	4013      	ands	r3, r2
 800510e:	2b04      	cmp	r3, #4
 8005110:	d002      	beq.n	8005118 <HAL_RCC_GetSysClockFreq+0x30>
 8005112:	2b08      	cmp	r3, #8
 8005114:	d003      	beq.n	800511e <HAL_RCC_GetSysClockFreq+0x36>
 8005116:	e02c      	b.n	8005172 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005118:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <HAL_RCC_GetSysClockFreq+0xa0>)
 800511a:	613b      	str	r3, [r7, #16]
      break;
 800511c:	e02c      	b.n	8005178 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	0c9b      	lsrs	r3, r3, #18
 8005122:	220f      	movs	r2, #15
 8005124:	4013      	ands	r3, r2
 8005126:	4a19      	ldr	r2, [pc, #100]	; (800518c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005128:	5cd3      	ldrb	r3, [r2, r3]
 800512a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800512c:	4b15      	ldr	r3, [pc, #84]	; (8005184 <HAL_RCC_GetSysClockFreq+0x9c>)
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	220f      	movs	r2, #15
 8005132:	4013      	ands	r3, r2
 8005134:	4a16      	ldr	r2, [pc, #88]	; (8005190 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005136:	5cd3      	ldrb	r3, [r2, r3]
 8005138:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	2380      	movs	r3, #128	; 0x80
 800513e:	025b      	lsls	r3, r3, #9
 8005140:	4013      	ands	r3, r2
 8005142:	d009      	beq.n	8005158 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	4810      	ldr	r0, [pc, #64]	; (8005188 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005148:	f7fa fffa 	bl	8000140 <__udivsi3>
 800514c:	0003      	movs	r3, r0
 800514e:	001a      	movs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4353      	muls	r3, r2
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	e009      	b.n	800516c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	000a      	movs	r2, r1
 800515c:	0152      	lsls	r2, r2, #5
 800515e:	1a52      	subs	r2, r2, r1
 8005160:	0193      	lsls	r3, r2, #6
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	185b      	adds	r3, r3, r1
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	613b      	str	r3, [r7, #16]
      break;
 8005170:	e002      	b.n	8005178 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005172:	4b05      	ldr	r3, [pc, #20]	; (8005188 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005174:	613b      	str	r3, [r7, #16]
      break;
 8005176:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005178:	693b      	ldr	r3, [r7, #16]
}
 800517a:	0018      	movs	r0, r3
 800517c:	46bd      	mov	sp, r7
 800517e:	b006      	add	sp, #24
 8005180:	bd80      	pop	{r7, pc}
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	40021000 	.word	0x40021000
 8005188:	007a1200 	.word	0x007a1200
 800518c:	0800b0e8 	.word	0x0800b0e8
 8005190:	0800b0f8 	.word	0x0800b0f8

08005194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005198:	4b02      	ldr	r3, [pc, #8]	; (80051a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800519a:	681b      	ldr	r3, [r3, #0]
}
 800519c:	0018      	movs	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	20000000 	.word	0x20000000

080051a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80051ac:	f7ff fff2 	bl	8005194 <HAL_RCC_GetHCLKFreq>
 80051b0:	0001      	movs	r1, r0
 80051b2:	4b06      	ldr	r3, [pc, #24]	; (80051cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	0a1b      	lsrs	r3, r3, #8
 80051b8:	2207      	movs	r2, #7
 80051ba:	4013      	ands	r3, r2
 80051bc:	4a04      	ldr	r2, [pc, #16]	; (80051d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051be:	5cd3      	ldrb	r3, [r2, r3]
 80051c0:	40d9      	lsrs	r1, r3
 80051c2:	000b      	movs	r3, r1
}    
 80051c4:	0018      	movs	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	40021000 	.word	0x40021000
 80051d0:	0800b0e0 	.word	0x0800b0e0

080051d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	2380      	movs	r3, #128	; 0x80
 80051ea:	025b      	lsls	r3, r3, #9
 80051ec:	4013      	ands	r3, r2
 80051ee:	d100      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80051f0:	e08e      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80051f2:	2017      	movs	r0, #23
 80051f4:	183b      	adds	r3, r7, r0
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051fa:	4b57      	ldr	r3, [pc, #348]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051fc:	69da      	ldr	r2, [r3, #28]
 80051fe:	2380      	movs	r3, #128	; 0x80
 8005200:	055b      	lsls	r3, r3, #21
 8005202:	4013      	ands	r3, r2
 8005204:	d110      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005206:	4b54      	ldr	r3, [pc, #336]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005208:	69da      	ldr	r2, [r3, #28]
 800520a:	4b53      	ldr	r3, [pc, #332]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800520c:	2180      	movs	r1, #128	; 0x80
 800520e:	0549      	lsls	r1, r1, #21
 8005210:	430a      	orrs	r2, r1
 8005212:	61da      	str	r2, [r3, #28]
 8005214:	4b50      	ldr	r3, [pc, #320]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	2380      	movs	r3, #128	; 0x80
 800521a:	055b      	lsls	r3, r3, #21
 800521c:	4013      	ands	r3, r2
 800521e:	60bb      	str	r3, [r7, #8]
 8005220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005222:	183b      	adds	r3, r7, r0
 8005224:	2201      	movs	r2, #1
 8005226:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005228:	4b4c      	ldr	r3, [pc, #304]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	4013      	ands	r3, r2
 8005232:	d11a      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005234:	4b49      	ldr	r3, [pc, #292]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	4b48      	ldr	r3, [pc, #288]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800523a:	2180      	movs	r1, #128	; 0x80
 800523c:	0049      	lsls	r1, r1, #1
 800523e:	430a      	orrs	r2, r1
 8005240:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005242:	f7fe feb9 	bl	8003fb8 <HAL_GetTick>
 8005246:	0003      	movs	r3, r0
 8005248:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524a:	e008      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524c:	f7fe feb4 	bl	8003fb8 <HAL_GetTick>
 8005250:	0002      	movs	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b64      	cmp	r3, #100	; 0x64
 8005258:	d901      	bls.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e077      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525e:	4b3f      	ldr	r3, [pc, #252]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	2380      	movs	r3, #128	; 0x80
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	4013      	ands	r3, r2
 8005268:	d0f0      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800526a:	4b3b      	ldr	r3, [pc, #236]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800526c:	6a1a      	ldr	r2, [r3, #32]
 800526e:	23c0      	movs	r3, #192	; 0xc0
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4013      	ands	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d034      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	23c0      	movs	r3, #192	; 0xc0
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4013      	ands	r3, r2
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	429a      	cmp	r2, r3
 800528a:	d02c      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800528c:	4b32      	ldr	r3, [pc, #200]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	4a33      	ldr	r2, [pc, #204]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005292:	4013      	ands	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005296:	4b30      	ldr	r3, [pc, #192]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005298:	6a1a      	ldr	r2, [r3, #32]
 800529a:	4b2f      	ldr	r3, [pc, #188]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800529c:	2180      	movs	r1, #128	; 0x80
 800529e:	0249      	lsls	r1, r1, #9
 80052a0:	430a      	orrs	r2, r1
 80052a2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052a4:	4b2c      	ldr	r3, [pc, #176]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052a6:	6a1a      	ldr	r2, [r3, #32]
 80052a8:	4b2b      	ldr	r3, [pc, #172]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052aa:	492e      	ldr	r1, [pc, #184]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80052ac:	400a      	ands	r2, r1
 80052ae:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052b0:	4b29      	ldr	r3, [pc, #164]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2201      	movs	r2, #1
 80052ba:	4013      	ands	r3, r2
 80052bc:	d013      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052be:	f7fe fe7b 	bl	8003fb8 <HAL_GetTick>
 80052c2:	0003      	movs	r3, r0
 80052c4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c6:	e009      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c8:	f7fe fe76 	bl	8003fb8 <HAL_GetTick>
 80052cc:	0002      	movs	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	4a25      	ldr	r2, [pc, #148]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d901      	bls.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e038      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052dc:	4b1e      	ldr	r3, [pc, #120]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	2202      	movs	r2, #2
 80052e2:	4013      	ands	r3, r2
 80052e4:	d0f0      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052e6:	4b1c      	ldr	r3, [pc, #112]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	4a1d      	ldr	r2, [pc, #116]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	0019      	movs	r1, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	4b18      	ldr	r3, [pc, #96]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052f6:	430a      	orrs	r2, r1
 80052f8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052fa:	2317      	movs	r3, #23
 80052fc:	18fb      	adds	r3, r7, r3
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d105      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005304:	4b14      	ldr	r3, [pc, #80]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005306:	69da      	ldr	r2, [r3, #28]
 8005308:	4b13      	ldr	r3, [pc, #76]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800530a:	4918      	ldr	r1, [pc, #96]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800530c:	400a      	ands	r2, r1
 800530e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2201      	movs	r2, #1
 8005316:	4013      	ands	r3, r2
 8005318:	d009      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800531a:	4b0f      	ldr	r3, [pc, #60]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	2203      	movs	r2, #3
 8005320:	4393      	bics	r3, r2
 8005322:	0019      	movs	r1, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800532a:	430a      	orrs	r2, r1
 800532c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2220      	movs	r2, #32
 8005334:	4013      	ands	r3, r2
 8005336:	d009      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005338:	4b07      	ldr	r3, [pc, #28]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	2210      	movs	r2, #16
 800533e:	4393      	bics	r3, r2
 8005340:	0019      	movs	r1, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	4b04      	ldr	r3, [pc, #16]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005348:	430a      	orrs	r2, r1
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	0018      	movs	r0, r3
 8005350:	46bd      	mov	sp, r7
 8005352:	b006      	add	sp, #24
 8005354:	bd80      	pop	{r7, pc}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	40021000 	.word	0x40021000
 800535c:	40007000 	.word	0x40007000
 8005360:	fffffcff 	.word	0xfffffcff
 8005364:	fffeffff 	.word	0xfffeffff
 8005368:	00001388 	.word	0x00001388
 800536c:	efffffff 	.word	0xefffffff

08005370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e044      	b.n	800540c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005386:	2b00      	cmp	r3, #0
 8005388:	d107      	bne.n	800539a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2278      	movs	r2, #120	; 0x78
 800538e:	2100      	movs	r1, #0
 8005390:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	0018      	movs	r0, r3
 8005396:	f7fe fbdb 	bl	8003b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2224      	movs	r2, #36	; 0x24
 800539e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2101      	movs	r1, #1
 80053ac:	438a      	bics	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	0018      	movs	r0, r3
 80053b4:	f000 fbb8 	bl	8005b28 <UART_SetConfig>
 80053b8:	0003      	movs	r3, r0
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d101      	bne.n	80053c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e024      	b.n	800540c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	0018      	movs	r0, r3
 80053ce:	f000 fceb 	bl	8005da8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	490d      	ldr	r1, [pc, #52]	; (8005414 <HAL_UART_Init+0xa4>)
 80053de:	400a      	ands	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2108      	movs	r1, #8
 80053ee:	438a      	bics	r2, r1
 80053f0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2101      	movs	r1, #1
 80053fe:	430a      	orrs	r2, r1
 8005400:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	0018      	movs	r0, r3
 8005406:	f000 fd83 	bl	8005f10 <UART_CheckIdleState>
 800540a:	0003      	movs	r3, r0
}
 800540c:	0018      	movs	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	b002      	add	sp, #8
 8005412:	bd80      	pop	{r7, pc}
 8005414:	fffff7ff 	.word	0xfffff7ff

08005418 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	; 0x28
 800541c:	af02      	add	r7, sp, #8
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	1dbb      	adds	r3, r7, #6
 8005426:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800542c:	2b20      	cmp	r3, #32
 800542e:	d000      	beq.n	8005432 <HAL_UART_Transmit+0x1a>
 8005430:	e08d      	b.n	800554e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <HAL_UART_Transmit+0x28>
 8005438:	1dbb      	adds	r3, r7, #6
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e085      	b.n	8005550 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	2380      	movs	r3, #128	; 0x80
 800544a:	015b      	lsls	r3, r3, #5
 800544c:	429a      	cmp	r2, r3
 800544e:	d109      	bne.n	8005464 <HAL_UART_Transmit+0x4c>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d105      	bne.n	8005464 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2201      	movs	r2, #1
 800545c:	4013      	ands	r3, r2
 800545e:	d001      	beq.n	8005464 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e075      	b.n	8005550 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2284      	movs	r2, #132	; 0x84
 8005468:	2100      	movs	r1, #0
 800546a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2221      	movs	r2, #33	; 0x21
 8005470:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005472:	f7fe fda1 	bl	8003fb8 <HAL_GetTick>
 8005476:	0003      	movs	r3, r0
 8005478:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1dba      	adds	r2, r7, #6
 800547e:	2150      	movs	r1, #80	; 0x50
 8005480:	8812      	ldrh	r2, [r2, #0]
 8005482:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	1dba      	adds	r2, r7, #6
 8005488:	2152      	movs	r1, #82	; 0x52
 800548a:	8812      	ldrh	r2, [r2, #0]
 800548c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	2380      	movs	r3, #128	; 0x80
 8005494:	015b      	lsls	r3, r3, #5
 8005496:	429a      	cmp	r2, r3
 8005498:	d108      	bne.n	80054ac <HAL_UART_Transmit+0x94>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d104      	bne.n	80054ac <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	61bb      	str	r3, [r7, #24]
 80054aa:	e003      	b.n	80054b4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054b4:	e030      	b.n	8005518 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	0013      	movs	r3, r2
 80054c0:	2200      	movs	r2, #0
 80054c2:	2180      	movs	r1, #128	; 0x80
 80054c4:	f000 fdcc 	bl	8006060 <UART_WaitOnFlagUntilTimeout>
 80054c8:	1e03      	subs	r3, r0, #0
 80054ca:	d004      	beq.n	80054d6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2220      	movs	r2, #32
 80054d0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e03c      	b.n	8005550 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10b      	bne.n	80054f4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	881a      	ldrh	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	05d2      	lsls	r2, r2, #23
 80054e6:	0dd2      	lsrs	r2, r2, #23
 80054e8:	b292      	uxth	r2, r2
 80054ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	3302      	adds	r3, #2
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	e008      	b.n	8005506 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	781a      	ldrb	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	b292      	uxth	r2, r2
 80054fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	3301      	adds	r3, #1
 8005504:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2252      	movs	r2, #82	; 0x52
 800550a:	5a9b      	ldrh	r3, [r3, r2]
 800550c:	b29b      	uxth	r3, r3
 800550e:	3b01      	subs	r3, #1
 8005510:	b299      	uxth	r1, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2252      	movs	r2, #82	; 0x52
 8005516:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2252      	movs	r2, #82	; 0x52
 800551c:	5a9b      	ldrh	r3, [r3, r2]
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1c8      	bne.n	80054b6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	0013      	movs	r3, r2
 800552e:	2200      	movs	r2, #0
 8005530:	2140      	movs	r1, #64	; 0x40
 8005532:	f000 fd95 	bl	8006060 <UART_WaitOnFlagUntilTimeout>
 8005536:	1e03      	subs	r3, r0, #0
 8005538:	d004      	beq.n	8005544 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2220      	movs	r2, #32
 800553e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e005      	b.n	8005550 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2220      	movs	r2, #32
 8005548:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	e000      	b.n	8005550 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800554e:	2302      	movs	r3, #2
  }
}
 8005550:	0018      	movs	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	b008      	add	sp, #32
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005558:	b590      	push	{r4, r7, lr}
 800555a:	b0ab      	sub	sp, #172	; 0xac
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	22a4      	movs	r2, #164	; 0xa4
 8005568:	18b9      	adds	r1, r7, r2
 800556a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	20a0      	movs	r0, #160	; 0xa0
 8005574:	1839      	adds	r1, r7, r0
 8005576:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	219c      	movs	r1, #156	; 0x9c
 8005580:	1879      	adds	r1, r7, r1
 8005582:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005584:	0011      	movs	r1, r2
 8005586:	18bb      	adds	r3, r7, r2
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a99      	ldr	r2, [pc, #612]	; (80057f0 <HAL_UART_IRQHandler+0x298>)
 800558c:	4013      	ands	r3, r2
 800558e:	2298      	movs	r2, #152	; 0x98
 8005590:	18bc      	adds	r4, r7, r2
 8005592:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005594:	18bb      	adds	r3, r7, r2
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d114      	bne.n	80055c6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800559c:	187b      	adds	r3, r7, r1
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2220      	movs	r2, #32
 80055a2:	4013      	ands	r3, r2
 80055a4:	d00f      	beq.n	80055c6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055a6:	183b      	adds	r3, r7, r0
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2220      	movs	r2, #32
 80055ac:	4013      	ands	r3, r2
 80055ae:	d00a      	beq.n	80055c6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d100      	bne.n	80055ba <HAL_UART_IRQHandler+0x62>
 80055b8:	e286      	b.n	8005ac8 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	0010      	movs	r0, r2
 80055c2:	4798      	blx	r3
      }
      return;
 80055c4:	e280      	b.n	8005ac8 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80055c6:	2398      	movs	r3, #152	; 0x98
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d100      	bne.n	80055d2 <HAL_UART_IRQHandler+0x7a>
 80055d0:	e114      	b.n	80057fc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80055d2:	239c      	movs	r3, #156	; 0x9c
 80055d4:	18fb      	adds	r3, r7, r3
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2201      	movs	r2, #1
 80055da:	4013      	ands	r3, r2
 80055dc:	d106      	bne.n	80055ec <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80055de:	23a0      	movs	r3, #160	; 0xa0
 80055e0:	18fb      	adds	r3, r7, r3
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a83      	ldr	r2, [pc, #524]	; (80057f4 <HAL_UART_IRQHandler+0x29c>)
 80055e6:	4013      	ands	r3, r2
 80055e8:	d100      	bne.n	80055ec <HAL_UART_IRQHandler+0x94>
 80055ea:	e107      	b.n	80057fc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055ec:	23a4      	movs	r3, #164	; 0xa4
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2201      	movs	r2, #1
 80055f4:	4013      	ands	r3, r2
 80055f6:	d012      	beq.n	800561e <HAL_UART_IRQHandler+0xc6>
 80055f8:	23a0      	movs	r3, #160	; 0xa0
 80055fa:	18fb      	adds	r3, r7, r3
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	2380      	movs	r3, #128	; 0x80
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	4013      	ands	r3, r2
 8005604:	d00b      	beq.n	800561e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2201      	movs	r2, #1
 800560c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2284      	movs	r2, #132	; 0x84
 8005612:	589b      	ldr	r3, [r3, r2]
 8005614:	2201      	movs	r2, #1
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2184      	movs	r1, #132	; 0x84
 800561c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800561e:	23a4      	movs	r3, #164	; 0xa4
 8005620:	18fb      	adds	r3, r7, r3
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2202      	movs	r2, #2
 8005626:	4013      	ands	r3, r2
 8005628:	d011      	beq.n	800564e <HAL_UART_IRQHandler+0xf6>
 800562a:	239c      	movs	r3, #156	; 0x9c
 800562c:	18fb      	adds	r3, r7, r3
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2201      	movs	r2, #1
 8005632:	4013      	ands	r3, r2
 8005634:	d00b      	beq.n	800564e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2202      	movs	r2, #2
 800563c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2284      	movs	r2, #132	; 0x84
 8005642:	589b      	ldr	r3, [r3, r2]
 8005644:	2204      	movs	r2, #4
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2184      	movs	r1, #132	; 0x84
 800564c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800564e:	23a4      	movs	r3, #164	; 0xa4
 8005650:	18fb      	adds	r3, r7, r3
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2204      	movs	r2, #4
 8005656:	4013      	ands	r3, r2
 8005658:	d011      	beq.n	800567e <HAL_UART_IRQHandler+0x126>
 800565a:	239c      	movs	r3, #156	; 0x9c
 800565c:	18fb      	adds	r3, r7, r3
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2201      	movs	r2, #1
 8005662:	4013      	ands	r3, r2
 8005664:	d00b      	beq.n	800567e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2204      	movs	r2, #4
 800566c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2284      	movs	r2, #132	; 0x84
 8005672:	589b      	ldr	r3, [r3, r2]
 8005674:	2202      	movs	r2, #2
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2184      	movs	r1, #132	; 0x84
 800567c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800567e:	23a4      	movs	r3, #164	; 0xa4
 8005680:	18fb      	adds	r3, r7, r3
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2208      	movs	r2, #8
 8005686:	4013      	ands	r3, r2
 8005688:	d017      	beq.n	80056ba <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800568a:	23a0      	movs	r3, #160	; 0xa0
 800568c:	18fb      	adds	r3, r7, r3
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2220      	movs	r2, #32
 8005692:	4013      	ands	r3, r2
 8005694:	d105      	bne.n	80056a2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005696:	239c      	movs	r3, #156	; 0x9c
 8005698:	18fb      	adds	r3, r7, r3
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2201      	movs	r2, #1
 800569e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056a0:	d00b      	beq.n	80056ba <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2208      	movs	r2, #8
 80056a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2284      	movs	r2, #132	; 0x84
 80056ae:	589b      	ldr	r3, [r3, r2]
 80056b0:	2208      	movs	r2, #8
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2184      	movs	r1, #132	; 0x84
 80056b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056ba:	23a4      	movs	r3, #164	; 0xa4
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	2380      	movs	r3, #128	; 0x80
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	4013      	ands	r3, r2
 80056c6:	d013      	beq.n	80056f0 <HAL_UART_IRQHandler+0x198>
 80056c8:	23a0      	movs	r3, #160	; 0xa0
 80056ca:	18fb      	adds	r3, r7, r3
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	04db      	lsls	r3, r3, #19
 80056d2:	4013      	ands	r3, r2
 80056d4:	d00c      	beq.n	80056f0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2280      	movs	r2, #128	; 0x80
 80056dc:	0112      	lsls	r2, r2, #4
 80056de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2284      	movs	r2, #132	; 0x84
 80056e4:	589b      	ldr	r3, [r3, r2]
 80056e6:	2220      	movs	r2, #32
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2184      	movs	r1, #132	; 0x84
 80056ee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2284      	movs	r2, #132	; 0x84
 80056f4:	589b      	ldr	r3, [r3, r2]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d100      	bne.n	80056fc <HAL_UART_IRQHandler+0x1a4>
 80056fa:	e1e7      	b.n	8005acc <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80056fc:	23a4      	movs	r3, #164	; 0xa4
 80056fe:	18fb      	adds	r3, r7, r3
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2220      	movs	r2, #32
 8005704:	4013      	ands	r3, r2
 8005706:	d00e      	beq.n	8005726 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005708:	23a0      	movs	r3, #160	; 0xa0
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2220      	movs	r2, #32
 8005710:	4013      	ands	r3, r2
 8005712:	d008      	beq.n	8005726 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005718:	2b00      	cmp	r3, #0
 800571a:	d004      	beq.n	8005726 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	0010      	movs	r0, r2
 8005724:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2284      	movs	r2, #132	; 0x84
 800572a:	589b      	ldr	r3, [r3, r2]
 800572c:	2194      	movs	r1, #148	; 0x94
 800572e:	187a      	adds	r2, r7, r1
 8005730:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	2240      	movs	r2, #64	; 0x40
 800573a:	4013      	ands	r3, r2
 800573c:	2b40      	cmp	r3, #64	; 0x40
 800573e:	d004      	beq.n	800574a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005740:	187b      	adds	r3, r7, r1
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2228      	movs	r2, #40	; 0x28
 8005746:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005748:	d047      	beq.n	80057da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	0018      	movs	r0, r3
 800574e:	f000 fdb5 	bl	80062bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	2240      	movs	r2, #64	; 0x40
 800575a:	4013      	ands	r3, r2
 800575c:	2b40      	cmp	r3, #64	; 0x40
 800575e:	d137      	bne.n	80057d0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005760:	f3ef 8310 	mrs	r3, PRIMASK
 8005764:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005768:	2090      	movs	r0, #144	; 0x90
 800576a:	183a      	adds	r2, r7, r0
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	2301      	movs	r3, #1
 8005770:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005772:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005774:	f383 8810 	msr	PRIMASK, r3
}
 8005778:	46c0      	nop			; (mov r8, r8)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2140      	movs	r1, #64	; 0x40
 8005786:	438a      	bics	r2, r1
 8005788:	609a      	str	r2, [r3, #8]
 800578a:	183b      	adds	r3, r7, r0
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005792:	f383 8810 	msr	PRIMASK, r3
}
 8005796:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800579c:	2b00      	cmp	r3, #0
 800579e:	d012      	beq.n	80057c6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a4:	4a14      	ldr	r2, [pc, #80]	; (80057f8 <HAL_UART_IRQHandler+0x2a0>)
 80057a6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ac:	0018      	movs	r0, r3
 80057ae:	f7fe fdf5 	bl	800439c <HAL_DMA_Abort_IT>
 80057b2:	1e03      	subs	r3, r0, #0
 80057b4:	d01a      	beq.n	80057ec <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c0:	0018      	movs	r0, r3
 80057c2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c4:	e012      	b.n	80057ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	0018      	movs	r0, r3
 80057ca:	f000 f9a5 	bl	8005b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ce:	e00d      	b.n	80057ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	0018      	movs	r0, r3
 80057d4:	f000 f9a0 	bl	8005b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d8:	e008      	b.n	80057ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	0018      	movs	r0, r3
 80057de:	f000 f99b 	bl	8005b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2284      	movs	r2, #132	; 0x84
 80057e6:	2100      	movs	r1, #0
 80057e8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80057ea:	e16f      	b.n	8005acc <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ec:	46c0      	nop			; (mov r8, r8)
    return;
 80057ee:	e16d      	b.n	8005acc <HAL_UART_IRQHandler+0x574>
 80057f0:	0000080f 	.word	0x0000080f
 80057f4:	04000120 	.word	0x04000120
 80057f8:	08006577 	.word	0x08006577

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005800:	2b01      	cmp	r3, #1
 8005802:	d000      	beq.n	8005806 <HAL_UART_IRQHandler+0x2ae>
 8005804:	e139      	b.n	8005a7a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005806:	23a4      	movs	r3, #164	; 0xa4
 8005808:	18fb      	adds	r3, r7, r3
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2210      	movs	r2, #16
 800580e:	4013      	ands	r3, r2
 8005810:	d100      	bne.n	8005814 <HAL_UART_IRQHandler+0x2bc>
 8005812:	e132      	b.n	8005a7a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005814:	23a0      	movs	r3, #160	; 0xa0
 8005816:	18fb      	adds	r3, r7, r3
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2210      	movs	r2, #16
 800581c:	4013      	ands	r3, r2
 800581e:	d100      	bne.n	8005822 <HAL_UART_IRQHandler+0x2ca>
 8005820:	e12b      	b.n	8005a7a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2210      	movs	r2, #16
 8005828:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	2240      	movs	r2, #64	; 0x40
 8005832:	4013      	ands	r3, r2
 8005834:	2b40      	cmp	r3, #64	; 0x40
 8005836:	d000      	beq.n	800583a <HAL_UART_IRQHandler+0x2e2>
 8005838:	e09f      	b.n	800597a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	217e      	movs	r1, #126	; 0x7e
 8005844:	187b      	adds	r3, r7, r1
 8005846:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005848:	187b      	adds	r3, r7, r1
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d100      	bne.n	8005852 <HAL_UART_IRQHandler+0x2fa>
 8005850:	e13e      	b.n	8005ad0 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2258      	movs	r2, #88	; 0x58
 8005856:	5a9b      	ldrh	r3, [r3, r2]
 8005858:	187a      	adds	r2, r7, r1
 800585a:	8812      	ldrh	r2, [r2, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d300      	bcc.n	8005862 <HAL_UART_IRQHandler+0x30a>
 8005860:	e136      	b.n	8005ad0 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	187a      	adds	r2, r7, r1
 8005866:	215a      	movs	r1, #90	; 0x5a
 8005868:	8812      	ldrh	r2, [r2, #0]
 800586a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	2b20      	cmp	r3, #32
 8005874:	d06f      	beq.n	8005956 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005876:	f3ef 8310 	mrs	r3, PRIMASK
 800587a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800587e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005880:	2301      	movs	r3, #1
 8005882:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005886:	f383 8810 	msr	PRIMASK, r3
}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4992      	ldr	r1, [pc, #584]	; (8005ae0 <HAL_UART_IRQHandler+0x588>)
 8005898:	400a      	ands	r2, r1
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800589e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a2:	f383 8810 	msr	PRIMASK, r3
}
 80058a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058a8:	f3ef 8310 	mrs	r3, PRIMASK
 80058ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80058ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b0:	677b      	str	r3, [r7, #116]	; 0x74
 80058b2:	2301      	movs	r3, #1
 80058b4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058b8:	f383 8810 	msr	PRIMASK, r3
}
 80058bc:	46c0      	nop			; (mov r8, r8)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2101      	movs	r1, #1
 80058ca:	438a      	bics	r2, r1
 80058cc:	609a      	str	r2, [r3, #8]
 80058ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058d0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058d4:	f383 8810 	msr	PRIMASK, r3
}
 80058d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058da:	f3ef 8310 	mrs	r3, PRIMASK
 80058de:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80058e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058e2:	673b      	str	r3, [r7, #112]	; 0x70
 80058e4:	2301      	movs	r3, #1
 80058e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ea:	f383 8810 	msr	PRIMASK, r3
}
 80058ee:	46c0      	nop			; (mov r8, r8)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2140      	movs	r1, #64	; 0x40
 80058fc:	438a      	bics	r2, r1
 80058fe:	609a      	str	r2, [r3, #8]
 8005900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005902:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005906:	f383 8810 	msr	PRIMASK, r3
}
 800590a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2280      	movs	r2, #128	; 0x80
 8005910:	2120      	movs	r1, #32
 8005912:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800591a:	f3ef 8310 	mrs	r3, PRIMASK
 800591e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005920:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005922:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005924:	2301      	movs	r3, #1
 8005926:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800592a:	f383 8810 	msr	PRIMASK, r3
}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2110      	movs	r1, #16
 800593c:	438a      	bics	r2, r1
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005942:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005946:	f383 8810 	msr	PRIMASK, r3
}
 800594a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005950:	0018      	movs	r0, r3
 8005952:	f7fe fceb 	bl	800432c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2202      	movs	r2, #2
 800595a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2258      	movs	r2, #88	; 0x58
 8005960:	5a9a      	ldrh	r2, [r3, r2]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	215a      	movs	r1, #90	; 0x5a
 8005966:	5a5b      	ldrh	r3, [r3, r1]
 8005968:	b29b      	uxth	r3, r3
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	b29a      	uxth	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	0011      	movs	r1, r2
 8005972:	0018      	movs	r0, r3
 8005974:	f7fd f8e0 	bl	8002b38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005978:	e0aa      	b.n	8005ad0 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2258      	movs	r2, #88	; 0x58
 800597e:	5a99      	ldrh	r1, [r3, r2]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	225a      	movs	r2, #90	; 0x5a
 8005984:	5a9b      	ldrh	r3, [r3, r2]
 8005986:	b29a      	uxth	r2, r3
 8005988:	208e      	movs	r0, #142	; 0x8e
 800598a:	183b      	adds	r3, r7, r0
 800598c:	1a8a      	subs	r2, r1, r2
 800598e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	225a      	movs	r2, #90	; 0x5a
 8005994:	5a9b      	ldrh	r3, [r3, r2]
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d100      	bne.n	800599e <HAL_UART_IRQHandler+0x446>
 800599c:	e09a      	b.n	8005ad4 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800599e:	183b      	adds	r3, r7, r0
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d100      	bne.n	80059a8 <HAL_UART_IRQHandler+0x450>
 80059a6:	e095      	b.n	8005ad4 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059a8:	f3ef 8310 	mrs	r3, PRIMASK
 80059ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80059ae:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059b0:	2488      	movs	r4, #136	; 0x88
 80059b2:	193a      	adds	r2, r7, r4
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	2301      	movs	r3, #1
 80059b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f383 8810 	msr	PRIMASK, r3
}
 80059c0:	46c0      	nop			; (mov r8, r8)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4945      	ldr	r1, [pc, #276]	; (8005ae4 <HAL_UART_IRQHandler+0x58c>)
 80059ce:	400a      	ands	r2, r1
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	193b      	adds	r3, r7, r4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f383 8810 	msr	PRIMASK, r3
}
 80059de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e0:	f3ef 8310 	mrs	r3, PRIMASK
 80059e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80059e6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e8:	2484      	movs	r4, #132	; 0x84
 80059ea:	193a      	adds	r2, r7, r4
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	2301      	movs	r3, #1
 80059f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	f383 8810 	msr	PRIMASK, r3
}
 80059f8:	46c0      	nop			; (mov r8, r8)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2101      	movs	r1, #1
 8005a06:	438a      	bics	r2, r1
 8005a08:	609a      	str	r2, [r3, #8]
 8005a0a:	193b      	adds	r3, r7, r4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	f383 8810 	msr	PRIMASK, r3
}
 8005a16:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2280      	movs	r2, #128	; 0x80
 8005a1c:	2120      	movs	r1, #32
 8005a1e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a34:	2480      	movs	r4, #128	; 0x80
 8005a36:	193a      	adds	r2, r7, r4
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	f383 8810 	msr	PRIMASK, r3
}
 8005a44:	46c0      	nop			; (mov r8, r8)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2110      	movs	r1, #16
 8005a52:	438a      	bics	r2, r1
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	193b      	adds	r3, r7, r4
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5e:	f383 8810 	msr	PRIMASK, r3
}
 8005a62:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a6a:	183b      	adds	r3, r7, r0
 8005a6c:	881a      	ldrh	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	0011      	movs	r1, r2
 8005a72:	0018      	movs	r0, r3
 8005a74:	f7fd f860 	bl	8002b38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a78:	e02c      	b.n	8005ad4 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a7a:	23a4      	movs	r3, #164	; 0xa4
 8005a7c:	18fb      	adds	r3, r7, r3
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2280      	movs	r2, #128	; 0x80
 8005a82:	4013      	ands	r3, r2
 8005a84:	d00f      	beq.n	8005aa6 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a86:	23a0      	movs	r3, #160	; 0xa0
 8005a88:	18fb      	adds	r3, r7, r3
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2280      	movs	r2, #128	; 0x80
 8005a8e:	4013      	ands	r3, r2
 8005a90:	d009      	beq.n	8005aa6 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d01e      	beq.n	8005ad8 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	0010      	movs	r0, r2
 8005aa2:	4798      	blx	r3
    }
    return;
 8005aa4:	e018      	b.n	8005ad8 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005aa6:	23a4      	movs	r3, #164	; 0xa4
 8005aa8:	18fb      	adds	r3, r7, r3
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2240      	movs	r2, #64	; 0x40
 8005aae:	4013      	ands	r3, r2
 8005ab0:	d013      	beq.n	8005ada <HAL_UART_IRQHandler+0x582>
 8005ab2:	23a0      	movs	r3, #160	; 0xa0
 8005ab4:	18fb      	adds	r3, r7, r3
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2240      	movs	r2, #64	; 0x40
 8005aba:	4013      	ands	r3, r2
 8005abc:	d00d      	beq.n	8005ada <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	f000 fd6f 	bl	80065a4 <UART_EndTransmit_IT>
    return;
 8005ac6:	e008      	b.n	8005ada <HAL_UART_IRQHandler+0x582>
      return;
 8005ac8:	46c0      	nop			; (mov r8, r8)
 8005aca:	e006      	b.n	8005ada <HAL_UART_IRQHandler+0x582>
    return;
 8005acc:	46c0      	nop			; (mov r8, r8)
 8005ace:	e004      	b.n	8005ada <HAL_UART_IRQHandler+0x582>
      return;
 8005ad0:	46c0      	nop			; (mov r8, r8)
 8005ad2:	e002      	b.n	8005ada <HAL_UART_IRQHandler+0x582>
      return;
 8005ad4:	46c0      	nop			; (mov r8, r8)
 8005ad6:	e000      	b.n	8005ada <HAL_UART_IRQHandler+0x582>
    return;
 8005ad8:	46c0      	nop			; (mov r8, r8)
  }

}
 8005ada:	46bd      	mov	sp, r7
 8005adc:	b02b      	add	sp, #172	; 0xac
 8005ade:	bd90      	pop	{r4, r7, pc}
 8005ae0:	fffffeff 	.word	0xfffffeff
 8005ae4:	fffffedf 	.word	0xfffffedf

08005ae8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005af0:	46c0      	nop			; (mov r8, r8)
 8005af2:	46bd      	mov	sp, r7
 8005af4:	b002      	add	sp, #8
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005b00:	46c0      	nop			; (mov r8, r8)
 8005b02:	46bd      	mov	sp, r7
 8005b04:	b002      	add	sp, #8
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b10:	46c0      	nop			; (mov r8, r8)
 8005b12:	46bd      	mov	sp, r7
 8005b14:	b002      	add	sp, #8
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b20:	46c0      	nop			; (mov r8, r8)
 8005b22:	46bd      	mov	sp, r7
 8005b24:	b002      	add	sp, #8
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b30:	231e      	movs	r3, #30
 8005b32:	18fb      	adds	r3, r7, r3
 8005b34:	2200      	movs	r2, #0
 8005b36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	431a      	orrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a8d      	ldr	r2, [pc, #564]	; (8005d8c <UART_SetConfig+0x264>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	0019      	movs	r1, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	4a88      	ldr	r2, [pc, #544]	; (8005d90 <UART_SetConfig+0x268>)
 8005b6e:	4013      	ands	r3, r2
 8005b70:	0019      	movs	r1, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	4a7f      	ldr	r2, [pc, #508]	; (8005d94 <UART_SetConfig+0x26c>)
 8005b96:	4013      	ands	r3, r2
 8005b98:	0019      	movs	r1, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a7b      	ldr	r2, [pc, #492]	; (8005d98 <UART_SetConfig+0x270>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d127      	bne.n	8005bfe <UART_SetConfig+0xd6>
 8005bae:	4b7b      	ldr	r3, [pc, #492]	; (8005d9c <UART_SetConfig+0x274>)
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb2:	2203      	movs	r2, #3
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d00d      	beq.n	8005bd6 <UART_SetConfig+0xae>
 8005bba:	d81b      	bhi.n	8005bf4 <UART_SetConfig+0xcc>
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d014      	beq.n	8005bea <UART_SetConfig+0xc2>
 8005bc0:	d818      	bhi.n	8005bf4 <UART_SetConfig+0xcc>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <UART_SetConfig+0xa4>
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d00a      	beq.n	8005be0 <UART_SetConfig+0xb8>
 8005bca:	e013      	b.n	8005bf4 <UART_SetConfig+0xcc>
 8005bcc:	231f      	movs	r3, #31
 8005bce:	18fb      	adds	r3, r7, r3
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	e021      	b.n	8005c1a <UART_SetConfig+0xf2>
 8005bd6:	231f      	movs	r3, #31
 8005bd8:	18fb      	adds	r3, r7, r3
 8005bda:	2202      	movs	r2, #2
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	e01c      	b.n	8005c1a <UART_SetConfig+0xf2>
 8005be0:	231f      	movs	r3, #31
 8005be2:	18fb      	adds	r3, r7, r3
 8005be4:	2204      	movs	r2, #4
 8005be6:	701a      	strb	r2, [r3, #0]
 8005be8:	e017      	b.n	8005c1a <UART_SetConfig+0xf2>
 8005bea:	231f      	movs	r3, #31
 8005bec:	18fb      	adds	r3, r7, r3
 8005bee:	2208      	movs	r2, #8
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	e012      	b.n	8005c1a <UART_SetConfig+0xf2>
 8005bf4:	231f      	movs	r3, #31
 8005bf6:	18fb      	adds	r3, r7, r3
 8005bf8:	2210      	movs	r2, #16
 8005bfa:	701a      	strb	r2, [r3, #0]
 8005bfc:	e00d      	b.n	8005c1a <UART_SetConfig+0xf2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a67      	ldr	r2, [pc, #412]	; (8005da0 <UART_SetConfig+0x278>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d104      	bne.n	8005c12 <UART_SetConfig+0xea>
 8005c08:	231f      	movs	r3, #31
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	701a      	strb	r2, [r3, #0]
 8005c10:	e003      	b.n	8005c1a <UART_SetConfig+0xf2>
 8005c12:	231f      	movs	r3, #31
 8005c14:	18fb      	adds	r3, r7, r3
 8005c16:	2210      	movs	r2, #16
 8005c18:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69da      	ldr	r2, [r3, #28]
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	021b      	lsls	r3, r3, #8
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d15c      	bne.n	8005ce0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8005c26:	231f      	movs	r3, #31
 8005c28:	18fb      	adds	r3, r7, r3
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d015      	beq.n	8005c5c <UART_SetConfig+0x134>
 8005c30:	dc18      	bgt.n	8005c64 <UART_SetConfig+0x13c>
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d00d      	beq.n	8005c52 <UART_SetConfig+0x12a>
 8005c36:	dc15      	bgt.n	8005c64 <UART_SetConfig+0x13c>
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <UART_SetConfig+0x11a>
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d005      	beq.n	8005c4c <UART_SetConfig+0x124>
 8005c40:	e010      	b.n	8005c64 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c42:	f7ff fab1 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8005c46:	0003      	movs	r3, r0
 8005c48:	61bb      	str	r3, [r7, #24]
        break;
 8005c4a:	e012      	b.n	8005c72 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c4c:	4b55      	ldr	r3, [pc, #340]	; (8005da4 <UART_SetConfig+0x27c>)
 8005c4e:	61bb      	str	r3, [r7, #24]
        break;
 8005c50:	e00f      	b.n	8005c72 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c52:	f7ff fa49 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 8005c56:	0003      	movs	r3, r0
 8005c58:	61bb      	str	r3, [r7, #24]
        break;
 8005c5a:	e00a      	b.n	8005c72 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c5c:	2380      	movs	r3, #128	; 0x80
 8005c5e:	021b      	lsls	r3, r3, #8
 8005c60:	61bb      	str	r3, [r7, #24]
        break;
 8005c62:	e006      	b.n	8005c72 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c68:	231e      	movs	r3, #30
 8005c6a:	18fb      	adds	r3, r7, r3
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
        break;
 8005c70:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d100      	bne.n	8005c7a <UART_SetConfig+0x152>
 8005c78:	e07a      	b.n	8005d70 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	005a      	lsls	r2, r3, #1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	085b      	lsrs	r3, r3, #1
 8005c84:	18d2      	adds	r2, r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	0019      	movs	r1, r3
 8005c8c:	0010      	movs	r0, r2
 8005c8e:	f7fa fa57 	bl	8000140 <__udivsi3>
 8005c92:	0003      	movs	r3, r0
 8005c94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2b0f      	cmp	r3, #15
 8005c9a:	d91c      	bls.n	8005cd6 <UART_SetConfig+0x1ae>
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	2380      	movs	r3, #128	; 0x80
 8005ca0:	025b      	lsls	r3, r3, #9
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d217      	bcs.n	8005cd6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	200e      	movs	r0, #14
 8005cac:	183b      	adds	r3, r7, r0
 8005cae:	210f      	movs	r1, #15
 8005cb0:	438a      	bics	r2, r1
 8005cb2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	085b      	lsrs	r3, r3, #1
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2207      	movs	r2, #7
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	b299      	uxth	r1, r3
 8005cc0:	183b      	adds	r3, r7, r0
 8005cc2:	183a      	adds	r2, r7, r0
 8005cc4:	8812      	ldrh	r2, [r2, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	183a      	adds	r2, r7, r0
 8005cd0:	8812      	ldrh	r2, [r2, #0]
 8005cd2:	60da      	str	r2, [r3, #12]
 8005cd4:	e04c      	b.n	8005d70 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005cd6:	231e      	movs	r3, #30
 8005cd8:	18fb      	adds	r3, r7, r3
 8005cda:	2201      	movs	r2, #1
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	e047      	b.n	8005d70 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ce0:	231f      	movs	r3, #31
 8005ce2:	18fb      	adds	r3, r7, r3
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b08      	cmp	r3, #8
 8005ce8:	d015      	beq.n	8005d16 <UART_SetConfig+0x1ee>
 8005cea:	dc18      	bgt.n	8005d1e <UART_SetConfig+0x1f6>
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d00d      	beq.n	8005d0c <UART_SetConfig+0x1e4>
 8005cf0:	dc15      	bgt.n	8005d1e <UART_SetConfig+0x1f6>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <UART_SetConfig+0x1d4>
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d005      	beq.n	8005d06 <UART_SetConfig+0x1de>
 8005cfa:	e010      	b.n	8005d1e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cfc:	f7ff fa54 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8005d00:	0003      	movs	r3, r0
 8005d02:	61bb      	str	r3, [r7, #24]
        break;
 8005d04:	e012      	b.n	8005d2c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d06:	4b27      	ldr	r3, [pc, #156]	; (8005da4 <UART_SetConfig+0x27c>)
 8005d08:	61bb      	str	r3, [r7, #24]
        break;
 8005d0a:	e00f      	b.n	8005d2c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d0c:	f7ff f9ec 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 8005d10:	0003      	movs	r3, r0
 8005d12:	61bb      	str	r3, [r7, #24]
        break;
 8005d14:	e00a      	b.n	8005d2c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d16:	2380      	movs	r3, #128	; 0x80
 8005d18:	021b      	lsls	r3, r3, #8
 8005d1a:	61bb      	str	r3, [r7, #24]
        break;
 8005d1c:	e006      	b.n	8005d2c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d22:	231e      	movs	r3, #30
 8005d24:	18fb      	adds	r3, r7, r3
 8005d26:	2201      	movs	r2, #1
 8005d28:	701a      	strb	r2, [r3, #0]
        break;
 8005d2a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d01e      	beq.n	8005d70 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	085a      	lsrs	r2, r3, #1
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	18d2      	adds	r2, r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	0019      	movs	r1, r3
 8005d42:	0010      	movs	r0, r2
 8005d44:	f7fa f9fc 	bl	8000140 <__udivsi3>
 8005d48:	0003      	movs	r3, r0
 8005d4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	2b0f      	cmp	r3, #15
 8005d50:	d90a      	bls.n	8005d68 <UART_SetConfig+0x240>
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	2380      	movs	r3, #128	; 0x80
 8005d56:	025b      	lsls	r3, r3, #9
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d205      	bcs.n	8005d68 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	60da      	str	r2, [r3, #12]
 8005d66:	e003      	b.n	8005d70 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005d68:	231e      	movs	r3, #30
 8005d6a:	18fb      	adds	r3, r7, r3
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d7c:	231e      	movs	r3, #30
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	781b      	ldrb	r3, [r3, #0]
}
 8005d82:	0018      	movs	r0, r3
 8005d84:	46bd      	mov	sp, r7
 8005d86:	b008      	add	sp, #32
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	ffff69f3 	.word	0xffff69f3
 8005d90:	ffffcfff 	.word	0xffffcfff
 8005d94:	fffff4ff 	.word	0xfffff4ff
 8005d98:	40013800 	.word	0x40013800
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	40004400 	.word	0x40004400
 8005da4:	007a1200 	.word	0x007a1200

08005da8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	2201      	movs	r2, #1
 8005db6:	4013      	ands	r3, r2
 8005db8:	d00b      	beq.n	8005dd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	4a4a      	ldr	r2, [pc, #296]	; (8005eec <UART_AdvFeatureConfig+0x144>)
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	0019      	movs	r1, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	4013      	ands	r3, r2
 8005dda:	d00b      	beq.n	8005df4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	4a43      	ldr	r2, [pc, #268]	; (8005ef0 <UART_AdvFeatureConfig+0x148>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	0019      	movs	r1, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	2204      	movs	r2, #4
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d00b      	beq.n	8005e16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	4a3b      	ldr	r2, [pc, #236]	; (8005ef4 <UART_AdvFeatureConfig+0x14c>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	0019      	movs	r1, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	d00b      	beq.n	8005e38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	4a34      	ldr	r2, [pc, #208]	; (8005ef8 <UART_AdvFeatureConfig+0x150>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	0019      	movs	r1, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	2210      	movs	r2, #16
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d00b      	beq.n	8005e5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	4a2c      	ldr	r2, [pc, #176]	; (8005efc <UART_AdvFeatureConfig+0x154>)
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	0019      	movs	r1, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	2220      	movs	r2, #32
 8005e60:	4013      	ands	r3, r2
 8005e62:	d00b      	beq.n	8005e7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	4a25      	ldr	r2, [pc, #148]	; (8005f00 <UART_AdvFeatureConfig+0x158>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	0019      	movs	r1, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2240      	movs	r2, #64	; 0x40
 8005e82:	4013      	ands	r3, r2
 8005e84:	d01d      	beq.n	8005ec2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	4a1d      	ldr	r2, [pc, #116]	; (8005f04 <UART_AdvFeatureConfig+0x15c>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	0019      	movs	r1, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ea2:	2380      	movs	r3, #128	; 0x80
 8005ea4:	035b      	lsls	r3, r3, #13
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d10b      	bne.n	8005ec2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	4a15      	ldr	r2, [pc, #84]	; (8005f08 <UART_AdvFeatureConfig+0x160>)
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	0019      	movs	r1, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	2280      	movs	r2, #128	; 0x80
 8005ec8:	4013      	ands	r3, r2
 8005eca:	d00b      	beq.n	8005ee4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	4a0e      	ldr	r2, [pc, #56]	; (8005f0c <UART_AdvFeatureConfig+0x164>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	0019      	movs	r1, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	605a      	str	r2, [r3, #4]
  }
}
 8005ee4:	46c0      	nop			; (mov r8, r8)
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	b002      	add	sp, #8
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	fffdffff 	.word	0xfffdffff
 8005ef0:	fffeffff 	.word	0xfffeffff
 8005ef4:	fffbffff 	.word	0xfffbffff
 8005ef8:	ffff7fff 	.word	0xffff7fff
 8005efc:	ffffefff 	.word	0xffffefff
 8005f00:	ffffdfff 	.word	0xffffdfff
 8005f04:	ffefffff 	.word	0xffefffff
 8005f08:	ff9fffff 	.word	0xff9fffff
 8005f0c:	fff7ffff 	.word	0xfff7ffff

08005f10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b092      	sub	sp, #72	; 0x48
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2284      	movs	r2, #132	; 0x84
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f20:	f7fe f84a 	bl	8003fb8 <HAL_GetTick>
 8005f24:	0003      	movs	r3, r0
 8005f26:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2208      	movs	r2, #8
 8005f30:	4013      	ands	r3, r2
 8005f32:	2b08      	cmp	r3, #8
 8005f34:	d12c      	bne.n	8005f90 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f38:	2280      	movs	r2, #128	; 0x80
 8005f3a:	0391      	lsls	r1, r2, #14
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4a46      	ldr	r2, [pc, #280]	; (8006058 <UART_CheckIdleState+0x148>)
 8005f40:	9200      	str	r2, [sp, #0]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f000 f88c 	bl	8006060 <UART_WaitOnFlagUntilTimeout>
 8005f48:	1e03      	subs	r3, r0, #0
 8005f4a:	d021      	beq.n	8005f90 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f54:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f56:	2301      	movs	r3, #1
 8005f58:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5c:	f383 8810 	msr	PRIMASK, r3
}
 8005f60:	46c0      	nop			; (mov r8, r8)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2180      	movs	r1, #128	; 0x80
 8005f6e:	438a      	bics	r2, r1
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	f383 8810 	msr	PRIMASK, r3
}
 8005f7c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2278      	movs	r2, #120	; 0x78
 8005f88:	2100      	movs	r1, #0
 8005f8a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e05f      	b.n	8006050 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2204      	movs	r2, #4
 8005f98:	4013      	ands	r3, r2
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d146      	bne.n	800602c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa0:	2280      	movs	r2, #128	; 0x80
 8005fa2:	03d1      	lsls	r1, r2, #15
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	4a2c      	ldr	r2, [pc, #176]	; (8006058 <UART_CheckIdleState+0x148>)
 8005fa8:	9200      	str	r2, [sp, #0]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f000 f858 	bl	8006060 <UART_WaitOnFlagUntilTimeout>
 8005fb0:	1e03      	subs	r3, r0, #0
 8005fb2:	d03b      	beq.n	800602c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8005fb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fba:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f383 8810 	msr	PRIMASK, r3
}
 8005fc8:	46c0      	nop			; (mov r8, r8)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4921      	ldr	r1, [pc, #132]	; (800605c <UART_CheckIdleState+0x14c>)
 8005fd6:	400a      	ands	r2, r1
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f383 8810 	msr	PRIMASK, r3
}
 8005fe4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8005fea:	61bb      	str	r3, [r7, #24]
  return(result);
 8005fec:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fee:	633b      	str	r3, [r7, #48]	; 0x30
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	f383 8810 	msr	PRIMASK, r3
}
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2101      	movs	r1, #1
 8006008:	438a      	bics	r2, r1
 800600a:	609a      	str	r2, [r3, #8]
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	f383 8810 	msr	PRIMASK, r3
}
 8006016:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2280      	movs	r2, #128	; 0x80
 800601c:	2120      	movs	r1, #32
 800601e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2278      	movs	r2, #120	; 0x78
 8006024:	2100      	movs	r1, #0
 8006026:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e011      	b.n	8006050 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2220      	movs	r2, #32
 8006030:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2280      	movs	r2, #128	; 0x80
 8006036:	2120      	movs	r1, #32
 8006038:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2278      	movs	r2, #120	; 0x78
 800604a:	2100      	movs	r1, #0
 800604c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	0018      	movs	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	b010      	add	sp, #64	; 0x40
 8006056:	bd80      	pop	{r7, pc}
 8006058:	01ffffff 	.word	0x01ffffff
 800605c:	fffffedf 	.word	0xfffffedf

08006060 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	603b      	str	r3, [r7, #0]
 800606c:	1dfb      	adds	r3, r7, #7
 800606e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006070:	e04b      	b.n	800610a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	3301      	adds	r3, #1
 8006076:	d048      	beq.n	800610a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006078:	f7fd ff9e 	bl	8003fb8 <HAL_GetTick>
 800607c:	0002      	movs	r2, r0
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	429a      	cmp	r2, r3
 8006086:	d302      	bcc.n	800608e <UART_WaitOnFlagUntilTimeout+0x2e>
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e04b      	b.n	800612a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2204      	movs	r2, #4
 800609a:	4013      	ands	r3, r2
 800609c:	d035      	beq.n	800610a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	2208      	movs	r2, #8
 80060a6:	4013      	ands	r3, r2
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d111      	bne.n	80060d0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2208      	movs	r2, #8
 80060b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	0018      	movs	r0, r3
 80060b8:	f000 f900 	bl	80062bc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2284      	movs	r2, #132	; 0x84
 80060c0:	2108      	movs	r1, #8
 80060c2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2278      	movs	r2, #120	; 0x78
 80060c8:	2100      	movs	r1, #0
 80060ca:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e02c      	b.n	800612a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69da      	ldr	r2, [r3, #28]
 80060d6:	2380      	movs	r3, #128	; 0x80
 80060d8:	011b      	lsls	r3, r3, #4
 80060da:	401a      	ands	r2, r3
 80060dc:	2380      	movs	r3, #128	; 0x80
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d112      	bne.n	800610a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2280      	movs	r2, #128	; 0x80
 80060ea:	0112      	lsls	r2, r2, #4
 80060ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	0018      	movs	r0, r3
 80060f2:	f000 f8e3 	bl	80062bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2284      	movs	r2, #132	; 0x84
 80060fa:	2120      	movs	r1, #32
 80060fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2278      	movs	r2, #120	; 0x78
 8006102:	2100      	movs	r1, #0
 8006104:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e00f      	b.n	800612a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	4013      	ands	r3, r2
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	425a      	negs	r2, r3
 800611a:	4153      	adcs	r3, r2
 800611c:	b2db      	uxtb	r3, r3
 800611e:	001a      	movs	r2, r3
 8006120:	1dfb      	adds	r3, r7, #7
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	429a      	cmp	r2, r3
 8006126:	d0a4      	beq.n	8006072 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	0018      	movs	r0, r3
 800612c:	46bd      	mov	sp, r7
 800612e:	b004      	add	sp, #16
 8006130:	bd80      	pop	{r7, pc}
	...

08006134 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b090      	sub	sp, #64	; 0x40
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	1dbb      	adds	r3, r7, #6
 8006140:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	1dba      	adds	r2, r7, #6
 800614c:	2158      	movs	r1, #88	; 0x58
 800614e:	8812      	ldrh	r2, [r2, #0]
 8006150:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2284      	movs	r2, #132	; 0x84
 8006156:	2100      	movs	r1, #0
 8006158:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2280      	movs	r2, #128	; 0x80
 800615e:	2122      	movs	r1, #34	; 0x22
 8006160:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006166:	2b00      	cmp	r3, #0
 8006168:	d028      	beq.n	80061bc <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800616e:	4a3e      	ldr	r2, [pc, #248]	; (8006268 <UART_Start_Receive_DMA+0x134>)
 8006170:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006176:	4a3d      	ldr	r2, [pc, #244]	; (800626c <UART_Start_Receive_DMA+0x138>)
 8006178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800617e:	4a3c      	ldr	r2, [pc, #240]	; (8006270 <UART_Start_Receive_DMA+0x13c>)
 8006180:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006186:	2200      	movs	r2, #0
 8006188:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3324      	adds	r3, #36	; 0x24
 8006194:	0019      	movs	r1, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619a:	001a      	movs	r2, r3
 800619c:	1dbb      	adds	r3, r7, #6
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	f7fe f85e 	bl	8004260 <HAL_DMA_Start_IT>
 80061a4:	1e03      	subs	r3, r0, #0
 80061a6:	d009      	beq.n	80061bc <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2284      	movs	r2, #132	; 0x84
 80061ac:	2110      	movs	r1, #16
 80061ae:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2280      	movs	r2, #128	; 0x80
 80061b4:	2120      	movs	r1, #32
 80061b6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e050      	b.n	800625e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d019      	beq.n	80061f8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061c4:	f3ef 8310 	mrs	r3, PRIMASK
 80061c8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ce:	2301      	movs	r3, #1
 80061d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	f383 8810 	msr	PRIMASK, r3
}
 80061d8:	46c0      	nop			; (mov r8, r8)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2180      	movs	r1, #128	; 0x80
 80061e6:	0049      	lsls	r1, r1, #1
 80061e8:	430a      	orrs	r2, r1
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ee:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	f383 8810 	msr	PRIMASK, r3
}
 80061f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061f8:	f3ef 8310 	mrs	r3, PRIMASK
 80061fc:	613b      	str	r3, [r7, #16]
  return(result);
 80061fe:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006200:	63bb      	str	r3, [r7, #56]	; 0x38
 8006202:	2301      	movs	r3, #1
 8006204:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f383 8810 	msr	PRIMASK, r3
}
 800620c:	46c0      	nop			; (mov r8, r8)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2101      	movs	r1, #1
 800621a:	430a      	orrs	r2, r1
 800621c:	609a      	str	r2, [r3, #8]
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	f383 8810 	msr	PRIMASK, r3
}
 8006228:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800622a:	f3ef 8310 	mrs	r3, PRIMASK
 800622e:	61fb      	str	r3, [r7, #28]
  return(result);
 8006230:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006232:	637b      	str	r3, [r7, #52]	; 0x34
 8006234:	2301      	movs	r3, #1
 8006236:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	f383 8810 	msr	PRIMASK, r3
}
 800623e:	46c0      	nop			; (mov r8, r8)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2140      	movs	r1, #64	; 0x40
 800624c:	430a      	orrs	r2, r1
 800624e:	609a      	str	r2, [r3, #8]
 8006250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006252:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	f383 8810 	msr	PRIMASK, r3
}
 800625a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	0018      	movs	r0, r3
 8006260:	46bd      	mov	sp, r7
 8006262:	b010      	add	sp, #64	; 0x40
 8006264:	bd80      	pop	{r7, pc}
 8006266:	46c0      	nop			; (mov r8, r8)
 8006268:	08006385 	.word	0x08006385
 800626c:	080064b1 	.word	0x080064b1
 8006270:	080064f3 	.word	0x080064f3

08006274 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800627c:	f3ef 8310 	mrs	r3, PRIMASK
 8006280:	60bb      	str	r3, [r7, #8]
  return(result);
 8006282:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	2301      	movs	r3, #1
 8006288:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f383 8810 	msr	PRIMASK, r3
}
 8006290:	46c0      	nop			; (mov r8, r8)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	21c0      	movs	r1, #192	; 0xc0
 800629e:	438a      	bics	r2, r1
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f383 8810 	msr	PRIMASK, r3
}
 80062ac:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80062b4:	46c0      	nop			; (mov r8, r8)
 80062b6:	46bd      	mov	sp, r7
 80062b8:	b006      	add	sp, #24
 80062ba:	bd80      	pop	{r7, pc}

080062bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08e      	sub	sp, #56	; 0x38
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062c4:	f3ef 8310 	mrs	r3, PRIMASK
 80062c8:	617b      	str	r3, [r7, #20]
  return(result);
 80062ca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062cc:	637b      	str	r3, [r7, #52]	; 0x34
 80062ce:	2301      	movs	r3, #1
 80062d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	f383 8810 	msr	PRIMASK, r3
}
 80062d8:	46c0      	nop			; (mov r8, r8)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4926      	ldr	r1, [pc, #152]	; (8006380 <UART_EndRxTransfer+0xc4>)
 80062e6:	400a      	ands	r2, r1
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	f383 8810 	msr	PRIMASK, r3
}
 80062f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062f6:	f3ef 8310 	mrs	r3, PRIMASK
 80062fa:	623b      	str	r3, [r7, #32]
  return(result);
 80062fc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006300:	2301      	movs	r3, #1
 8006302:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	f383 8810 	msr	PRIMASK, r3
}
 800630a:	46c0      	nop			; (mov r8, r8)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2101      	movs	r1, #1
 8006318:	438a      	bics	r2, r1
 800631a:	609a      	str	r2, [r3, #8]
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	f383 8810 	msr	PRIMASK, r3
}
 8006326:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800632c:	2b01      	cmp	r3, #1
 800632e:	d118      	bne.n	8006362 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006330:	f3ef 8310 	mrs	r3, PRIMASK
 8006334:	60bb      	str	r3, [r7, #8]
  return(result);
 8006336:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800633a:	2301      	movs	r3, #1
 800633c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f383 8810 	msr	PRIMASK, r3
}
 8006344:	46c0      	nop			; (mov r8, r8)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2110      	movs	r1, #16
 8006352:	438a      	bics	r2, r1
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006358:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f383 8810 	msr	PRIMASK, r3
}
 8006360:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2280      	movs	r2, #128	; 0x80
 8006366:	2120      	movs	r1, #32
 8006368:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006376:	46c0      	nop			; (mov r8, r8)
 8006378:	46bd      	mov	sp, r7
 800637a:	b00e      	add	sp, #56	; 0x38
 800637c:	bd80      	pop	{r7, pc}
 800637e:	46c0      	nop			; (mov r8, r8)
 8006380:	fffffedf 	.word	0xfffffedf

08006384 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b094      	sub	sp, #80	; 0x50
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	2b20      	cmp	r3, #32
 8006398:	d06f      	beq.n	800647a <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 800639a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800639c:	225a      	movs	r2, #90	; 0x5a
 800639e:	2100      	movs	r1, #0
 80063a0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063a2:	f3ef 8310 	mrs	r3, PRIMASK
 80063a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80063a8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80063ac:	2301      	movs	r3, #1
 80063ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	f383 8810 	msr	PRIMASK, r3
}
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	493a      	ldr	r1, [pc, #232]	; (80064ac <UART_DMAReceiveCplt+0x128>)
 80063c4:	400a      	ands	r2, r1
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	f383 8810 	msr	PRIMASK, r3
}
 80063d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063d4:	f3ef 8310 	mrs	r3, PRIMASK
 80063d8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063dc:	647b      	str	r3, [r7, #68]	; 0x44
 80063de:	2301      	movs	r3, #1
 80063e0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	f383 8810 	msr	PRIMASK, r3
}
 80063e8:	46c0      	nop			; (mov r8, r8)
 80063ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2101      	movs	r1, #1
 80063f6:	438a      	bics	r2, r1
 80063f8:	609a      	str	r2, [r3, #8]
 80063fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006400:	f383 8810 	msr	PRIMASK, r3
}
 8006404:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006406:	f3ef 8310 	mrs	r3, PRIMASK
 800640a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800640c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800640e:	643b      	str	r3, [r7, #64]	; 0x40
 8006410:	2301      	movs	r3, #1
 8006412:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006416:	f383 8810 	msr	PRIMASK, r3
}
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2140      	movs	r1, #64	; 0x40
 8006428:	438a      	bics	r2, r1
 800642a:	609a      	str	r2, [r3, #8]
 800642c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800642e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006432:	f383 8810 	msr	PRIMASK, r3
}
 8006436:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800643a:	2280      	movs	r2, #128	; 0x80
 800643c:	2120      	movs	r1, #32
 800643e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006444:	2b01      	cmp	r3, #1
 8006446:	d118      	bne.n	800647a <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006448:	f3ef 8310 	mrs	r3, PRIMASK
 800644c:	60fb      	str	r3, [r7, #12]
  return(result);
 800644e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006452:	2301      	movs	r3, #1
 8006454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f383 8810 	msr	PRIMASK, r3
}
 800645c:	46c0      	nop			; (mov r8, r8)
 800645e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2110      	movs	r1, #16
 800646a:	438a      	bics	r2, r1
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006470:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f383 8810 	msr	PRIMASK, r3
}
 8006478:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800647a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647c:	2200      	movs	r2, #0
 800647e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006484:	2b01      	cmp	r3, #1
 8006486:	d108      	bne.n	800649a <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648a:	2258      	movs	r2, #88	; 0x58
 800648c:	5a9a      	ldrh	r2, [r3, r2]
 800648e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006490:	0011      	movs	r1, r2
 8006492:	0018      	movs	r0, r3
 8006494:	f7fc fb50 	bl	8002b38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006498:	e003      	b.n	80064a2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800649a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800649c:	0018      	movs	r0, r3
 800649e:	f7ff fb2b 	bl	8005af8 <HAL_UART_RxCpltCallback>
}
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	46bd      	mov	sp, r7
 80064a6:	b014      	add	sp, #80	; 0x50
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	fffffeff 	.word	0xfffffeff

080064b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d10a      	bne.n	80064e2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2258      	movs	r2, #88	; 0x58
 80064d0:	5a9b      	ldrh	r3, [r3, r2]
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	0011      	movs	r1, r2
 80064da:	0018      	movs	r0, r3
 80064dc:	f7fc fb2c 	bl	8002b38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064e0:	e003      	b.n	80064ea <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	0018      	movs	r0, r3
 80064e6:	f7ff fb0f 	bl	8005b08 <HAL_UART_RxHalfCpltCallback>
}
 80064ea:	46c0      	nop			; (mov r8, r8)
 80064ec:	46bd      	mov	sp, r7
 80064ee:	b004      	add	sp, #16
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b086      	sub	sp, #24
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006504:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2280      	movs	r2, #128	; 0x80
 800650a:	589b      	ldr	r3, [r3, r2]
 800650c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	2280      	movs	r2, #128	; 0x80
 8006516:	4013      	ands	r3, r2
 8006518:	2b80      	cmp	r3, #128	; 0x80
 800651a:	d10a      	bne.n	8006532 <UART_DMAError+0x40>
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	2b21      	cmp	r3, #33	; 0x21
 8006520:	d107      	bne.n	8006532 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2252      	movs	r2, #82	; 0x52
 8006526:	2100      	movs	r1, #0
 8006528:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	0018      	movs	r0, r3
 800652e:	f7ff fea1 	bl	8006274 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	2240      	movs	r2, #64	; 0x40
 800653a:	4013      	ands	r3, r2
 800653c:	2b40      	cmp	r3, #64	; 0x40
 800653e:	d10a      	bne.n	8006556 <UART_DMAError+0x64>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b22      	cmp	r3, #34	; 0x22
 8006544:	d107      	bne.n	8006556 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	225a      	movs	r2, #90	; 0x5a
 800654a:	2100      	movs	r1, #0
 800654c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	0018      	movs	r0, r3
 8006552:	f7ff feb3 	bl	80062bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2284      	movs	r2, #132	; 0x84
 800655a:	589b      	ldr	r3, [r3, r2]
 800655c:	2210      	movs	r2, #16
 800655e:	431a      	orrs	r2, r3
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2184      	movs	r1, #132	; 0x84
 8006564:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	0018      	movs	r0, r3
 800656a:	f7ff fad5 	bl	8005b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800656e:	46c0      	nop			; (mov r8, r8)
 8006570:	46bd      	mov	sp, r7
 8006572:	b006      	add	sp, #24
 8006574:	bd80      	pop	{r7, pc}

08006576 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b084      	sub	sp, #16
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	225a      	movs	r2, #90	; 0x5a
 8006588:	2100      	movs	r1, #0
 800658a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2252      	movs	r2, #82	; 0x52
 8006590:	2100      	movs	r1, #0
 8006592:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	0018      	movs	r0, r3
 8006598:	f7ff fabe 	bl	8005b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800659c:	46c0      	nop			; (mov r8, r8)
 800659e:	46bd      	mov	sp, r7
 80065a0:	b004      	add	sp, #16
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ac:	f3ef 8310 	mrs	r3, PRIMASK
 80065b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80065b2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065b4:	617b      	str	r3, [r7, #20]
 80065b6:	2301      	movs	r3, #1
 80065b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f383 8810 	msr	PRIMASK, r3
}
 80065c0:	46c0      	nop			; (mov r8, r8)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2140      	movs	r1, #64	; 0x40
 80065ce:	438a      	bics	r2, r1
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f383 8810 	msr	PRIMASK, r3
}
 80065dc:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2220      	movs	r2, #32
 80065e2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	0018      	movs	r0, r3
 80065ee:	f7ff fa7b 	bl	8005ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065f2:	46c0      	nop			; (mov r8, r8)
 80065f4:	46bd      	mov	sp, r7
 80065f6:	b006      	add	sp, #24
 80065f8:	bd80      	pop	{r7, pc}

080065fa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065fa:	b5b0      	push	{r4, r5, r7, lr}
 80065fc:	b08a      	sub	sp, #40	; 0x28
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	1dbb      	adds	r3, r7, #6
 8006606:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2280      	movs	r2, #128	; 0x80
 800660c:	589b      	ldr	r3, [r3, r2]
 800660e:	2b20      	cmp	r3, #32
 8006610:	d156      	bne.n	80066c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006618:	1dbb      	adds	r3, r7, #6
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e04e      	b.n	80066c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	2380      	movs	r3, #128	; 0x80
 800662a:	015b      	lsls	r3, r3, #5
 800662c:	429a      	cmp	r2, r3
 800662e:	d109      	bne.n	8006644 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d105      	bne.n	8006644 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2201      	movs	r2, #1
 800663c:	4013      	ands	r3, r2
 800663e:	d001      	beq.n	8006644 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e03e      	b.n	80066c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2201      	movs	r2, #1
 8006648:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006650:	2527      	movs	r5, #39	; 0x27
 8006652:	197c      	adds	r4, r7, r5
 8006654:	1dbb      	adds	r3, r7, #6
 8006656:	881a      	ldrh	r2, [r3, #0]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	0018      	movs	r0, r3
 800665e:	f7ff fd69 	bl	8006134 <UART_Start_Receive_DMA>
 8006662:	0003      	movs	r3, r0
 8006664:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006666:	197b      	adds	r3, r7, r5
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d124      	bne.n	80066b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006672:	2b01      	cmp	r3, #1
 8006674:	d11c      	bne.n	80066b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2210      	movs	r2, #16
 800667c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800667e:	f3ef 8310 	mrs	r3, PRIMASK
 8006682:	617b      	str	r3, [r7, #20]
  return(result);
 8006684:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006686:	623b      	str	r3, [r7, #32]
 8006688:	2301      	movs	r3, #1
 800668a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	f383 8810 	msr	PRIMASK, r3
}
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2110      	movs	r1, #16
 80066a0:	430a      	orrs	r2, r1
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	f383 8810 	msr	PRIMASK, r3
}
 80066ae:	e003      	b.n	80066b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80066b0:	2327      	movs	r3, #39	; 0x27
 80066b2:	18fb      	adds	r3, r7, r3
 80066b4:	2201      	movs	r2, #1
 80066b6:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80066b8:	2327      	movs	r3, #39	; 0x27
 80066ba:	18fb      	adds	r3, r7, r3
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	e000      	b.n	80066c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80066c0:	2302      	movs	r3, #2
  }
}
 80066c2:	0018      	movs	r0, r3
 80066c4:	46bd      	mov	sp, r7
 80066c6:	b00a      	add	sp, #40	; 0x28
 80066c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080066cc <__errno>:
 80066cc:	4b01      	ldr	r3, [pc, #4]	; (80066d4 <__errno+0x8>)
 80066ce:	6818      	ldr	r0, [r3, #0]
 80066d0:	4770      	bx	lr
 80066d2:	46c0      	nop			; (mov r8, r8)
 80066d4:	2000000c 	.word	0x2000000c

080066d8 <__libc_init_array>:
 80066d8:	b570      	push	{r4, r5, r6, lr}
 80066da:	2600      	movs	r6, #0
 80066dc:	4d0c      	ldr	r5, [pc, #48]	; (8006710 <__libc_init_array+0x38>)
 80066de:	4c0d      	ldr	r4, [pc, #52]	; (8006714 <__libc_init_array+0x3c>)
 80066e0:	1b64      	subs	r4, r4, r5
 80066e2:	10a4      	asrs	r4, r4, #2
 80066e4:	42a6      	cmp	r6, r4
 80066e6:	d109      	bne.n	80066fc <__libc_init_array+0x24>
 80066e8:	2600      	movs	r6, #0
 80066ea:	f004 fc23 	bl	800af34 <_init>
 80066ee:	4d0a      	ldr	r5, [pc, #40]	; (8006718 <__libc_init_array+0x40>)
 80066f0:	4c0a      	ldr	r4, [pc, #40]	; (800671c <__libc_init_array+0x44>)
 80066f2:	1b64      	subs	r4, r4, r5
 80066f4:	10a4      	asrs	r4, r4, #2
 80066f6:	42a6      	cmp	r6, r4
 80066f8:	d105      	bne.n	8006706 <__libc_init_array+0x2e>
 80066fa:	bd70      	pop	{r4, r5, r6, pc}
 80066fc:	00b3      	lsls	r3, r6, #2
 80066fe:	58eb      	ldr	r3, [r5, r3]
 8006700:	4798      	blx	r3
 8006702:	3601      	adds	r6, #1
 8006704:	e7ee      	b.n	80066e4 <__libc_init_array+0xc>
 8006706:	00b3      	lsls	r3, r6, #2
 8006708:	58eb      	ldr	r3, [r5, r3]
 800670a:	4798      	blx	r3
 800670c:	3601      	adds	r6, #1
 800670e:	e7f2      	b.n	80066f6 <__libc_init_array+0x1e>
 8006710:	0800b600 	.word	0x0800b600
 8006714:	0800b600 	.word	0x0800b600
 8006718:	0800b600 	.word	0x0800b600
 800671c:	0800b604 	.word	0x0800b604

08006720 <malloc>:
 8006720:	b510      	push	{r4, lr}
 8006722:	4b03      	ldr	r3, [pc, #12]	; (8006730 <malloc+0x10>)
 8006724:	0001      	movs	r1, r0
 8006726:	6818      	ldr	r0, [r3, #0]
 8006728:	f000 f88c 	bl	8006844 <_malloc_r>
 800672c:	bd10      	pop	{r4, pc}
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	2000000c 	.word	0x2000000c

08006734 <free>:
 8006734:	b510      	push	{r4, lr}
 8006736:	4b03      	ldr	r3, [pc, #12]	; (8006744 <free+0x10>)
 8006738:	0001      	movs	r1, r0
 800673a:	6818      	ldr	r0, [r3, #0]
 800673c:	f000 f816 	bl	800676c <_free_r>
 8006740:	bd10      	pop	{r4, pc}
 8006742:	46c0      	nop			; (mov r8, r8)
 8006744:	2000000c 	.word	0x2000000c

08006748 <memcpy>:
 8006748:	2300      	movs	r3, #0
 800674a:	b510      	push	{r4, lr}
 800674c:	429a      	cmp	r2, r3
 800674e:	d100      	bne.n	8006752 <memcpy+0xa>
 8006750:	bd10      	pop	{r4, pc}
 8006752:	5ccc      	ldrb	r4, [r1, r3]
 8006754:	54c4      	strb	r4, [r0, r3]
 8006756:	3301      	adds	r3, #1
 8006758:	e7f8      	b.n	800674c <memcpy+0x4>

0800675a <memset>:
 800675a:	0003      	movs	r3, r0
 800675c:	1882      	adds	r2, r0, r2
 800675e:	4293      	cmp	r3, r2
 8006760:	d100      	bne.n	8006764 <memset+0xa>
 8006762:	4770      	bx	lr
 8006764:	7019      	strb	r1, [r3, #0]
 8006766:	3301      	adds	r3, #1
 8006768:	e7f9      	b.n	800675e <memset+0x4>
	...

0800676c <_free_r>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	0005      	movs	r5, r0
 8006770:	2900      	cmp	r1, #0
 8006772:	d010      	beq.n	8006796 <_free_r+0x2a>
 8006774:	1f0c      	subs	r4, r1, #4
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	da00      	bge.n	800677e <_free_r+0x12>
 800677c:	18e4      	adds	r4, r4, r3
 800677e:	0028      	movs	r0, r5
 8006780:	f002 ff7e 	bl	8009680 <__malloc_lock>
 8006784:	4a1d      	ldr	r2, [pc, #116]	; (80067fc <_free_r+0x90>)
 8006786:	6813      	ldr	r3, [r2, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d105      	bne.n	8006798 <_free_r+0x2c>
 800678c:	6063      	str	r3, [r4, #4]
 800678e:	6014      	str	r4, [r2, #0]
 8006790:	0028      	movs	r0, r5
 8006792:	f002 ff7d 	bl	8009690 <__malloc_unlock>
 8006796:	bd70      	pop	{r4, r5, r6, pc}
 8006798:	42a3      	cmp	r3, r4
 800679a:	d908      	bls.n	80067ae <_free_r+0x42>
 800679c:	6821      	ldr	r1, [r4, #0]
 800679e:	1860      	adds	r0, r4, r1
 80067a0:	4283      	cmp	r3, r0
 80067a2:	d1f3      	bne.n	800678c <_free_r+0x20>
 80067a4:	6818      	ldr	r0, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	1841      	adds	r1, r0, r1
 80067aa:	6021      	str	r1, [r4, #0]
 80067ac:	e7ee      	b.n	800678c <_free_r+0x20>
 80067ae:	001a      	movs	r2, r3
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <_free_r+0x4e>
 80067b6:	42a3      	cmp	r3, r4
 80067b8:	d9f9      	bls.n	80067ae <_free_r+0x42>
 80067ba:	6811      	ldr	r1, [r2, #0]
 80067bc:	1850      	adds	r0, r2, r1
 80067be:	42a0      	cmp	r0, r4
 80067c0:	d10b      	bne.n	80067da <_free_r+0x6e>
 80067c2:	6820      	ldr	r0, [r4, #0]
 80067c4:	1809      	adds	r1, r1, r0
 80067c6:	1850      	adds	r0, r2, r1
 80067c8:	6011      	str	r1, [r2, #0]
 80067ca:	4283      	cmp	r3, r0
 80067cc:	d1e0      	bne.n	8006790 <_free_r+0x24>
 80067ce:	6818      	ldr	r0, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	1841      	adds	r1, r0, r1
 80067d4:	6011      	str	r1, [r2, #0]
 80067d6:	6053      	str	r3, [r2, #4]
 80067d8:	e7da      	b.n	8006790 <_free_r+0x24>
 80067da:	42a0      	cmp	r0, r4
 80067dc:	d902      	bls.n	80067e4 <_free_r+0x78>
 80067de:	230c      	movs	r3, #12
 80067e0:	602b      	str	r3, [r5, #0]
 80067e2:	e7d5      	b.n	8006790 <_free_r+0x24>
 80067e4:	6821      	ldr	r1, [r4, #0]
 80067e6:	1860      	adds	r0, r4, r1
 80067e8:	4283      	cmp	r3, r0
 80067ea:	d103      	bne.n	80067f4 <_free_r+0x88>
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	1841      	adds	r1, r0, r1
 80067f2:	6021      	str	r1, [r4, #0]
 80067f4:	6063      	str	r3, [r4, #4]
 80067f6:	6054      	str	r4, [r2, #4]
 80067f8:	e7ca      	b.n	8006790 <_free_r+0x24>
 80067fa:	46c0      	nop			; (mov r8, r8)
 80067fc:	20000614 	.word	0x20000614

08006800 <sbrk_aligned>:
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	4e0f      	ldr	r6, [pc, #60]	; (8006840 <sbrk_aligned+0x40>)
 8006804:	000d      	movs	r5, r1
 8006806:	6831      	ldr	r1, [r6, #0]
 8006808:	0004      	movs	r4, r0
 800680a:	2900      	cmp	r1, #0
 800680c:	d102      	bne.n	8006814 <sbrk_aligned+0x14>
 800680e:	f000 fcfd 	bl	800720c <_sbrk_r>
 8006812:	6030      	str	r0, [r6, #0]
 8006814:	0029      	movs	r1, r5
 8006816:	0020      	movs	r0, r4
 8006818:	f000 fcf8 	bl	800720c <_sbrk_r>
 800681c:	1c43      	adds	r3, r0, #1
 800681e:	d00a      	beq.n	8006836 <sbrk_aligned+0x36>
 8006820:	2303      	movs	r3, #3
 8006822:	1cc5      	adds	r5, r0, #3
 8006824:	439d      	bics	r5, r3
 8006826:	42a8      	cmp	r0, r5
 8006828:	d007      	beq.n	800683a <sbrk_aligned+0x3a>
 800682a:	1a29      	subs	r1, r5, r0
 800682c:	0020      	movs	r0, r4
 800682e:	f000 fced 	bl	800720c <_sbrk_r>
 8006832:	1c43      	adds	r3, r0, #1
 8006834:	d101      	bne.n	800683a <sbrk_aligned+0x3a>
 8006836:	2501      	movs	r5, #1
 8006838:	426d      	negs	r5, r5
 800683a:	0028      	movs	r0, r5
 800683c:	bd70      	pop	{r4, r5, r6, pc}
 800683e:	46c0      	nop			; (mov r8, r8)
 8006840:	20000618 	.word	0x20000618

08006844 <_malloc_r>:
 8006844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006846:	2203      	movs	r2, #3
 8006848:	1ccb      	adds	r3, r1, #3
 800684a:	4393      	bics	r3, r2
 800684c:	3308      	adds	r3, #8
 800684e:	0006      	movs	r6, r0
 8006850:	001f      	movs	r7, r3
 8006852:	2b0c      	cmp	r3, #12
 8006854:	d232      	bcs.n	80068bc <_malloc_r+0x78>
 8006856:	270c      	movs	r7, #12
 8006858:	42b9      	cmp	r1, r7
 800685a:	d831      	bhi.n	80068c0 <_malloc_r+0x7c>
 800685c:	0030      	movs	r0, r6
 800685e:	f002 ff0f 	bl	8009680 <__malloc_lock>
 8006862:	4d32      	ldr	r5, [pc, #200]	; (800692c <_malloc_r+0xe8>)
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	001c      	movs	r4, r3
 8006868:	2c00      	cmp	r4, #0
 800686a:	d12e      	bne.n	80068ca <_malloc_r+0x86>
 800686c:	0039      	movs	r1, r7
 800686e:	0030      	movs	r0, r6
 8006870:	f7ff ffc6 	bl	8006800 <sbrk_aligned>
 8006874:	0004      	movs	r4, r0
 8006876:	1c43      	adds	r3, r0, #1
 8006878:	d11e      	bne.n	80068b8 <_malloc_r+0x74>
 800687a:	682c      	ldr	r4, [r5, #0]
 800687c:	0025      	movs	r5, r4
 800687e:	2d00      	cmp	r5, #0
 8006880:	d14a      	bne.n	8006918 <_malloc_r+0xd4>
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	0029      	movs	r1, r5
 8006886:	18e3      	adds	r3, r4, r3
 8006888:	0030      	movs	r0, r6
 800688a:	9301      	str	r3, [sp, #4]
 800688c:	f000 fcbe 	bl	800720c <_sbrk_r>
 8006890:	9b01      	ldr	r3, [sp, #4]
 8006892:	4283      	cmp	r3, r0
 8006894:	d143      	bne.n	800691e <_malloc_r+0xda>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	3703      	adds	r7, #3
 800689a:	1aff      	subs	r7, r7, r3
 800689c:	2303      	movs	r3, #3
 800689e:	439f      	bics	r7, r3
 80068a0:	3708      	adds	r7, #8
 80068a2:	2f0c      	cmp	r7, #12
 80068a4:	d200      	bcs.n	80068a8 <_malloc_r+0x64>
 80068a6:	270c      	movs	r7, #12
 80068a8:	0039      	movs	r1, r7
 80068aa:	0030      	movs	r0, r6
 80068ac:	f7ff ffa8 	bl	8006800 <sbrk_aligned>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d034      	beq.n	800691e <_malloc_r+0xda>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	19df      	adds	r7, r3, r7
 80068b8:	6027      	str	r7, [r4, #0]
 80068ba:	e013      	b.n	80068e4 <_malloc_r+0xa0>
 80068bc:	2b00      	cmp	r3, #0
 80068be:	dacb      	bge.n	8006858 <_malloc_r+0x14>
 80068c0:	230c      	movs	r3, #12
 80068c2:	2500      	movs	r5, #0
 80068c4:	6033      	str	r3, [r6, #0]
 80068c6:	0028      	movs	r0, r5
 80068c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068ca:	6822      	ldr	r2, [r4, #0]
 80068cc:	1bd1      	subs	r1, r2, r7
 80068ce:	d420      	bmi.n	8006912 <_malloc_r+0xce>
 80068d0:	290b      	cmp	r1, #11
 80068d2:	d917      	bls.n	8006904 <_malloc_r+0xc0>
 80068d4:	19e2      	adds	r2, r4, r7
 80068d6:	6027      	str	r7, [r4, #0]
 80068d8:	42a3      	cmp	r3, r4
 80068da:	d111      	bne.n	8006900 <_malloc_r+0xbc>
 80068dc:	602a      	str	r2, [r5, #0]
 80068de:	6863      	ldr	r3, [r4, #4]
 80068e0:	6011      	str	r1, [r2, #0]
 80068e2:	6053      	str	r3, [r2, #4]
 80068e4:	0030      	movs	r0, r6
 80068e6:	0025      	movs	r5, r4
 80068e8:	f002 fed2 	bl	8009690 <__malloc_unlock>
 80068ec:	2207      	movs	r2, #7
 80068ee:	350b      	adds	r5, #11
 80068f0:	1d23      	adds	r3, r4, #4
 80068f2:	4395      	bics	r5, r2
 80068f4:	1aea      	subs	r2, r5, r3
 80068f6:	429d      	cmp	r5, r3
 80068f8:	d0e5      	beq.n	80068c6 <_malloc_r+0x82>
 80068fa:	1b5b      	subs	r3, r3, r5
 80068fc:	50a3      	str	r3, [r4, r2]
 80068fe:	e7e2      	b.n	80068c6 <_malloc_r+0x82>
 8006900:	605a      	str	r2, [r3, #4]
 8006902:	e7ec      	b.n	80068de <_malloc_r+0x9a>
 8006904:	6862      	ldr	r2, [r4, #4]
 8006906:	42a3      	cmp	r3, r4
 8006908:	d101      	bne.n	800690e <_malloc_r+0xca>
 800690a:	602a      	str	r2, [r5, #0]
 800690c:	e7ea      	b.n	80068e4 <_malloc_r+0xa0>
 800690e:	605a      	str	r2, [r3, #4]
 8006910:	e7e8      	b.n	80068e4 <_malloc_r+0xa0>
 8006912:	0023      	movs	r3, r4
 8006914:	6864      	ldr	r4, [r4, #4]
 8006916:	e7a7      	b.n	8006868 <_malloc_r+0x24>
 8006918:	002c      	movs	r4, r5
 800691a:	686d      	ldr	r5, [r5, #4]
 800691c:	e7af      	b.n	800687e <_malloc_r+0x3a>
 800691e:	230c      	movs	r3, #12
 8006920:	0030      	movs	r0, r6
 8006922:	6033      	str	r3, [r6, #0]
 8006924:	f002 feb4 	bl	8009690 <__malloc_unlock>
 8006928:	e7cd      	b.n	80068c6 <_malloc_r+0x82>
 800692a:	46c0      	nop			; (mov r8, r8)
 800692c:	20000614 	.word	0x20000614

08006930 <__cvt>:
 8006930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006932:	001e      	movs	r6, r3
 8006934:	2300      	movs	r3, #0
 8006936:	0014      	movs	r4, r2
 8006938:	b08b      	sub	sp, #44	; 0x2c
 800693a:	429e      	cmp	r6, r3
 800693c:	da04      	bge.n	8006948 <__cvt+0x18>
 800693e:	2180      	movs	r1, #128	; 0x80
 8006940:	0609      	lsls	r1, r1, #24
 8006942:	1873      	adds	r3, r6, r1
 8006944:	001e      	movs	r6, r3
 8006946:	232d      	movs	r3, #45	; 0x2d
 8006948:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800694a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800694c:	7013      	strb	r3, [r2, #0]
 800694e:	2320      	movs	r3, #32
 8006950:	2203      	movs	r2, #3
 8006952:	439f      	bics	r7, r3
 8006954:	2f46      	cmp	r7, #70	; 0x46
 8006956:	d007      	beq.n	8006968 <__cvt+0x38>
 8006958:	003b      	movs	r3, r7
 800695a:	3b45      	subs	r3, #69	; 0x45
 800695c:	4259      	negs	r1, r3
 800695e:	414b      	adcs	r3, r1
 8006960:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006962:	3a01      	subs	r2, #1
 8006964:	18cb      	adds	r3, r1, r3
 8006966:	9310      	str	r3, [sp, #64]	; 0x40
 8006968:	ab09      	add	r3, sp, #36	; 0x24
 800696a:	9304      	str	r3, [sp, #16]
 800696c:	ab08      	add	r3, sp, #32
 800696e:	9303      	str	r3, [sp, #12]
 8006970:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006972:	9200      	str	r2, [sp, #0]
 8006974:	9302      	str	r3, [sp, #8]
 8006976:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006978:	0022      	movs	r2, r4
 800697a:	9301      	str	r3, [sp, #4]
 800697c:	0033      	movs	r3, r6
 800697e:	f001 fcbf 	bl	8008300 <_dtoa_r>
 8006982:	0005      	movs	r5, r0
 8006984:	2f47      	cmp	r7, #71	; 0x47
 8006986:	d102      	bne.n	800698e <__cvt+0x5e>
 8006988:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800698a:	07db      	lsls	r3, r3, #31
 800698c:	d528      	bpl.n	80069e0 <__cvt+0xb0>
 800698e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006990:	18eb      	adds	r3, r5, r3
 8006992:	9307      	str	r3, [sp, #28]
 8006994:	2f46      	cmp	r7, #70	; 0x46
 8006996:	d114      	bne.n	80069c2 <__cvt+0x92>
 8006998:	782b      	ldrb	r3, [r5, #0]
 800699a:	2b30      	cmp	r3, #48	; 0x30
 800699c:	d10c      	bne.n	80069b8 <__cvt+0x88>
 800699e:	2200      	movs	r2, #0
 80069a0:	2300      	movs	r3, #0
 80069a2:	0020      	movs	r0, r4
 80069a4:	0031      	movs	r1, r6
 80069a6:	f7f9 fd51 	bl	800044c <__aeabi_dcmpeq>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d104      	bne.n	80069b8 <__cvt+0x88>
 80069ae:	2301      	movs	r3, #1
 80069b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069b2:	1a9b      	subs	r3, r3, r2
 80069b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069ba:	9a07      	ldr	r2, [sp, #28]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	18d3      	adds	r3, r2, r3
 80069c0:	9307      	str	r3, [sp, #28]
 80069c2:	2200      	movs	r2, #0
 80069c4:	2300      	movs	r3, #0
 80069c6:	0020      	movs	r0, r4
 80069c8:	0031      	movs	r1, r6
 80069ca:	f7f9 fd3f 	bl	800044c <__aeabi_dcmpeq>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d001      	beq.n	80069d6 <__cvt+0xa6>
 80069d2:	9b07      	ldr	r3, [sp, #28]
 80069d4:	9309      	str	r3, [sp, #36]	; 0x24
 80069d6:	2230      	movs	r2, #48	; 0x30
 80069d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069da:	9907      	ldr	r1, [sp, #28]
 80069dc:	428b      	cmp	r3, r1
 80069de:	d306      	bcc.n	80069ee <__cvt+0xbe>
 80069e0:	0028      	movs	r0, r5
 80069e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80069e6:	1b5b      	subs	r3, r3, r5
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	b00b      	add	sp, #44	; 0x2c
 80069ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ee:	1c59      	adds	r1, r3, #1
 80069f0:	9109      	str	r1, [sp, #36]	; 0x24
 80069f2:	701a      	strb	r2, [r3, #0]
 80069f4:	e7f0      	b.n	80069d8 <__cvt+0xa8>

080069f6 <__exponent>:
 80069f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069f8:	1c83      	adds	r3, r0, #2
 80069fa:	b087      	sub	sp, #28
 80069fc:	9303      	str	r3, [sp, #12]
 80069fe:	0005      	movs	r5, r0
 8006a00:	000c      	movs	r4, r1
 8006a02:	232b      	movs	r3, #43	; 0x2b
 8006a04:	7002      	strb	r2, [r0, #0]
 8006a06:	2900      	cmp	r1, #0
 8006a08:	da01      	bge.n	8006a0e <__exponent+0x18>
 8006a0a:	424c      	negs	r4, r1
 8006a0c:	3302      	adds	r3, #2
 8006a0e:	706b      	strb	r3, [r5, #1]
 8006a10:	2c09      	cmp	r4, #9
 8006a12:	dd31      	ble.n	8006a78 <__exponent+0x82>
 8006a14:	270a      	movs	r7, #10
 8006a16:	ab04      	add	r3, sp, #16
 8006a18:	1dde      	adds	r6, r3, #7
 8006a1a:	0020      	movs	r0, r4
 8006a1c:	0039      	movs	r1, r7
 8006a1e:	9601      	str	r6, [sp, #4]
 8006a20:	f7f9 fcfe 	bl	8000420 <__aeabi_idivmod>
 8006a24:	3e01      	subs	r6, #1
 8006a26:	3130      	adds	r1, #48	; 0x30
 8006a28:	0020      	movs	r0, r4
 8006a2a:	7031      	strb	r1, [r6, #0]
 8006a2c:	0039      	movs	r1, r7
 8006a2e:	9402      	str	r4, [sp, #8]
 8006a30:	f7f9 fc10 	bl	8000254 <__divsi3>
 8006a34:	9b02      	ldr	r3, [sp, #8]
 8006a36:	0004      	movs	r4, r0
 8006a38:	2b63      	cmp	r3, #99	; 0x63
 8006a3a:	dcee      	bgt.n	8006a1a <__exponent+0x24>
 8006a3c:	9b01      	ldr	r3, [sp, #4]
 8006a3e:	3430      	adds	r4, #48	; 0x30
 8006a40:	1e9a      	subs	r2, r3, #2
 8006a42:	0013      	movs	r3, r2
 8006a44:	9903      	ldr	r1, [sp, #12]
 8006a46:	7014      	strb	r4, [r2, #0]
 8006a48:	a804      	add	r0, sp, #16
 8006a4a:	3007      	adds	r0, #7
 8006a4c:	4298      	cmp	r0, r3
 8006a4e:	d80e      	bhi.n	8006a6e <__exponent+0x78>
 8006a50:	ab04      	add	r3, sp, #16
 8006a52:	3307      	adds	r3, #7
 8006a54:	2000      	movs	r0, #0
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d804      	bhi.n	8006a64 <__exponent+0x6e>
 8006a5a:	ab04      	add	r3, sp, #16
 8006a5c:	3009      	adds	r0, #9
 8006a5e:	18c0      	adds	r0, r0, r3
 8006a60:	9b01      	ldr	r3, [sp, #4]
 8006a62:	1ac0      	subs	r0, r0, r3
 8006a64:	9b03      	ldr	r3, [sp, #12]
 8006a66:	1818      	adds	r0, r3, r0
 8006a68:	1b40      	subs	r0, r0, r5
 8006a6a:	b007      	add	sp, #28
 8006a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a6e:	7818      	ldrb	r0, [r3, #0]
 8006a70:	3301      	adds	r3, #1
 8006a72:	7008      	strb	r0, [r1, #0]
 8006a74:	3101      	adds	r1, #1
 8006a76:	e7e7      	b.n	8006a48 <__exponent+0x52>
 8006a78:	2330      	movs	r3, #48	; 0x30
 8006a7a:	18e4      	adds	r4, r4, r3
 8006a7c:	70ab      	strb	r3, [r5, #2]
 8006a7e:	1d28      	adds	r0, r5, #4
 8006a80:	70ec      	strb	r4, [r5, #3]
 8006a82:	e7f1      	b.n	8006a68 <__exponent+0x72>

08006a84 <_printf_float>:
 8006a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a86:	b095      	sub	sp, #84	; 0x54
 8006a88:	000c      	movs	r4, r1
 8006a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a8c:	001e      	movs	r6, r3
 8006a8e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006a90:	0007      	movs	r7, r0
 8006a92:	f002 fdd3 	bl	800963c <_localeconv_r>
 8006a96:	6803      	ldr	r3, [r0, #0]
 8006a98:	0018      	movs	r0, r3
 8006a9a:	930c      	str	r3, [sp, #48]	; 0x30
 8006a9c:	f7f9 fb34 	bl	8000108 <strlen>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	9312      	str	r3, [sp, #72]	; 0x48
 8006aa4:	7e23      	ldrb	r3, [r4, #24]
 8006aa6:	2207      	movs	r2, #7
 8006aa8:	930a      	str	r3, [sp, #40]	; 0x28
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	900e      	str	r0, [sp, #56]	; 0x38
 8006aae:	930d      	str	r3, [sp, #52]	; 0x34
 8006ab0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006ab2:	682b      	ldr	r3, [r5, #0]
 8006ab4:	05c9      	lsls	r1, r1, #23
 8006ab6:	d547      	bpl.n	8006b48 <_printf_float+0xc4>
 8006ab8:	189b      	adds	r3, r3, r2
 8006aba:	4393      	bics	r3, r2
 8006abc:	001a      	movs	r2, r3
 8006abe:	3208      	adds	r2, #8
 8006ac0:	602a      	str	r2, [r5, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	64a2      	str	r2, [r4, #72]	; 0x48
 8006ac8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006aca:	2201      	movs	r2, #1
 8006acc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006ace:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006ad0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ad2:	006b      	lsls	r3, r5, #1
 8006ad4:	085b      	lsrs	r3, r3, #1
 8006ad6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ad8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006ada:	4ba7      	ldr	r3, [pc, #668]	; (8006d78 <_printf_float+0x2f4>)
 8006adc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ade:	4252      	negs	r2, r2
 8006ae0:	f7fb fe92 	bl	8002808 <__aeabi_dcmpun>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d131      	bne.n	8006b4c <_printf_float+0xc8>
 8006ae8:	2201      	movs	r2, #1
 8006aea:	4ba3      	ldr	r3, [pc, #652]	; (8006d78 <_printf_float+0x2f4>)
 8006aec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006aee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006af0:	4252      	negs	r2, r2
 8006af2:	f7f9 fcbb 	bl	800046c <__aeabi_dcmple>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d128      	bne.n	8006b4c <_printf_float+0xc8>
 8006afa:	2200      	movs	r2, #0
 8006afc:	2300      	movs	r3, #0
 8006afe:	0029      	movs	r1, r5
 8006b00:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006b02:	f7f9 fca9 	bl	8000458 <__aeabi_dcmplt>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d003      	beq.n	8006b12 <_printf_float+0x8e>
 8006b0a:	0023      	movs	r3, r4
 8006b0c:	222d      	movs	r2, #45	; 0x2d
 8006b0e:	3343      	adds	r3, #67	; 0x43
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b14:	4d99      	ldr	r5, [pc, #612]	; (8006d7c <_printf_float+0x2f8>)
 8006b16:	2b47      	cmp	r3, #71	; 0x47
 8006b18:	d900      	bls.n	8006b1c <_printf_float+0x98>
 8006b1a:	4d99      	ldr	r5, [pc, #612]	; (8006d80 <_printf_float+0x2fc>)
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b20:	6123      	str	r3, [r4, #16]
 8006b22:	3301      	adds	r3, #1
 8006b24:	439a      	bics	r2, r3
 8006b26:	2300      	movs	r3, #0
 8006b28:	6022      	str	r2, [r4, #0]
 8006b2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b2e:	0021      	movs	r1, r4
 8006b30:	0038      	movs	r0, r7
 8006b32:	9600      	str	r6, [sp, #0]
 8006b34:	aa13      	add	r2, sp, #76	; 0x4c
 8006b36:	f000 f9e7 	bl	8006f08 <_printf_common>
 8006b3a:	1c43      	adds	r3, r0, #1
 8006b3c:	d000      	beq.n	8006b40 <_printf_float+0xbc>
 8006b3e:	e0a2      	b.n	8006c86 <_printf_float+0x202>
 8006b40:	2001      	movs	r0, #1
 8006b42:	4240      	negs	r0, r0
 8006b44:	b015      	add	sp, #84	; 0x54
 8006b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b48:	3307      	adds	r3, #7
 8006b4a:	e7b6      	b.n	8006aba <_printf_float+0x36>
 8006b4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b4e:	002b      	movs	r3, r5
 8006b50:	0010      	movs	r0, r2
 8006b52:	0029      	movs	r1, r5
 8006b54:	f7fb fe58 	bl	8002808 <__aeabi_dcmpun>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	d00b      	beq.n	8006b74 <_printf_float+0xf0>
 8006b5c:	2d00      	cmp	r5, #0
 8006b5e:	da03      	bge.n	8006b68 <_printf_float+0xe4>
 8006b60:	0023      	movs	r3, r4
 8006b62:	222d      	movs	r2, #45	; 0x2d
 8006b64:	3343      	adds	r3, #67	; 0x43
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b6a:	4d86      	ldr	r5, [pc, #536]	; (8006d84 <_printf_float+0x300>)
 8006b6c:	2b47      	cmp	r3, #71	; 0x47
 8006b6e:	d9d5      	bls.n	8006b1c <_printf_float+0x98>
 8006b70:	4d85      	ldr	r5, [pc, #532]	; (8006d88 <_printf_float+0x304>)
 8006b72:	e7d3      	b.n	8006b1c <_printf_float+0x98>
 8006b74:	2220      	movs	r2, #32
 8006b76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b78:	6863      	ldr	r3, [r4, #4]
 8006b7a:	4391      	bics	r1, r2
 8006b7c:	910f      	str	r1, [sp, #60]	; 0x3c
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	d149      	bne.n	8006c16 <_printf_float+0x192>
 8006b82:	3307      	adds	r3, #7
 8006b84:	6063      	str	r3, [r4, #4]
 8006b86:	2380      	movs	r3, #128	; 0x80
 8006b88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	2200      	movs	r2, #0
 8006b90:	9206      	str	r2, [sp, #24]
 8006b92:	aa12      	add	r2, sp, #72	; 0x48
 8006b94:	9205      	str	r2, [sp, #20]
 8006b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b98:	a908      	add	r1, sp, #32
 8006b9a:	9204      	str	r2, [sp, #16]
 8006b9c:	aa11      	add	r2, sp, #68	; 0x44
 8006b9e:	9203      	str	r2, [sp, #12]
 8006ba0:	2223      	movs	r2, #35	; 0x23
 8006ba2:	6023      	str	r3, [r4, #0]
 8006ba4:	9301      	str	r3, [sp, #4]
 8006ba6:	6863      	ldr	r3, [r4, #4]
 8006ba8:	1852      	adds	r2, r2, r1
 8006baa:	9202      	str	r2, [sp, #8]
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	0038      	movs	r0, r7
 8006bb0:	002b      	movs	r3, r5
 8006bb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bb4:	f7ff febc 	bl	8006930 <__cvt>
 8006bb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bba:	0005      	movs	r5, r0
 8006bbc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006bbe:	2b47      	cmp	r3, #71	; 0x47
 8006bc0:	d108      	bne.n	8006bd4 <_printf_float+0x150>
 8006bc2:	1ccb      	adds	r3, r1, #3
 8006bc4:	db02      	blt.n	8006bcc <_printf_float+0x148>
 8006bc6:	6863      	ldr	r3, [r4, #4]
 8006bc8:	4299      	cmp	r1, r3
 8006bca:	dd48      	ble.n	8006c5e <_printf_float+0x1da>
 8006bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bce:	3b02      	subs	r3, #2
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	930a      	str	r3, [sp, #40]	; 0x28
 8006bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd6:	2b65      	cmp	r3, #101	; 0x65
 8006bd8:	d824      	bhi.n	8006c24 <_printf_float+0x1a0>
 8006bda:	0020      	movs	r0, r4
 8006bdc:	001a      	movs	r2, r3
 8006bde:	3901      	subs	r1, #1
 8006be0:	3050      	adds	r0, #80	; 0x50
 8006be2:	9111      	str	r1, [sp, #68]	; 0x44
 8006be4:	f7ff ff07 	bl	80069f6 <__exponent>
 8006be8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006bea:	900b      	str	r0, [sp, #44]	; 0x2c
 8006bec:	1813      	adds	r3, r2, r0
 8006bee:	6123      	str	r3, [r4, #16]
 8006bf0:	2a01      	cmp	r2, #1
 8006bf2:	dc02      	bgt.n	8006bfa <_printf_float+0x176>
 8006bf4:	6822      	ldr	r2, [r4, #0]
 8006bf6:	07d2      	lsls	r2, r2, #31
 8006bf8:	d501      	bpl.n	8006bfe <_printf_float+0x17a>
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	6123      	str	r3, [r4, #16]
 8006bfe:	2323      	movs	r3, #35	; 0x23
 8006c00:	aa08      	add	r2, sp, #32
 8006c02:	189b      	adds	r3, r3, r2
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d100      	bne.n	8006c0c <_printf_float+0x188>
 8006c0a:	e78f      	b.n	8006b2c <_printf_float+0xa8>
 8006c0c:	0023      	movs	r3, r4
 8006c0e:	222d      	movs	r2, #45	; 0x2d
 8006c10:	3343      	adds	r3, #67	; 0x43
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	e78a      	b.n	8006b2c <_printf_float+0xa8>
 8006c16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c18:	2a47      	cmp	r2, #71	; 0x47
 8006c1a:	d1b4      	bne.n	8006b86 <_printf_float+0x102>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1b2      	bne.n	8006b86 <_printf_float+0x102>
 8006c20:	3301      	adds	r3, #1
 8006c22:	e7af      	b.n	8006b84 <_printf_float+0x100>
 8006c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c26:	2b66      	cmp	r3, #102	; 0x66
 8006c28:	d11b      	bne.n	8006c62 <_printf_float+0x1de>
 8006c2a:	6863      	ldr	r3, [r4, #4]
 8006c2c:	2900      	cmp	r1, #0
 8006c2e:	dd0d      	ble.n	8006c4c <_printf_float+0x1c8>
 8006c30:	6121      	str	r1, [r4, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d102      	bne.n	8006c3c <_printf_float+0x1b8>
 8006c36:	6822      	ldr	r2, [r4, #0]
 8006c38:	07d2      	lsls	r2, r2, #31
 8006c3a:	d502      	bpl.n	8006c42 <_printf_float+0x1be>
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	1859      	adds	r1, r3, r1
 8006c40:	6121      	str	r1, [r4, #16]
 8006c42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c44:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c46:	2300      	movs	r3, #0
 8006c48:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c4a:	e7d8      	b.n	8006bfe <_printf_float+0x17a>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d103      	bne.n	8006c58 <_printf_float+0x1d4>
 8006c50:	2201      	movs	r2, #1
 8006c52:	6821      	ldr	r1, [r4, #0]
 8006c54:	4211      	tst	r1, r2
 8006c56:	d000      	beq.n	8006c5a <_printf_float+0x1d6>
 8006c58:	1c9a      	adds	r2, r3, #2
 8006c5a:	6122      	str	r2, [r4, #16]
 8006c5c:	e7f1      	b.n	8006c42 <_printf_float+0x1be>
 8006c5e:	2367      	movs	r3, #103	; 0x67
 8006c60:	930a      	str	r3, [sp, #40]	; 0x28
 8006c62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c66:	4293      	cmp	r3, r2
 8006c68:	db06      	blt.n	8006c78 <_printf_float+0x1f4>
 8006c6a:	6822      	ldr	r2, [r4, #0]
 8006c6c:	6123      	str	r3, [r4, #16]
 8006c6e:	07d2      	lsls	r2, r2, #31
 8006c70:	d5e7      	bpl.n	8006c42 <_printf_float+0x1be>
 8006c72:	3301      	adds	r3, #1
 8006c74:	6123      	str	r3, [r4, #16]
 8006c76:	e7e4      	b.n	8006c42 <_printf_float+0x1be>
 8006c78:	2101      	movs	r1, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	dc01      	bgt.n	8006c82 <_printf_float+0x1fe>
 8006c7e:	1849      	adds	r1, r1, r1
 8006c80:	1ac9      	subs	r1, r1, r3
 8006c82:	1852      	adds	r2, r2, r1
 8006c84:	e7e9      	b.n	8006c5a <_printf_float+0x1d6>
 8006c86:	6822      	ldr	r2, [r4, #0]
 8006c88:	0553      	lsls	r3, r2, #21
 8006c8a:	d407      	bmi.n	8006c9c <_printf_float+0x218>
 8006c8c:	6923      	ldr	r3, [r4, #16]
 8006c8e:	002a      	movs	r2, r5
 8006c90:	0038      	movs	r0, r7
 8006c92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c94:	47b0      	blx	r6
 8006c96:	1c43      	adds	r3, r0, #1
 8006c98:	d128      	bne.n	8006cec <_printf_float+0x268>
 8006c9a:	e751      	b.n	8006b40 <_printf_float+0xbc>
 8006c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c9e:	2b65      	cmp	r3, #101	; 0x65
 8006ca0:	d800      	bhi.n	8006ca4 <_printf_float+0x220>
 8006ca2:	e0e1      	b.n	8006e68 <_printf_float+0x3e4>
 8006ca4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006ca6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2300      	movs	r3, #0
 8006cac:	f7f9 fbce 	bl	800044c <__aeabi_dcmpeq>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d031      	beq.n	8006d18 <_printf_float+0x294>
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	0038      	movs	r0, r7
 8006cb8:	4a34      	ldr	r2, [pc, #208]	; (8006d8c <_printf_float+0x308>)
 8006cba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cbc:	47b0      	blx	r6
 8006cbe:	1c43      	adds	r3, r0, #1
 8006cc0:	d100      	bne.n	8006cc4 <_printf_float+0x240>
 8006cc2:	e73d      	b.n	8006b40 <_printf_float+0xbc>
 8006cc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	db02      	blt.n	8006cd2 <_printf_float+0x24e>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	07db      	lsls	r3, r3, #31
 8006cd0:	d50c      	bpl.n	8006cec <_printf_float+0x268>
 8006cd2:	0038      	movs	r0, r7
 8006cd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cda:	47b0      	blx	r6
 8006cdc:	2500      	movs	r5, #0
 8006cde:	1c43      	adds	r3, r0, #1
 8006ce0:	d100      	bne.n	8006ce4 <_printf_float+0x260>
 8006ce2:	e72d      	b.n	8006b40 <_printf_float+0xbc>
 8006ce4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	42ab      	cmp	r3, r5
 8006cea:	dc0a      	bgt.n	8006d02 <_printf_float+0x27e>
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	079b      	lsls	r3, r3, #30
 8006cf0:	d500      	bpl.n	8006cf4 <_printf_float+0x270>
 8006cf2:	e106      	b.n	8006f02 <_printf_float+0x47e>
 8006cf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006cf6:	68e0      	ldr	r0, [r4, #12]
 8006cf8:	4298      	cmp	r0, r3
 8006cfa:	db00      	blt.n	8006cfe <_printf_float+0x27a>
 8006cfc:	e722      	b.n	8006b44 <_printf_float+0xc0>
 8006cfe:	0018      	movs	r0, r3
 8006d00:	e720      	b.n	8006b44 <_printf_float+0xc0>
 8006d02:	0022      	movs	r2, r4
 8006d04:	2301      	movs	r3, #1
 8006d06:	0038      	movs	r0, r7
 8006d08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d0a:	321a      	adds	r2, #26
 8006d0c:	47b0      	blx	r6
 8006d0e:	1c43      	adds	r3, r0, #1
 8006d10:	d100      	bne.n	8006d14 <_printf_float+0x290>
 8006d12:	e715      	b.n	8006b40 <_printf_float+0xbc>
 8006d14:	3501      	adds	r5, #1
 8006d16:	e7e5      	b.n	8006ce4 <_printf_float+0x260>
 8006d18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	dc38      	bgt.n	8006d90 <_printf_float+0x30c>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	0038      	movs	r0, r7
 8006d22:	4a1a      	ldr	r2, [pc, #104]	; (8006d8c <_printf_float+0x308>)
 8006d24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d26:	47b0      	blx	r6
 8006d28:	1c43      	adds	r3, r0, #1
 8006d2a:	d100      	bne.n	8006d2e <_printf_float+0x2aa>
 8006d2c:	e708      	b.n	8006b40 <_printf_float+0xbc>
 8006d2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d32:	4313      	orrs	r3, r2
 8006d34:	d102      	bne.n	8006d3c <_printf_float+0x2b8>
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	07db      	lsls	r3, r3, #31
 8006d3a:	d5d7      	bpl.n	8006cec <_printf_float+0x268>
 8006d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d3e:	0038      	movs	r0, r7
 8006d40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d44:	47b0      	blx	r6
 8006d46:	1c43      	adds	r3, r0, #1
 8006d48:	d100      	bne.n	8006d4c <_printf_float+0x2c8>
 8006d4a:	e6f9      	b.n	8006b40 <_printf_float+0xbc>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d54:	425b      	negs	r3, r3
 8006d56:	4293      	cmp	r3, r2
 8006d58:	dc01      	bgt.n	8006d5e <_printf_float+0x2da>
 8006d5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d5c:	e797      	b.n	8006c8e <_printf_float+0x20a>
 8006d5e:	0022      	movs	r2, r4
 8006d60:	2301      	movs	r3, #1
 8006d62:	0038      	movs	r0, r7
 8006d64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d66:	321a      	adds	r2, #26
 8006d68:	47b0      	blx	r6
 8006d6a:	1c43      	adds	r3, r0, #1
 8006d6c:	d100      	bne.n	8006d70 <_printf_float+0x2ec>
 8006d6e:	e6e7      	b.n	8006b40 <_printf_float+0xbc>
 8006d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d72:	3301      	adds	r3, #1
 8006d74:	e7eb      	b.n	8006d4e <_printf_float+0x2ca>
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	7fefffff 	.word	0x7fefffff
 8006d7c:	0800b10c 	.word	0x0800b10c
 8006d80:	0800b110 	.word	0x0800b110
 8006d84:	0800b114 	.word	0x0800b114
 8006d88:	0800b118 	.word	0x0800b118
 8006d8c:	0800b11c 	.word	0x0800b11c
 8006d90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d94:	920a      	str	r2, [sp, #40]	; 0x28
 8006d96:	429a      	cmp	r2, r3
 8006d98:	dd00      	ble.n	8006d9c <_printf_float+0x318>
 8006d9a:	930a      	str	r3, [sp, #40]	; 0x28
 8006d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	dc3c      	bgt.n	8006e1c <_printf_float+0x398>
 8006da2:	2300      	movs	r3, #0
 8006da4:	930d      	str	r3, [sp, #52]	; 0x34
 8006da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da8:	43db      	mvns	r3, r3
 8006daa:	17db      	asrs	r3, r3, #31
 8006dac:	930f      	str	r3, [sp, #60]	; 0x3c
 8006dae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006db0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db6:	4013      	ands	r3, r2
 8006db8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	dc34      	bgt.n	8006e2c <_printf_float+0x3a8>
 8006dc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	db3d      	blt.n	8006e46 <_printf_float+0x3c2>
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	07db      	lsls	r3, r3, #31
 8006dce:	d43a      	bmi.n	8006e46 <_printf_float+0x3c2>
 8006dd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	1a52      	subs	r2, r2, r1
 8006dda:	920a      	str	r2, [sp, #40]	; 0x28
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	dd00      	ble.n	8006de2 <_printf_float+0x35e>
 8006de0:	930a      	str	r3, [sp, #40]	; 0x28
 8006de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	dc36      	bgt.n	8006e56 <_printf_float+0x3d2>
 8006de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dea:	2500      	movs	r5, #0
 8006dec:	43db      	mvns	r3, r3
 8006dee:	17db      	asrs	r3, r3, #31
 8006df0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006df2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006df4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006df6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006df8:	1a9b      	subs	r3, r3, r2
 8006dfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dfc:	400a      	ands	r2, r1
 8006dfe:	1a9b      	subs	r3, r3, r2
 8006e00:	42ab      	cmp	r3, r5
 8006e02:	dc00      	bgt.n	8006e06 <_printf_float+0x382>
 8006e04:	e772      	b.n	8006cec <_printf_float+0x268>
 8006e06:	0022      	movs	r2, r4
 8006e08:	2301      	movs	r3, #1
 8006e0a:	0038      	movs	r0, r7
 8006e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e0e:	321a      	adds	r2, #26
 8006e10:	47b0      	blx	r6
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	d100      	bne.n	8006e18 <_printf_float+0x394>
 8006e16:	e693      	b.n	8006b40 <_printf_float+0xbc>
 8006e18:	3501      	adds	r5, #1
 8006e1a:	e7ea      	b.n	8006df2 <_printf_float+0x36e>
 8006e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e1e:	002a      	movs	r2, r5
 8006e20:	0038      	movs	r0, r7
 8006e22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e24:	47b0      	blx	r6
 8006e26:	1c43      	adds	r3, r0, #1
 8006e28:	d1bb      	bne.n	8006da2 <_printf_float+0x31e>
 8006e2a:	e689      	b.n	8006b40 <_printf_float+0xbc>
 8006e2c:	0022      	movs	r2, r4
 8006e2e:	2301      	movs	r3, #1
 8006e30:	0038      	movs	r0, r7
 8006e32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e34:	321a      	adds	r2, #26
 8006e36:	47b0      	blx	r6
 8006e38:	1c43      	adds	r3, r0, #1
 8006e3a:	d100      	bne.n	8006e3e <_printf_float+0x3ba>
 8006e3c:	e680      	b.n	8006b40 <_printf_float+0xbc>
 8006e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e40:	3301      	adds	r3, #1
 8006e42:	930d      	str	r3, [sp, #52]	; 0x34
 8006e44:	e7b3      	b.n	8006dae <_printf_float+0x32a>
 8006e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e48:	0038      	movs	r0, r7
 8006e4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e4e:	47b0      	blx	r6
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	d1bd      	bne.n	8006dd0 <_printf_float+0x34c>
 8006e54:	e674      	b.n	8006b40 <_printf_float+0xbc>
 8006e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e58:	0038      	movs	r0, r7
 8006e5a:	18ea      	adds	r2, r5, r3
 8006e5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e60:	47b0      	blx	r6
 8006e62:	1c43      	adds	r3, r0, #1
 8006e64:	d1c0      	bne.n	8006de8 <_printf_float+0x364>
 8006e66:	e66b      	b.n	8006b40 <_printf_float+0xbc>
 8006e68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	dc02      	bgt.n	8006e74 <_printf_float+0x3f0>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	421a      	tst	r2, r3
 8006e72:	d034      	beq.n	8006ede <_printf_float+0x45a>
 8006e74:	2301      	movs	r3, #1
 8006e76:	002a      	movs	r2, r5
 8006e78:	0038      	movs	r0, r7
 8006e7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e7c:	47b0      	blx	r6
 8006e7e:	1c43      	adds	r3, r0, #1
 8006e80:	d100      	bne.n	8006e84 <_printf_float+0x400>
 8006e82:	e65d      	b.n	8006b40 <_printf_float+0xbc>
 8006e84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e86:	0038      	movs	r0, r7
 8006e88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e8c:	47b0      	blx	r6
 8006e8e:	1c43      	adds	r3, r0, #1
 8006e90:	d100      	bne.n	8006e94 <_printf_float+0x410>
 8006e92:	e655      	b.n	8006b40 <_printf_float+0xbc>
 8006e94:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006e96:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f7f9 fad6 	bl	800044c <__aeabi_dcmpeq>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d11a      	bne.n	8006eda <_printf_float+0x456>
 8006ea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ea6:	1c6a      	adds	r2, r5, #1
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	0038      	movs	r0, r7
 8006eac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eae:	47b0      	blx	r6
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	d10e      	bne.n	8006ed2 <_printf_float+0x44e>
 8006eb4:	e644      	b.n	8006b40 <_printf_float+0xbc>
 8006eb6:	0022      	movs	r2, r4
 8006eb8:	2301      	movs	r3, #1
 8006eba:	0038      	movs	r0, r7
 8006ebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ebe:	321a      	adds	r2, #26
 8006ec0:	47b0      	blx	r6
 8006ec2:	1c43      	adds	r3, r0, #1
 8006ec4:	d100      	bne.n	8006ec8 <_printf_float+0x444>
 8006ec6:	e63b      	b.n	8006b40 <_printf_float+0xbc>
 8006ec8:	3501      	adds	r5, #1
 8006eca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	42ab      	cmp	r3, r5
 8006ed0:	dcf1      	bgt.n	8006eb6 <_printf_float+0x432>
 8006ed2:	0022      	movs	r2, r4
 8006ed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ed6:	3250      	adds	r2, #80	; 0x50
 8006ed8:	e6da      	b.n	8006c90 <_printf_float+0x20c>
 8006eda:	2500      	movs	r5, #0
 8006edc:	e7f5      	b.n	8006eca <_printf_float+0x446>
 8006ede:	002a      	movs	r2, r5
 8006ee0:	e7e3      	b.n	8006eaa <_printf_float+0x426>
 8006ee2:	0022      	movs	r2, r4
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	0038      	movs	r0, r7
 8006ee8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eea:	3219      	adds	r2, #25
 8006eec:	47b0      	blx	r6
 8006eee:	1c43      	adds	r3, r0, #1
 8006ef0:	d100      	bne.n	8006ef4 <_printf_float+0x470>
 8006ef2:	e625      	b.n	8006b40 <_printf_float+0xbc>
 8006ef4:	3501      	adds	r5, #1
 8006ef6:	68e3      	ldr	r3, [r4, #12]
 8006ef8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006efa:	1a9b      	subs	r3, r3, r2
 8006efc:	42ab      	cmp	r3, r5
 8006efe:	dcf0      	bgt.n	8006ee2 <_printf_float+0x45e>
 8006f00:	e6f8      	b.n	8006cf4 <_printf_float+0x270>
 8006f02:	2500      	movs	r5, #0
 8006f04:	e7f7      	b.n	8006ef6 <_printf_float+0x472>
 8006f06:	46c0      	nop			; (mov r8, r8)

08006f08 <_printf_common>:
 8006f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f0a:	0015      	movs	r5, r2
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	688a      	ldr	r2, [r1, #8]
 8006f10:	690b      	ldr	r3, [r1, #16]
 8006f12:	000c      	movs	r4, r1
 8006f14:	9000      	str	r0, [sp, #0]
 8006f16:	4293      	cmp	r3, r2
 8006f18:	da00      	bge.n	8006f1c <_printf_common+0x14>
 8006f1a:	0013      	movs	r3, r2
 8006f1c:	0022      	movs	r2, r4
 8006f1e:	602b      	str	r3, [r5, #0]
 8006f20:	3243      	adds	r2, #67	; 0x43
 8006f22:	7812      	ldrb	r2, [r2, #0]
 8006f24:	2a00      	cmp	r2, #0
 8006f26:	d001      	beq.n	8006f2c <_printf_common+0x24>
 8006f28:	3301      	adds	r3, #1
 8006f2a:	602b      	str	r3, [r5, #0]
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	069b      	lsls	r3, r3, #26
 8006f30:	d502      	bpl.n	8006f38 <_printf_common+0x30>
 8006f32:	682b      	ldr	r3, [r5, #0]
 8006f34:	3302      	adds	r3, #2
 8006f36:	602b      	str	r3, [r5, #0]
 8006f38:	6822      	ldr	r2, [r4, #0]
 8006f3a:	2306      	movs	r3, #6
 8006f3c:	0017      	movs	r7, r2
 8006f3e:	401f      	ands	r7, r3
 8006f40:	421a      	tst	r2, r3
 8006f42:	d027      	beq.n	8006f94 <_printf_common+0x8c>
 8006f44:	0023      	movs	r3, r4
 8006f46:	3343      	adds	r3, #67	; 0x43
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	1e5a      	subs	r2, r3, #1
 8006f4c:	4193      	sbcs	r3, r2
 8006f4e:	6822      	ldr	r2, [r4, #0]
 8006f50:	0692      	lsls	r2, r2, #26
 8006f52:	d430      	bmi.n	8006fb6 <_printf_common+0xae>
 8006f54:	0022      	movs	r2, r4
 8006f56:	9901      	ldr	r1, [sp, #4]
 8006f58:	9800      	ldr	r0, [sp, #0]
 8006f5a:	9e08      	ldr	r6, [sp, #32]
 8006f5c:	3243      	adds	r2, #67	; 0x43
 8006f5e:	47b0      	blx	r6
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d025      	beq.n	8006fb0 <_printf_common+0xa8>
 8006f64:	2306      	movs	r3, #6
 8006f66:	6820      	ldr	r0, [r4, #0]
 8006f68:	682a      	ldr	r2, [r5, #0]
 8006f6a:	68e1      	ldr	r1, [r4, #12]
 8006f6c:	2500      	movs	r5, #0
 8006f6e:	4003      	ands	r3, r0
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	d103      	bne.n	8006f7c <_printf_common+0x74>
 8006f74:	1a8d      	subs	r5, r1, r2
 8006f76:	43eb      	mvns	r3, r5
 8006f78:	17db      	asrs	r3, r3, #31
 8006f7a:	401d      	ands	r5, r3
 8006f7c:	68a3      	ldr	r3, [r4, #8]
 8006f7e:	6922      	ldr	r2, [r4, #16]
 8006f80:	4293      	cmp	r3, r2
 8006f82:	dd01      	ble.n	8006f88 <_printf_common+0x80>
 8006f84:	1a9b      	subs	r3, r3, r2
 8006f86:	18ed      	adds	r5, r5, r3
 8006f88:	2700      	movs	r7, #0
 8006f8a:	42bd      	cmp	r5, r7
 8006f8c:	d120      	bne.n	8006fd0 <_printf_common+0xc8>
 8006f8e:	2000      	movs	r0, #0
 8006f90:	e010      	b.n	8006fb4 <_printf_common+0xac>
 8006f92:	3701      	adds	r7, #1
 8006f94:	68e3      	ldr	r3, [r4, #12]
 8006f96:	682a      	ldr	r2, [r5, #0]
 8006f98:	1a9b      	subs	r3, r3, r2
 8006f9a:	42bb      	cmp	r3, r7
 8006f9c:	ddd2      	ble.n	8006f44 <_printf_common+0x3c>
 8006f9e:	0022      	movs	r2, r4
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	9901      	ldr	r1, [sp, #4]
 8006fa4:	9800      	ldr	r0, [sp, #0]
 8006fa6:	9e08      	ldr	r6, [sp, #32]
 8006fa8:	3219      	adds	r2, #25
 8006faa:	47b0      	blx	r6
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d1f0      	bne.n	8006f92 <_printf_common+0x8a>
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	4240      	negs	r0, r0
 8006fb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006fb6:	2030      	movs	r0, #48	; 0x30
 8006fb8:	18e1      	adds	r1, r4, r3
 8006fba:	3143      	adds	r1, #67	; 0x43
 8006fbc:	7008      	strb	r0, [r1, #0]
 8006fbe:	0021      	movs	r1, r4
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	3145      	adds	r1, #69	; 0x45
 8006fc4:	7809      	ldrb	r1, [r1, #0]
 8006fc6:	18a2      	adds	r2, r4, r2
 8006fc8:	3243      	adds	r2, #67	; 0x43
 8006fca:	3302      	adds	r3, #2
 8006fcc:	7011      	strb	r1, [r2, #0]
 8006fce:	e7c1      	b.n	8006f54 <_printf_common+0x4c>
 8006fd0:	0022      	movs	r2, r4
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	9901      	ldr	r1, [sp, #4]
 8006fd6:	9800      	ldr	r0, [sp, #0]
 8006fd8:	9e08      	ldr	r6, [sp, #32]
 8006fda:	321a      	adds	r2, #26
 8006fdc:	47b0      	blx	r6
 8006fde:	1c43      	adds	r3, r0, #1
 8006fe0:	d0e6      	beq.n	8006fb0 <_printf_common+0xa8>
 8006fe2:	3701      	adds	r7, #1
 8006fe4:	e7d1      	b.n	8006f8a <_printf_common+0x82>
	...

08006fe8 <_printf_i>:
 8006fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fea:	b08b      	sub	sp, #44	; 0x2c
 8006fec:	9206      	str	r2, [sp, #24]
 8006fee:	000a      	movs	r2, r1
 8006ff0:	3243      	adds	r2, #67	; 0x43
 8006ff2:	9307      	str	r3, [sp, #28]
 8006ff4:	9005      	str	r0, [sp, #20]
 8006ff6:	9204      	str	r2, [sp, #16]
 8006ff8:	7e0a      	ldrb	r2, [r1, #24]
 8006ffa:	000c      	movs	r4, r1
 8006ffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ffe:	2a78      	cmp	r2, #120	; 0x78
 8007000:	d807      	bhi.n	8007012 <_printf_i+0x2a>
 8007002:	2a62      	cmp	r2, #98	; 0x62
 8007004:	d809      	bhi.n	800701a <_printf_i+0x32>
 8007006:	2a00      	cmp	r2, #0
 8007008:	d100      	bne.n	800700c <_printf_i+0x24>
 800700a:	e0c1      	b.n	8007190 <_printf_i+0x1a8>
 800700c:	2a58      	cmp	r2, #88	; 0x58
 800700e:	d100      	bne.n	8007012 <_printf_i+0x2a>
 8007010:	e08c      	b.n	800712c <_printf_i+0x144>
 8007012:	0026      	movs	r6, r4
 8007014:	3642      	adds	r6, #66	; 0x42
 8007016:	7032      	strb	r2, [r6, #0]
 8007018:	e022      	b.n	8007060 <_printf_i+0x78>
 800701a:	0010      	movs	r0, r2
 800701c:	3863      	subs	r0, #99	; 0x63
 800701e:	2815      	cmp	r0, #21
 8007020:	d8f7      	bhi.n	8007012 <_printf_i+0x2a>
 8007022:	f7f9 f883 	bl	800012c <__gnu_thumb1_case_shi>
 8007026:	0016      	.short	0x0016
 8007028:	fff6001f 	.word	0xfff6001f
 800702c:	fff6fff6 	.word	0xfff6fff6
 8007030:	001ffff6 	.word	0x001ffff6
 8007034:	fff6fff6 	.word	0xfff6fff6
 8007038:	fff6fff6 	.word	0xfff6fff6
 800703c:	003600a8 	.word	0x003600a8
 8007040:	fff6009a 	.word	0xfff6009a
 8007044:	00b9fff6 	.word	0x00b9fff6
 8007048:	0036fff6 	.word	0x0036fff6
 800704c:	fff6fff6 	.word	0xfff6fff6
 8007050:	009e      	.short	0x009e
 8007052:	0026      	movs	r6, r4
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	3642      	adds	r6, #66	; 0x42
 8007058:	1d11      	adds	r1, r2, #4
 800705a:	6019      	str	r1, [r3, #0]
 800705c:	6813      	ldr	r3, [r2, #0]
 800705e:	7033      	strb	r3, [r6, #0]
 8007060:	2301      	movs	r3, #1
 8007062:	e0a7      	b.n	80071b4 <_printf_i+0x1cc>
 8007064:	6808      	ldr	r0, [r1, #0]
 8007066:	6819      	ldr	r1, [r3, #0]
 8007068:	1d0a      	adds	r2, r1, #4
 800706a:	0605      	lsls	r5, r0, #24
 800706c:	d50b      	bpl.n	8007086 <_printf_i+0x9e>
 800706e:	680d      	ldr	r5, [r1, #0]
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	2d00      	cmp	r5, #0
 8007074:	da03      	bge.n	800707e <_printf_i+0x96>
 8007076:	232d      	movs	r3, #45	; 0x2d
 8007078:	9a04      	ldr	r2, [sp, #16]
 800707a:	426d      	negs	r5, r5
 800707c:	7013      	strb	r3, [r2, #0]
 800707e:	4b61      	ldr	r3, [pc, #388]	; (8007204 <_printf_i+0x21c>)
 8007080:	270a      	movs	r7, #10
 8007082:	9303      	str	r3, [sp, #12]
 8007084:	e01b      	b.n	80070be <_printf_i+0xd6>
 8007086:	680d      	ldr	r5, [r1, #0]
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	0641      	lsls	r1, r0, #25
 800708c:	d5f1      	bpl.n	8007072 <_printf_i+0x8a>
 800708e:	b22d      	sxth	r5, r5
 8007090:	e7ef      	b.n	8007072 <_printf_i+0x8a>
 8007092:	680d      	ldr	r5, [r1, #0]
 8007094:	6819      	ldr	r1, [r3, #0]
 8007096:	1d08      	adds	r0, r1, #4
 8007098:	6018      	str	r0, [r3, #0]
 800709a:	062e      	lsls	r6, r5, #24
 800709c:	d501      	bpl.n	80070a2 <_printf_i+0xba>
 800709e:	680d      	ldr	r5, [r1, #0]
 80070a0:	e003      	b.n	80070aa <_printf_i+0xc2>
 80070a2:	066d      	lsls	r5, r5, #25
 80070a4:	d5fb      	bpl.n	800709e <_printf_i+0xb6>
 80070a6:	680d      	ldr	r5, [r1, #0]
 80070a8:	b2ad      	uxth	r5, r5
 80070aa:	4b56      	ldr	r3, [pc, #344]	; (8007204 <_printf_i+0x21c>)
 80070ac:	2708      	movs	r7, #8
 80070ae:	9303      	str	r3, [sp, #12]
 80070b0:	2a6f      	cmp	r2, #111	; 0x6f
 80070b2:	d000      	beq.n	80070b6 <_printf_i+0xce>
 80070b4:	3702      	adds	r7, #2
 80070b6:	0023      	movs	r3, r4
 80070b8:	2200      	movs	r2, #0
 80070ba:	3343      	adds	r3, #67	; 0x43
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	6863      	ldr	r3, [r4, #4]
 80070c0:	60a3      	str	r3, [r4, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	db03      	blt.n	80070ce <_printf_i+0xe6>
 80070c6:	2204      	movs	r2, #4
 80070c8:	6821      	ldr	r1, [r4, #0]
 80070ca:	4391      	bics	r1, r2
 80070cc:	6021      	str	r1, [r4, #0]
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	d102      	bne.n	80070d8 <_printf_i+0xf0>
 80070d2:	9e04      	ldr	r6, [sp, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00c      	beq.n	80070f2 <_printf_i+0x10a>
 80070d8:	9e04      	ldr	r6, [sp, #16]
 80070da:	0028      	movs	r0, r5
 80070dc:	0039      	movs	r1, r7
 80070de:	f7f9 f8b5 	bl	800024c <__aeabi_uidivmod>
 80070e2:	9b03      	ldr	r3, [sp, #12]
 80070e4:	3e01      	subs	r6, #1
 80070e6:	5c5b      	ldrb	r3, [r3, r1]
 80070e8:	7033      	strb	r3, [r6, #0]
 80070ea:	002b      	movs	r3, r5
 80070ec:	0005      	movs	r5, r0
 80070ee:	429f      	cmp	r7, r3
 80070f0:	d9f3      	bls.n	80070da <_printf_i+0xf2>
 80070f2:	2f08      	cmp	r7, #8
 80070f4:	d109      	bne.n	800710a <_printf_i+0x122>
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	07db      	lsls	r3, r3, #31
 80070fa:	d506      	bpl.n	800710a <_printf_i+0x122>
 80070fc:	6863      	ldr	r3, [r4, #4]
 80070fe:	6922      	ldr	r2, [r4, #16]
 8007100:	4293      	cmp	r3, r2
 8007102:	dc02      	bgt.n	800710a <_printf_i+0x122>
 8007104:	2330      	movs	r3, #48	; 0x30
 8007106:	3e01      	subs	r6, #1
 8007108:	7033      	strb	r3, [r6, #0]
 800710a:	9b04      	ldr	r3, [sp, #16]
 800710c:	1b9b      	subs	r3, r3, r6
 800710e:	6123      	str	r3, [r4, #16]
 8007110:	9b07      	ldr	r3, [sp, #28]
 8007112:	0021      	movs	r1, r4
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	9805      	ldr	r0, [sp, #20]
 8007118:	9b06      	ldr	r3, [sp, #24]
 800711a:	aa09      	add	r2, sp, #36	; 0x24
 800711c:	f7ff fef4 	bl	8006f08 <_printf_common>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d14c      	bne.n	80071be <_printf_i+0x1d6>
 8007124:	2001      	movs	r0, #1
 8007126:	4240      	negs	r0, r0
 8007128:	b00b      	add	sp, #44	; 0x2c
 800712a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800712c:	3145      	adds	r1, #69	; 0x45
 800712e:	700a      	strb	r2, [r1, #0]
 8007130:	4a34      	ldr	r2, [pc, #208]	; (8007204 <_printf_i+0x21c>)
 8007132:	9203      	str	r2, [sp, #12]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	6821      	ldr	r1, [r4, #0]
 8007138:	ca20      	ldmia	r2!, {r5}
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	0608      	lsls	r0, r1, #24
 800713e:	d516      	bpl.n	800716e <_printf_i+0x186>
 8007140:	07cb      	lsls	r3, r1, #31
 8007142:	d502      	bpl.n	800714a <_printf_i+0x162>
 8007144:	2320      	movs	r3, #32
 8007146:	4319      	orrs	r1, r3
 8007148:	6021      	str	r1, [r4, #0]
 800714a:	2710      	movs	r7, #16
 800714c:	2d00      	cmp	r5, #0
 800714e:	d1b2      	bne.n	80070b6 <_printf_i+0xce>
 8007150:	2320      	movs	r3, #32
 8007152:	6822      	ldr	r2, [r4, #0]
 8007154:	439a      	bics	r2, r3
 8007156:	6022      	str	r2, [r4, #0]
 8007158:	e7ad      	b.n	80070b6 <_printf_i+0xce>
 800715a:	2220      	movs	r2, #32
 800715c:	6809      	ldr	r1, [r1, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	6022      	str	r2, [r4, #0]
 8007162:	0022      	movs	r2, r4
 8007164:	2178      	movs	r1, #120	; 0x78
 8007166:	3245      	adds	r2, #69	; 0x45
 8007168:	7011      	strb	r1, [r2, #0]
 800716a:	4a27      	ldr	r2, [pc, #156]	; (8007208 <_printf_i+0x220>)
 800716c:	e7e1      	b.n	8007132 <_printf_i+0x14a>
 800716e:	0648      	lsls	r0, r1, #25
 8007170:	d5e6      	bpl.n	8007140 <_printf_i+0x158>
 8007172:	b2ad      	uxth	r5, r5
 8007174:	e7e4      	b.n	8007140 <_printf_i+0x158>
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	680d      	ldr	r5, [r1, #0]
 800717a:	1d10      	adds	r0, r2, #4
 800717c:	6949      	ldr	r1, [r1, #20]
 800717e:	6018      	str	r0, [r3, #0]
 8007180:	6813      	ldr	r3, [r2, #0]
 8007182:	062e      	lsls	r6, r5, #24
 8007184:	d501      	bpl.n	800718a <_printf_i+0x1a2>
 8007186:	6019      	str	r1, [r3, #0]
 8007188:	e002      	b.n	8007190 <_printf_i+0x1a8>
 800718a:	066d      	lsls	r5, r5, #25
 800718c:	d5fb      	bpl.n	8007186 <_printf_i+0x19e>
 800718e:	8019      	strh	r1, [r3, #0]
 8007190:	2300      	movs	r3, #0
 8007192:	9e04      	ldr	r6, [sp, #16]
 8007194:	6123      	str	r3, [r4, #16]
 8007196:	e7bb      	b.n	8007110 <_printf_i+0x128>
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	1d11      	adds	r1, r2, #4
 800719c:	6019      	str	r1, [r3, #0]
 800719e:	6816      	ldr	r6, [r2, #0]
 80071a0:	2100      	movs	r1, #0
 80071a2:	0030      	movs	r0, r6
 80071a4:	6862      	ldr	r2, [r4, #4]
 80071a6:	f002 fa5f 	bl	8009668 <memchr>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d001      	beq.n	80071b2 <_printf_i+0x1ca>
 80071ae:	1b80      	subs	r0, r0, r6
 80071b0:	6060      	str	r0, [r4, #4]
 80071b2:	6863      	ldr	r3, [r4, #4]
 80071b4:	6123      	str	r3, [r4, #16]
 80071b6:	2300      	movs	r3, #0
 80071b8:	9a04      	ldr	r2, [sp, #16]
 80071ba:	7013      	strb	r3, [r2, #0]
 80071bc:	e7a8      	b.n	8007110 <_printf_i+0x128>
 80071be:	6923      	ldr	r3, [r4, #16]
 80071c0:	0032      	movs	r2, r6
 80071c2:	9906      	ldr	r1, [sp, #24]
 80071c4:	9805      	ldr	r0, [sp, #20]
 80071c6:	9d07      	ldr	r5, [sp, #28]
 80071c8:	47a8      	blx	r5
 80071ca:	1c43      	adds	r3, r0, #1
 80071cc:	d0aa      	beq.n	8007124 <_printf_i+0x13c>
 80071ce:	6823      	ldr	r3, [r4, #0]
 80071d0:	079b      	lsls	r3, r3, #30
 80071d2:	d415      	bmi.n	8007200 <_printf_i+0x218>
 80071d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d6:	68e0      	ldr	r0, [r4, #12]
 80071d8:	4298      	cmp	r0, r3
 80071da:	daa5      	bge.n	8007128 <_printf_i+0x140>
 80071dc:	0018      	movs	r0, r3
 80071de:	e7a3      	b.n	8007128 <_printf_i+0x140>
 80071e0:	0022      	movs	r2, r4
 80071e2:	2301      	movs	r3, #1
 80071e4:	9906      	ldr	r1, [sp, #24]
 80071e6:	9805      	ldr	r0, [sp, #20]
 80071e8:	9e07      	ldr	r6, [sp, #28]
 80071ea:	3219      	adds	r2, #25
 80071ec:	47b0      	blx	r6
 80071ee:	1c43      	adds	r3, r0, #1
 80071f0:	d098      	beq.n	8007124 <_printf_i+0x13c>
 80071f2:	3501      	adds	r5, #1
 80071f4:	68e3      	ldr	r3, [r4, #12]
 80071f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071f8:	1a9b      	subs	r3, r3, r2
 80071fa:	42ab      	cmp	r3, r5
 80071fc:	dcf0      	bgt.n	80071e0 <_printf_i+0x1f8>
 80071fe:	e7e9      	b.n	80071d4 <_printf_i+0x1ec>
 8007200:	2500      	movs	r5, #0
 8007202:	e7f7      	b.n	80071f4 <_printf_i+0x20c>
 8007204:	0800b11e 	.word	0x0800b11e
 8007208:	0800b12f 	.word	0x0800b12f

0800720c <_sbrk_r>:
 800720c:	2300      	movs	r3, #0
 800720e:	b570      	push	{r4, r5, r6, lr}
 8007210:	4d06      	ldr	r5, [pc, #24]	; (800722c <_sbrk_r+0x20>)
 8007212:	0004      	movs	r4, r0
 8007214:	0008      	movs	r0, r1
 8007216:	602b      	str	r3, [r5, #0]
 8007218:	f7fc fe0e 	bl	8003e38 <_sbrk>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d103      	bne.n	8007228 <_sbrk_r+0x1c>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d000      	beq.n	8007228 <_sbrk_r+0x1c>
 8007226:	6023      	str	r3, [r4, #0]
 8007228:	bd70      	pop	{r4, r5, r6, pc}
 800722a:	46c0      	nop			; (mov r8, r8)
 800722c:	2000061c 	.word	0x2000061c

08007230 <siprintf>:
 8007230:	b40e      	push	{r1, r2, r3}
 8007232:	b500      	push	{lr}
 8007234:	490b      	ldr	r1, [pc, #44]	; (8007264 <siprintf+0x34>)
 8007236:	b09c      	sub	sp, #112	; 0x70
 8007238:	ab1d      	add	r3, sp, #116	; 0x74
 800723a:	9002      	str	r0, [sp, #8]
 800723c:	9006      	str	r0, [sp, #24]
 800723e:	9107      	str	r1, [sp, #28]
 8007240:	9104      	str	r1, [sp, #16]
 8007242:	4809      	ldr	r0, [pc, #36]	; (8007268 <siprintf+0x38>)
 8007244:	4909      	ldr	r1, [pc, #36]	; (800726c <siprintf+0x3c>)
 8007246:	cb04      	ldmia	r3!, {r2}
 8007248:	9105      	str	r1, [sp, #20]
 800724a:	6800      	ldr	r0, [r0, #0]
 800724c:	a902      	add	r1, sp, #8
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	f002 ff7e 	bl	800a150 <_svfiprintf_r>
 8007254:	2300      	movs	r3, #0
 8007256:	9a02      	ldr	r2, [sp, #8]
 8007258:	7013      	strb	r3, [r2, #0]
 800725a:	b01c      	add	sp, #112	; 0x70
 800725c:	bc08      	pop	{r3}
 800725e:	b003      	add	sp, #12
 8007260:	4718      	bx	r3
 8007262:	46c0      	nop			; (mov r8, r8)
 8007264:	7fffffff 	.word	0x7fffffff
 8007268:	2000000c 	.word	0x2000000c
 800726c:	ffff0208 	.word	0xffff0208

08007270 <strcpy>:
 8007270:	0003      	movs	r3, r0
 8007272:	780a      	ldrb	r2, [r1, #0]
 8007274:	3101      	adds	r1, #1
 8007276:	701a      	strb	r2, [r3, #0]
 8007278:	3301      	adds	r3, #1
 800727a:	2a00      	cmp	r2, #0
 800727c:	d1f9      	bne.n	8007272 <strcpy+0x2>
 800727e:	4770      	bx	lr

08007280 <strstr>:
 8007280:	780a      	ldrb	r2, [r1, #0]
 8007282:	b530      	push	{r4, r5, lr}
 8007284:	2a00      	cmp	r2, #0
 8007286:	d10c      	bne.n	80072a2 <strstr+0x22>
 8007288:	bd30      	pop	{r4, r5, pc}
 800728a:	429a      	cmp	r2, r3
 800728c:	d108      	bne.n	80072a0 <strstr+0x20>
 800728e:	2301      	movs	r3, #1
 8007290:	5ccc      	ldrb	r4, [r1, r3]
 8007292:	2c00      	cmp	r4, #0
 8007294:	d0f8      	beq.n	8007288 <strstr+0x8>
 8007296:	5cc5      	ldrb	r5, [r0, r3]
 8007298:	42a5      	cmp	r5, r4
 800729a:	d101      	bne.n	80072a0 <strstr+0x20>
 800729c:	3301      	adds	r3, #1
 800729e:	e7f7      	b.n	8007290 <strstr+0x10>
 80072a0:	3001      	adds	r0, #1
 80072a2:	7803      	ldrb	r3, [r0, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1f0      	bne.n	800728a <strstr+0xa>
 80072a8:	0018      	movs	r0, r3
 80072aa:	e7ed      	b.n	8007288 <strstr+0x8>

080072ac <sulp>:
 80072ac:	b570      	push	{r4, r5, r6, lr}
 80072ae:	0016      	movs	r6, r2
 80072b0:	000d      	movs	r5, r1
 80072b2:	f002 fd79 	bl	8009da8 <__ulp>
 80072b6:	2e00      	cmp	r6, #0
 80072b8:	d00d      	beq.n	80072d6 <sulp+0x2a>
 80072ba:	236b      	movs	r3, #107	; 0x6b
 80072bc:	006a      	lsls	r2, r5, #1
 80072be:	0d52      	lsrs	r2, r2, #21
 80072c0:	1a9b      	subs	r3, r3, r2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	dd07      	ble.n	80072d6 <sulp+0x2a>
 80072c6:	2400      	movs	r4, #0
 80072c8:	4a03      	ldr	r2, [pc, #12]	; (80072d8 <sulp+0x2c>)
 80072ca:	051b      	lsls	r3, r3, #20
 80072cc:	189d      	adds	r5, r3, r2
 80072ce:	002b      	movs	r3, r5
 80072d0:	0022      	movs	r2, r4
 80072d2:	f7fa fc9b 	bl	8001c0c <__aeabi_dmul>
 80072d6:	bd70      	pop	{r4, r5, r6, pc}
 80072d8:	3ff00000 	.word	0x3ff00000

080072dc <_strtod_l>:
 80072dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072de:	001d      	movs	r5, r3
 80072e0:	2300      	movs	r3, #0
 80072e2:	b0a5      	sub	sp, #148	; 0x94
 80072e4:	9320      	str	r3, [sp, #128]	; 0x80
 80072e6:	4bac      	ldr	r3, [pc, #688]	; (8007598 <_strtod_l+0x2bc>)
 80072e8:	9005      	str	r0, [sp, #20]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	9108      	str	r1, [sp, #32]
 80072ee:	0018      	movs	r0, r3
 80072f0:	9307      	str	r3, [sp, #28]
 80072f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80072f4:	f7f8 ff08 	bl	8000108 <strlen>
 80072f8:	2600      	movs	r6, #0
 80072fa:	0004      	movs	r4, r0
 80072fc:	2700      	movs	r7, #0
 80072fe:	9b08      	ldr	r3, [sp, #32]
 8007300:	931f      	str	r3, [sp, #124]	; 0x7c
 8007302:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007304:	7813      	ldrb	r3, [r2, #0]
 8007306:	2b2b      	cmp	r3, #43	; 0x2b
 8007308:	d058      	beq.n	80073bc <_strtod_l+0xe0>
 800730a:	d844      	bhi.n	8007396 <_strtod_l+0xba>
 800730c:	2b0d      	cmp	r3, #13
 800730e:	d83d      	bhi.n	800738c <_strtod_l+0xb0>
 8007310:	2b08      	cmp	r3, #8
 8007312:	d83d      	bhi.n	8007390 <_strtod_l+0xb4>
 8007314:	2b00      	cmp	r3, #0
 8007316:	d047      	beq.n	80073a8 <_strtod_l+0xcc>
 8007318:	2300      	movs	r3, #0
 800731a:	930e      	str	r3, [sp, #56]	; 0x38
 800731c:	2200      	movs	r2, #0
 800731e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007320:	920a      	str	r2, [sp, #40]	; 0x28
 8007322:	9306      	str	r3, [sp, #24]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b30      	cmp	r3, #48	; 0x30
 8007328:	d000      	beq.n	800732c <_strtod_l+0x50>
 800732a:	e07f      	b.n	800742c <_strtod_l+0x150>
 800732c:	9b06      	ldr	r3, [sp, #24]
 800732e:	3220      	adds	r2, #32
 8007330:	785b      	ldrb	r3, [r3, #1]
 8007332:	4393      	bics	r3, r2
 8007334:	2b58      	cmp	r3, #88	; 0x58
 8007336:	d000      	beq.n	800733a <_strtod_l+0x5e>
 8007338:	e06e      	b.n	8007418 <_strtod_l+0x13c>
 800733a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800733c:	9502      	str	r5, [sp, #8]
 800733e:	9301      	str	r3, [sp, #4]
 8007340:	ab20      	add	r3, sp, #128	; 0x80
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	4a95      	ldr	r2, [pc, #596]	; (800759c <_strtod_l+0x2c0>)
 8007346:	ab21      	add	r3, sp, #132	; 0x84
 8007348:	9805      	ldr	r0, [sp, #20]
 800734a:	a91f      	add	r1, sp, #124	; 0x7c
 800734c:	f001 fe6c 	bl	8009028 <__gethex>
 8007350:	2307      	movs	r3, #7
 8007352:	0005      	movs	r5, r0
 8007354:	0004      	movs	r4, r0
 8007356:	401d      	ands	r5, r3
 8007358:	4218      	tst	r0, r3
 800735a:	d006      	beq.n	800736a <_strtod_l+0x8e>
 800735c:	2d06      	cmp	r5, #6
 800735e:	d12f      	bne.n	80073c0 <_strtod_l+0xe4>
 8007360:	9b06      	ldr	r3, [sp, #24]
 8007362:	3301      	adds	r3, #1
 8007364:	931f      	str	r3, [sp, #124]	; 0x7c
 8007366:	2300      	movs	r3, #0
 8007368:	930e      	str	r3, [sp, #56]	; 0x38
 800736a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <_strtod_l+0x9a>
 8007370:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007372:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01c      	beq.n	80073b6 <_strtod_l+0xda>
 800737c:	2380      	movs	r3, #128	; 0x80
 800737e:	0032      	movs	r2, r6
 8007380:	061b      	lsls	r3, r3, #24
 8007382:	18fb      	adds	r3, r7, r3
 8007384:	0010      	movs	r0, r2
 8007386:	0019      	movs	r1, r3
 8007388:	b025      	add	sp, #148	; 0x94
 800738a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800738c:	2b20      	cmp	r3, #32
 800738e:	d1c3      	bne.n	8007318 <_strtod_l+0x3c>
 8007390:	3201      	adds	r2, #1
 8007392:	921f      	str	r2, [sp, #124]	; 0x7c
 8007394:	e7b5      	b.n	8007302 <_strtod_l+0x26>
 8007396:	2b2d      	cmp	r3, #45	; 0x2d
 8007398:	d1be      	bne.n	8007318 <_strtod_l+0x3c>
 800739a:	3b2c      	subs	r3, #44	; 0x2c
 800739c:	930e      	str	r3, [sp, #56]	; 0x38
 800739e:	1c53      	adds	r3, r2, #1
 80073a0:	931f      	str	r3, [sp, #124]	; 0x7c
 80073a2:	7853      	ldrb	r3, [r2, #1]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1b9      	bne.n	800731c <_strtod_l+0x40>
 80073a8:	9b08      	ldr	r3, [sp, #32]
 80073aa:	931f      	str	r3, [sp, #124]	; 0x7c
 80073ac:	2300      	movs	r3, #0
 80073ae:	930e      	str	r3, [sp, #56]	; 0x38
 80073b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1dc      	bne.n	8007370 <_strtod_l+0x94>
 80073b6:	0032      	movs	r2, r6
 80073b8:	003b      	movs	r3, r7
 80073ba:	e7e3      	b.n	8007384 <_strtod_l+0xa8>
 80073bc:	2300      	movs	r3, #0
 80073be:	e7ed      	b.n	800739c <_strtod_l+0xc0>
 80073c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80073c2:	2a00      	cmp	r2, #0
 80073c4:	d007      	beq.n	80073d6 <_strtod_l+0xfa>
 80073c6:	2135      	movs	r1, #53	; 0x35
 80073c8:	a822      	add	r0, sp, #136	; 0x88
 80073ca:	f002 fdee 	bl	8009faa <__copybits>
 80073ce:	9920      	ldr	r1, [sp, #128]	; 0x80
 80073d0:	9805      	ldr	r0, [sp, #20]
 80073d2:	f002 f9a9 	bl	8009728 <_Bfree>
 80073d6:	1e68      	subs	r0, r5, #1
 80073d8:	2804      	cmp	r0, #4
 80073da:	d806      	bhi.n	80073ea <_strtod_l+0x10e>
 80073dc:	f7f8 fe9c 	bl	8000118 <__gnu_thumb1_case_uqi>
 80073e0:	1816030b 	.word	0x1816030b
 80073e4:	0b          	.byte	0x0b
 80073e5:	00          	.byte	0x00
 80073e6:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80073e8:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80073ea:	0723      	lsls	r3, r4, #28
 80073ec:	d5bd      	bpl.n	800736a <_strtod_l+0x8e>
 80073ee:	2380      	movs	r3, #128	; 0x80
 80073f0:	061b      	lsls	r3, r3, #24
 80073f2:	431f      	orrs	r7, r3
 80073f4:	e7b9      	b.n	800736a <_strtod_l+0x8e>
 80073f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073f8:	4a69      	ldr	r2, [pc, #420]	; (80075a0 <_strtod_l+0x2c4>)
 80073fa:	496a      	ldr	r1, [pc, #424]	; (80075a4 <_strtod_l+0x2c8>)
 80073fc:	401a      	ands	r2, r3
 80073fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007400:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007402:	185b      	adds	r3, r3, r1
 8007404:	051b      	lsls	r3, r3, #20
 8007406:	431a      	orrs	r2, r3
 8007408:	0017      	movs	r7, r2
 800740a:	e7ee      	b.n	80073ea <_strtod_l+0x10e>
 800740c:	4f66      	ldr	r7, [pc, #408]	; (80075a8 <_strtod_l+0x2cc>)
 800740e:	e7ec      	b.n	80073ea <_strtod_l+0x10e>
 8007410:	2601      	movs	r6, #1
 8007412:	4f66      	ldr	r7, [pc, #408]	; (80075ac <_strtod_l+0x2d0>)
 8007414:	4276      	negs	r6, r6
 8007416:	e7e8      	b.n	80073ea <_strtod_l+0x10e>
 8007418:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	921f      	str	r2, [sp, #124]	; 0x7c
 800741e:	785b      	ldrb	r3, [r3, #1]
 8007420:	2b30      	cmp	r3, #48	; 0x30
 8007422:	d0f9      	beq.n	8007418 <_strtod_l+0x13c>
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0a0      	beq.n	800736a <_strtod_l+0x8e>
 8007428:	2301      	movs	r3, #1
 800742a:	930a      	str	r3, [sp, #40]	; 0x28
 800742c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800742e:	220a      	movs	r2, #10
 8007430:	9310      	str	r3, [sp, #64]	; 0x40
 8007432:	2300      	movs	r3, #0
 8007434:	930f      	str	r3, [sp, #60]	; 0x3c
 8007436:	930b      	str	r3, [sp, #44]	; 0x2c
 8007438:	9309      	str	r3, [sp, #36]	; 0x24
 800743a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800743c:	7805      	ldrb	r5, [r0, #0]
 800743e:	002b      	movs	r3, r5
 8007440:	3b30      	subs	r3, #48	; 0x30
 8007442:	b2d9      	uxtb	r1, r3
 8007444:	2909      	cmp	r1, #9
 8007446:	d927      	bls.n	8007498 <_strtod_l+0x1bc>
 8007448:	0022      	movs	r2, r4
 800744a:	9907      	ldr	r1, [sp, #28]
 800744c:	f003 f8ec 	bl	800a628 <strncmp>
 8007450:	2800      	cmp	r0, #0
 8007452:	d033      	beq.n	80074bc <_strtod_l+0x1e0>
 8007454:	2000      	movs	r0, #0
 8007456:	002b      	movs	r3, r5
 8007458:	4684      	mov	ip, r0
 800745a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800745c:	900c      	str	r0, [sp, #48]	; 0x30
 800745e:	9206      	str	r2, [sp, #24]
 8007460:	2220      	movs	r2, #32
 8007462:	0019      	movs	r1, r3
 8007464:	4391      	bics	r1, r2
 8007466:	000a      	movs	r2, r1
 8007468:	2100      	movs	r1, #0
 800746a:	9107      	str	r1, [sp, #28]
 800746c:	2a45      	cmp	r2, #69	; 0x45
 800746e:	d000      	beq.n	8007472 <_strtod_l+0x196>
 8007470:	e0c5      	b.n	80075fe <_strtod_l+0x322>
 8007472:	9b06      	ldr	r3, [sp, #24]
 8007474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007476:	4303      	orrs	r3, r0
 8007478:	4313      	orrs	r3, r2
 800747a:	428b      	cmp	r3, r1
 800747c:	d094      	beq.n	80073a8 <_strtod_l+0xcc>
 800747e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007480:	9308      	str	r3, [sp, #32]
 8007482:	3301      	adds	r3, #1
 8007484:	931f      	str	r3, [sp, #124]	; 0x7c
 8007486:	9b08      	ldr	r3, [sp, #32]
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	2b2b      	cmp	r3, #43	; 0x2b
 800748c:	d076      	beq.n	800757c <_strtod_l+0x2a0>
 800748e:	000c      	movs	r4, r1
 8007490:	2b2d      	cmp	r3, #45	; 0x2d
 8007492:	d179      	bne.n	8007588 <_strtod_l+0x2ac>
 8007494:	2401      	movs	r4, #1
 8007496:	e072      	b.n	800757e <_strtod_l+0x2a2>
 8007498:	9909      	ldr	r1, [sp, #36]	; 0x24
 800749a:	2908      	cmp	r1, #8
 800749c:	dc09      	bgt.n	80074b2 <_strtod_l+0x1d6>
 800749e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074a0:	4351      	muls	r1, r2
 80074a2:	185b      	adds	r3, r3, r1
 80074a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80074a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a8:	3001      	adds	r0, #1
 80074aa:	3301      	adds	r3, #1
 80074ac:	9309      	str	r3, [sp, #36]	; 0x24
 80074ae:	901f      	str	r0, [sp, #124]	; 0x7c
 80074b0:	e7c3      	b.n	800743a <_strtod_l+0x15e>
 80074b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80074b4:	4351      	muls	r1, r2
 80074b6:	185b      	adds	r3, r3, r1
 80074b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80074ba:	e7f4      	b.n	80074a6 <_strtod_l+0x1ca>
 80074bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80074be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074c0:	191c      	adds	r4, r3, r4
 80074c2:	941f      	str	r4, [sp, #124]	; 0x7c
 80074c4:	7823      	ldrb	r3, [r4, #0]
 80074c6:	2a00      	cmp	r2, #0
 80074c8:	d039      	beq.n	800753e <_strtod_l+0x262>
 80074ca:	900c      	str	r0, [sp, #48]	; 0x30
 80074cc:	9206      	str	r2, [sp, #24]
 80074ce:	001a      	movs	r2, r3
 80074d0:	3a30      	subs	r2, #48	; 0x30
 80074d2:	2a09      	cmp	r2, #9
 80074d4:	d912      	bls.n	80074fc <_strtod_l+0x220>
 80074d6:	2201      	movs	r2, #1
 80074d8:	4694      	mov	ip, r2
 80074da:	e7c1      	b.n	8007460 <_strtod_l+0x184>
 80074dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80074de:	3001      	adds	r0, #1
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	921f      	str	r2, [sp, #124]	; 0x7c
 80074e4:	785b      	ldrb	r3, [r3, #1]
 80074e6:	2b30      	cmp	r3, #48	; 0x30
 80074e8:	d0f8      	beq.n	80074dc <_strtod_l+0x200>
 80074ea:	001a      	movs	r2, r3
 80074ec:	3a31      	subs	r2, #49	; 0x31
 80074ee:	2a08      	cmp	r2, #8
 80074f0:	d83f      	bhi.n	8007572 <_strtod_l+0x296>
 80074f2:	900c      	str	r0, [sp, #48]	; 0x30
 80074f4:	2000      	movs	r0, #0
 80074f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80074f8:	9006      	str	r0, [sp, #24]
 80074fa:	9210      	str	r2, [sp, #64]	; 0x40
 80074fc:	001a      	movs	r2, r3
 80074fe:	1c41      	adds	r1, r0, #1
 8007500:	3a30      	subs	r2, #48	; 0x30
 8007502:	2b30      	cmp	r3, #48	; 0x30
 8007504:	d015      	beq.n	8007532 <_strtod_l+0x256>
 8007506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007508:	185b      	adds	r3, r3, r1
 800750a:	210a      	movs	r1, #10
 800750c:	930c      	str	r3, [sp, #48]	; 0x30
 800750e:	9b06      	ldr	r3, [sp, #24]
 8007510:	18c4      	adds	r4, r0, r3
 8007512:	42a3      	cmp	r3, r4
 8007514:	d115      	bne.n	8007542 <_strtod_l+0x266>
 8007516:	9906      	ldr	r1, [sp, #24]
 8007518:	9b06      	ldr	r3, [sp, #24]
 800751a:	3101      	adds	r1, #1
 800751c:	1809      	adds	r1, r1, r0
 800751e:	181b      	adds	r3, r3, r0
 8007520:	9106      	str	r1, [sp, #24]
 8007522:	2b08      	cmp	r3, #8
 8007524:	dc1b      	bgt.n	800755e <_strtod_l+0x282>
 8007526:	230a      	movs	r3, #10
 8007528:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800752a:	434b      	muls	r3, r1
 800752c:	2100      	movs	r1, #0
 800752e:	18d3      	adds	r3, r2, r3
 8007530:	930b      	str	r3, [sp, #44]	; 0x2c
 8007532:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007534:	0008      	movs	r0, r1
 8007536:	1c5a      	adds	r2, r3, #1
 8007538:	921f      	str	r2, [sp, #124]	; 0x7c
 800753a:	785b      	ldrb	r3, [r3, #1]
 800753c:	e7c7      	b.n	80074ce <_strtod_l+0x1f2>
 800753e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007540:	e7d1      	b.n	80074e6 <_strtod_l+0x20a>
 8007542:	2b08      	cmp	r3, #8
 8007544:	dc04      	bgt.n	8007550 <_strtod_l+0x274>
 8007546:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007548:	434d      	muls	r5, r1
 800754a:	950b      	str	r5, [sp, #44]	; 0x2c
 800754c:	3301      	adds	r3, #1
 800754e:	e7e0      	b.n	8007512 <_strtod_l+0x236>
 8007550:	1c5d      	adds	r5, r3, #1
 8007552:	2d10      	cmp	r5, #16
 8007554:	dcfa      	bgt.n	800754c <_strtod_l+0x270>
 8007556:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007558:	434d      	muls	r5, r1
 800755a:	950f      	str	r5, [sp, #60]	; 0x3c
 800755c:	e7f6      	b.n	800754c <_strtod_l+0x270>
 800755e:	9b06      	ldr	r3, [sp, #24]
 8007560:	2100      	movs	r1, #0
 8007562:	2b10      	cmp	r3, #16
 8007564:	dce5      	bgt.n	8007532 <_strtod_l+0x256>
 8007566:	230a      	movs	r3, #10
 8007568:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800756a:	4343      	muls	r3, r0
 800756c:	18d3      	adds	r3, r2, r3
 800756e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007570:	e7df      	b.n	8007532 <_strtod_l+0x256>
 8007572:	2200      	movs	r2, #0
 8007574:	920c      	str	r2, [sp, #48]	; 0x30
 8007576:	9206      	str	r2, [sp, #24]
 8007578:	3201      	adds	r2, #1
 800757a:	e7ad      	b.n	80074d8 <_strtod_l+0x1fc>
 800757c:	2400      	movs	r4, #0
 800757e:	9b08      	ldr	r3, [sp, #32]
 8007580:	3302      	adds	r3, #2
 8007582:	931f      	str	r3, [sp, #124]	; 0x7c
 8007584:	9b08      	ldr	r3, [sp, #32]
 8007586:	789b      	ldrb	r3, [r3, #2]
 8007588:	001a      	movs	r2, r3
 800758a:	3a30      	subs	r2, #48	; 0x30
 800758c:	2a09      	cmp	r2, #9
 800758e:	d913      	bls.n	80075b8 <_strtod_l+0x2dc>
 8007590:	9a08      	ldr	r2, [sp, #32]
 8007592:	921f      	str	r2, [sp, #124]	; 0x7c
 8007594:	2200      	movs	r2, #0
 8007596:	e031      	b.n	80075fc <_strtod_l+0x320>
 8007598:	0800b420 	.word	0x0800b420
 800759c:	0800b140 	.word	0x0800b140
 80075a0:	ffefffff 	.word	0xffefffff
 80075a4:	00000433 	.word	0x00000433
 80075a8:	7ff00000 	.word	0x7ff00000
 80075ac:	7fffffff 	.word	0x7fffffff
 80075b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	921f      	str	r2, [sp, #124]	; 0x7c
 80075b6:	785b      	ldrb	r3, [r3, #1]
 80075b8:	2b30      	cmp	r3, #48	; 0x30
 80075ba:	d0f9      	beq.n	80075b0 <_strtod_l+0x2d4>
 80075bc:	2200      	movs	r2, #0
 80075be:	9207      	str	r2, [sp, #28]
 80075c0:	001a      	movs	r2, r3
 80075c2:	3a31      	subs	r2, #49	; 0x31
 80075c4:	2a08      	cmp	r2, #8
 80075c6:	d81a      	bhi.n	80075fe <_strtod_l+0x322>
 80075c8:	3b30      	subs	r3, #48	; 0x30
 80075ca:	001a      	movs	r2, r3
 80075cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075ce:	9307      	str	r3, [sp, #28]
 80075d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075d2:	1c59      	adds	r1, r3, #1
 80075d4:	911f      	str	r1, [sp, #124]	; 0x7c
 80075d6:	785b      	ldrb	r3, [r3, #1]
 80075d8:	001d      	movs	r5, r3
 80075da:	3d30      	subs	r5, #48	; 0x30
 80075dc:	2d09      	cmp	r5, #9
 80075de:	d939      	bls.n	8007654 <_strtod_l+0x378>
 80075e0:	9d07      	ldr	r5, [sp, #28]
 80075e2:	1b49      	subs	r1, r1, r5
 80075e4:	4db0      	ldr	r5, [pc, #704]	; (80078a8 <_strtod_l+0x5cc>)
 80075e6:	9507      	str	r5, [sp, #28]
 80075e8:	2908      	cmp	r1, #8
 80075ea:	dc03      	bgt.n	80075f4 <_strtod_l+0x318>
 80075ec:	9207      	str	r2, [sp, #28]
 80075ee:	42aa      	cmp	r2, r5
 80075f0:	dd00      	ble.n	80075f4 <_strtod_l+0x318>
 80075f2:	9507      	str	r5, [sp, #28]
 80075f4:	2c00      	cmp	r4, #0
 80075f6:	d002      	beq.n	80075fe <_strtod_l+0x322>
 80075f8:	9a07      	ldr	r2, [sp, #28]
 80075fa:	4252      	negs	r2, r2
 80075fc:	9207      	str	r2, [sp, #28]
 80075fe:	9a06      	ldr	r2, [sp, #24]
 8007600:	2a00      	cmp	r2, #0
 8007602:	d14b      	bne.n	800769c <_strtod_l+0x3c0>
 8007604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007606:	4310      	orrs	r0, r2
 8007608:	d000      	beq.n	800760c <_strtod_l+0x330>
 800760a:	e6ae      	b.n	800736a <_strtod_l+0x8e>
 800760c:	4662      	mov	r2, ip
 800760e:	2a00      	cmp	r2, #0
 8007610:	d000      	beq.n	8007614 <_strtod_l+0x338>
 8007612:	e6c9      	b.n	80073a8 <_strtod_l+0xcc>
 8007614:	2b69      	cmp	r3, #105	; 0x69
 8007616:	d025      	beq.n	8007664 <_strtod_l+0x388>
 8007618:	dc21      	bgt.n	800765e <_strtod_l+0x382>
 800761a:	2b49      	cmp	r3, #73	; 0x49
 800761c:	d022      	beq.n	8007664 <_strtod_l+0x388>
 800761e:	2b4e      	cmp	r3, #78	; 0x4e
 8007620:	d000      	beq.n	8007624 <_strtod_l+0x348>
 8007622:	e6c1      	b.n	80073a8 <_strtod_l+0xcc>
 8007624:	49a1      	ldr	r1, [pc, #644]	; (80078ac <_strtod_l+0x5d0>)
 8007626:	a81f      	add	r0, sp, #124	; 0x7c
 8007628:	f001 ff4c 	bl	80094c4 <__match>
 800762c:	2800      	cmp	r0, #0
 800762e:	d100      	bne.n	8007632 <_strtod_l+0x356>
 8007630:	e6ba      	b.n	80073a8 <_strtod_l+0xcc>
 8007632:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	2b28      	cmp	r3, #40	; 0x28
 8007638:	d12a      	bne.n	8007690 <_strtod_l+0x3b4>
 800763a:	499d      	ldr	r1, [pc, #628]	; (80078b0 <_strtod_l+0x5d4>)
 800763c:	aa22      	add	r2, sp, #136	; 0x88
 800763e:	a81f      	add	r0, sp, #124	; 0x7c
 8007640:	f001 ff54 	bl	80094ec <__hexnan>
 8007644:	2805      	cmp	r0, #5
 8007646:	d123      	bne.n	8007690 <_strtod_l+0x3b4>
 8007648:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800764a:	4a9a      	ldr	r2, [pc, #616]	; (80078b4 <_strtod_l+0x5d8>)
 800764c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800764e:	431a      	orrs	r2, r3
 8007650:	0017      	movs	r7, r2
 8007652:	e68a      	b.n	800736a <_strtod_l+0x8e>
 8007654:	210a      	movs	r1, #10
 8007656:	434a      	muls	r2, r1
 8007658:	18d2      	adds	r2, r2, r3
 800765a:	3a30      	subs	r2, #48	; 0x30
 800765c:	e7b8      	b.n	80075d0 <_strtod_l+0x2f4>
 800765e:	2b6e      	cmp	r3, #110	; 0x6e
 8007660:	d0e0      	beq.n	8007624 <_strtod_l+0x348>
 8007662:	e6a1      	b.n	80073a8 <_strtod_l+0xcc>
 8007664:	4994      	ldr	r1, [pc, #592]	; (80078b8 <_strtod_l+0x5dc>)
 8007666:	a81f      	add	r0, sp, #124	; 0x7c
 8007668:	f001 ff2c 	bl	80094c4 <__match>
 800766c:	2800      	cmp	r0, #0
 800766e:	d100      	bne.n	8007672 <_strtod_l+0x396>
 8007670:	e69a      	b.n	80073a8 <_strtod_l+0xcc>
 8007672:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007674:	4991      	ldr	r1, [pc, #580]	; (80078bc <_strtod_l+0x5e0>)
 8007676:	3b01      	subs	r3, #1
 8007678:	a81f      	add	r0, sp, #124	; 0x7c
 800767a:	931f      	str	r3, [sp, #124]	; 0x7c
 800767c:	f001 ff22 	bl	80094c4 <__match>
 8007680:	2800      	cmp	r0, #0
 8007682:	d102      	bne.n	800768a <_strtod_l+0x3ae>
 8007684:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007686:	3301      	adds	r3, #1
 8007688:	931f      	str	r3, [sp, #124]	; 0x7c
 800768a:	2600      	movs	r6, #0
 800768c:	4f89      	ldr	r7, [pc, #548]	; (80078b4 <_strtod_l+0x5d8>)
 800768e:	e66c      	b.n	800736a <_strtod_l+0x8e>
 8007690:	488b      	ldr	r0, [pc, #556]	; (80078c0 <_strtod_l+0x5e4>)
 8007692:	f002 ffbf 	bl	800a614 <nan>
 8007696:	0006      	movs	r6, r0
 8007698:	000f      	movs	r7, r1
 800769a:	e666      	b.n	800736a <_strtod_l+0x8e>
 800769c:	9b07      	ldr	r3, [sp, #28]
 800769e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076a0:	1a9b      	subs	r3, r3, r2
 80076a2:	930a      	str	r3, [sp, #40]	; 0x28
 80076a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <_strtod_l+0x3d2>
 80076aa:	9b06      	ldr	r3, [sp, #24]
 80076ac:	9309      	str	r3, [sp, #36]	; 0x24
 80076ae:	9c06      	ldr	r4, [sp, #24]
 80076b0:	2c10      	cmp	r4, #16
 80076b2:	dd00      	ble.n	80076b6 <_strtod_l+0x3da>
 80076b4:	2410      	movs	r4, #16
 80076b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80076b8:	f7fb f92a 	bl	8002910 <__aeabi_ui2d>
 80076bc:	9b06      	ldr	r3, [sp, #24]
 80076be:	0006      	movs	r6, r0
 80076c0:	000f      	movs	r7, r1
 80076c2:	2b09      	cmp	r3, #9
 80076c4:	dd15      	ble.n	80076f2 <_strtod_l+0x416>
 80076c6:	0022      	movs	r2, r4
 80076c8:	4b7e      	ldr	r3, [pc, #504]	; (80078c4 <_strtod_l+0x5e8>)
 80076ca:	3a09      	subs	r2, #9
 80076cc:	00d2      	lsls	r2, r2, #3
 80076ce:	189b      	adds	r3, r3, r2
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f7fa fa9a 	bl	8001c0c <__aeabi_dmul>
 80076d8:	0006      	movs	r6, r0
 80076da:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80076dc:	000f      	movs	r7, r1
 80076de:	f7fb f917 	bl	8002910 <__aeabi_ui2d>
 80076e2:	0002      	movs	r2, r0
 80076e4:	000b      	movs	r3, r1
 80076e6:	0030      	movs	r0, r6
 80076e8:	0039      	movs	r1, r7
 80076ea:	f7f9 fb51 	bl	8000d90 <__aeabi_dadd>
 80076ee:	0006      	movs	r6, r0
 80076f0:	000f      	movs	r7, r1
 80076f2:	9b06      	ldr	r3, [sp, #24]
 80076f4:	2b0f      	cmp	r3, #15
 80076f6:	dc39      	bgt.n	800776c <_strtod_l+0x490>
 80076f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d100      	bne.n	8007700 <_strtod_l+0x424>
 80076fe:	e634      	b.n	800736a <_strtod_l+0x8e>
 8007700:	dd24      	ble.n	800774c <_strtod_l+0x470>
 8007702:	2b16      	cmp	r3, #22
 8007704:	dc09      	bgt.n	800771a <_strtod_l+0x43e>
 8007706:	496f      	ldr	r1, [pc, #444]	; (80078c4 <_strtod_l+0x5e8>)
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	18c9      	adds	r1, r1, r3
 800770c:	0032      	movs	r2, r6
 800770e:	6808      	ldr	r0, [r1, #0]
 8007710:	6849      	ldr	r1, [r1, #4]
 8007712:	003b      	movs	r3, r7
 8007714:	f7fa fa7a 	bl	8001c0c <__aeabi_dmul>
 8007718:	e7bd      	b.n	8007696 <_strtod_l+0x3ba>
 800771a:	2325      	movs	r3, #37	; 0x25
 800771c:	9a06      	ldr	r2, [sp, #24]
 800771e:	1a9b      	subs	r3, r3, r2
 8007720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007722:	4293      	cmp	r3, r2
 8007724:	db22      	blt.n	800776c <_strtod_l+0x490>
 8007726:	240f      	movs	r4, #15
 8007728:	9b06      	ldr	r3, [sp, #24]
 800772a:	4d66      	ldr	r5, [pc, #408]	; (80078c4 <_strtod_l+0x5e8>)
 800772c:	1ae4      	subs	r4, r4, r3
 800772e:	00e1      	lsls	r1, r4, #3
 8007730:	1869      	adds	r1, r5, r1
 8007732:	0032      	movs	r2, r6
 8007734:	6808      	ldr	r0, [r1, #0]
 8007736:	6849      	ldr	r1, [r1, #4]
 8007738:	003b      	movs	r3, r7
 800773a:	f7fa fa67 	bl	8001c0c <__aeabi_dmul>
 800773e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007740:	1b1c      	subs	r4, r3, r4
 8007742:	00e4      	lsls	r4, r4, #3
 8007744:	192c      	adds	r4, r5, r4
 8007746:	6822      	ldr	r2, [r4, #0]
 8007748:	6863      	ldr	r3, [r4, #4]
 800774a:	e7e3      	b.n	8007714 <_strtod_l+0x438>
 800774c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800774e:	3316      	adds	r3, #22
 8007750:	db0c      	blt.n	800776c <_strtod_l+0x490>
 8007752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007754:	9a07      	ldr	r2, [sp, #28]
 8007756:	0030      	movs	r0, r6
 8007758:	1a9a      	subs	r2, r3, r2
 800775a:	4b5a      	ldr	r3, [pc, #360]	; (80078c4 <_strtod_l+0x5e8>)
 800775c:	00d2      	lsls	r2, r2, #3
 800775e:	189b      	adds	r3, r3, r2
 8007760:	0039      	movs	r1, r7
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f7f9 fe4f 	bl	8001408 <__aeabi_ddiv>
 800776a:	e794      	b.n	8007696 <_strtod_l+0x3ba>
 800776c:	9b06      	ldr	r3, [sp, #24]
 800776e:	1b1c      	subs	r4, r3, r4
 8007770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007772:	18e4      	adds	r4, r4, r3
 8007774:	2c00      	cmp	r4, #0
 8007776:	dd72      	ble.n	800785e <_strtod_l+0x582>
 8007778:	230f      	movs	r3, #15
 800777a:	0021      	movs	r1, r4
 800777c:	4019      	ands	r1, r3
 800777e:	421c      	tst	r4, r3
 8007780:	d00a      	beq.n	8007798 <_strtod_l+0x4bc>
 8007782:	00cb      	lsls	r3, r1, #3
 8007784:	494f      	ldr	r1, [pc, #316]	; (80078c4 <_strtod_l+0x5e8>)
 8007786:	0032      	movs	r2, r6
 8007788:	18c9      	adds	r1, r1, r3
 800778a:	6808      	ldr	r0, [r1, #0]
 800778c:	6849      	ldr	r1, [r1, #4]
 800778e:	003b      	movs	r3, r7
 8007790:	f7fa fa3c 	bl	8001c0c <__aeabi_dmul>
 8007794:	0006      	movs	r6, r0
 8007796:	000f      	movs	r7, r1
 8007798:	230f      	movs	r3, #15
 800779a:	439c      	bics	r4, r3
 800779c:	d04a      	beq.n	8007834 <_strtod_l+0x558>
 800779e:	3326      	adds	r3, #38	; 0x26
 80077a0:	33ff      	adds	r3, #255	; 0xff
 80077a2:	429c      	cmp	r4, r3
 80077a4:	dd22      	ble.n	80077ec <_strtod_l+0x510>
 80077a6:	2300      	movs	r3, #0
 80077a8:	9306      	str	r3, [sp, #24]
 80077aa:	9307      	str	r3, [sp, #28]
 80077ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80077ae:	9309      	str	r3, [sp, #36]	; 0x24
 80077b0:	2322      	movs	r3, #34	; 0x22
 80077b2:	2600      	movs	r6, #0
 80077b4:	9a05      	ldr	r2, [sp, #20]
 80077b6:	4f3f      	ldr	r7, [pc, #252]	; (80078b4 <_strtod_l+0x5d8>)
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077bc:	42b3      	cmp	r3, r6
 80077be:	d100      	bne.n	80077c2 <_strtod_l+0x4e6>
 80077c0:	e5d3      	b.n	800736a <_strtod_l+0x8e>
 80077c2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80077c4:	9805      	ldr	r0, [sp, #20]
 80077c6:	f001 ffaf 	bl	8009728 <_Bfree>
 80077ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077cc:	9805      	ldr	r0, [sp, #20]
 80077ce:	f001 ffab 	bl	8009728 <_Bfree>
 80077d2:	9907      	ldr	r1, [sp, #28]
 80077d4:	9805      	ldr	r0, [sp, #20]
 80077d6:	f001 ffa7 	bl	8009728 <_Bfree>
 80077da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077dc:	9805      	ldr	r0, [sp, #20]
 80077de:	f001 ffa3 	bl	8009728 <_Bfree>
 80077e2:	9906      	ldr	r1, [sp, #24]
 80077e4:	9805      	ldr	r0, [sp, #20]
 80077e6:	f001 ff9f 	bl	8009728 <_Bfree>
 80077ea:	e5be      	b.n	800736a <_strtod_l+0x8e>
 80077ec:	2300      	movs	r3, #0
 80077ee:	0030      	movs	r0, r6
 80077f0:	0039      	movs	r1, r7
 80077f2:	4d35      	ldr	r5, [pc, #212]	; (80078c8 <_strtod_l+0x5ec>)
 80077f4:	1124      	asrs	r4, r4, #4
 80077f6:	9308      	str	r3, [sp, #32]
 80077f8:	2c01      	cmp	r4, #1
 80077fa:	dc1e      	bgt.n	800783a <_strtod_l+0x55e>
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <_strtod_l+0x528>
 8007800:	0006      	movs	r6, r0
 8007802:	000f      	movs	r7, r1
 8007804:	4b31      	ldr	r3, [pc, #196]	; (80078cc <_strtod_l+0x5f0>)
 8007806:	0032      	movs	r2, r6
 8007808:	18ff      	adds	r7, r7, r3
 800780a:	9b08      	ldr	r3, [sp, #32]
 800780c:	00dd      	lsls	r5, r3, #3
 800780e:	4b2e      	ldr	r3, [pc, #184]	; (80078c8 <_strtod_l+0x5ec>)
 8007810:	195d      	adds	r5, r3, r5
 8007812:	6828      	ldr	r0, [r5, #0]
 8007814:	6869      	ldr	r1, [r5, #4]
 8007816:	003b      	movs	r3, r7
 8007818:	f7fa f9f8 	bl	8001c0c <__aeabi_dmul>
 800781c:	4b25      	ldr	r3, [pc, #148]	; (80078b4 <_strtod_l+0x5d8>)
 800781e:	4a2c      	ldr	r2, [pc, #176]	; (80078d0 <_strtod_l+0x5f4>)
 8007820:	0006      	movs	r6, r0
 8007822:	400b      	ands	r3, r1
 8007824:	4293      	cmp	r3, r2
 8007826:	d8be      	bhi.n	80077a6 <_strtod_l+0x4ca>
 8007828:	4a2a      	ldr	r2, [pc, #168]	; (80078d4 <_strtod_l+0x5f8>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d913      	bls.n	8007856 <_strtod_l+0x57a>
 800782e:	2601      	movs	r6, #1
 8007830:	4f29      	ldr	r7, [pc, #164]	; (80078d8 <_strtod_l+0x5fc>)
 8007832:	4276      	negs	r6, r6
 8007834:	2300      	movs	r3, #0
 8007836:	9308      	str	r3, [sp, #32]
 8007838:	e087      	b.n	800794a <_strtod_l+0x66e>
 800783a:	2201      	movs	r2, #1
 800783c:	4214      	tst	r4, r2
 800783e:	d004      	beq.n	800784a <_strtod_l+0x56e>
 8007840:	682a      	ldr	r2, [r5, #0]
 8007842:	686b      	ldr	r3, [r5, #4]
 8007844:	f7fa f9e2 	bl	8001c0c <__aeabi_dmul>
 8007848:	2301      	movs	r3, #1
 800784a:	9a08      	ldr	r2, [sp, #32]
 800784c:	1064      	asrs	r4, r4, #1
 800784e:	3201      	adds	r2, #1
 8007850:	9208      	str	r2, [sp, #32]
 8007852:	3508      	adds	r5, #8
 8007854:	e7d0      	b.n	80077f8 <_strtod_l+0x51c>
 8007856:	23d4      	movs	r3, #212	; 0xd4
 8007858:	049b      	lsls	r3, r3, #18
 800785a:	18cf      	adds	r7, r1, r3
 800785c:	e7ea      	b.n	8007834 <_strtod_l+0x558>
 800785e:	2c00      	cmp	r4, #0
 8007860:	d0e8      	beq.n	8007834 <_strtod_l+0x558>
 8007862:	4264      	negs	r4, r4
 8007864:	220f      	movs	r2, #15
 8007866:	0023      	movs	r3, r4
 8007868:	4013      	ands	r3, r2
 800786a:	4214      	tst	r4, r2
 800786c:	d00a      	beq.n	8007884 <_strtod_l+0x5a8>
 800786e:	00da      	lsls	r2, r3, #3
 8007870:	4b14      	ldr	r3, [pc, #80]	; (80078c4 <_strtod_l+0x5e8>)
 8007872:	0030      	movs	r0, r6
 8007874:	189b      	adds	r3, r3, r2
 8007876:	0039      	movs	r1, r7
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f7f9 fdc4 	bl	8001408 <__aeabi_ddiv>
 8007880:	0006      	movs	r6, r0
 8007882:	000f      	movs	r7, r1
 8007884:	1124      	asrs	r4, r4, #4
 8007886:	d0d5      	beq.n	8007834 <_strtod_l+0x558>
 8007888:	2c1f      	cmp	r4, #31
 800788a:	dd27      	ble.n	80078dc <_strtod_l+0x600>
 800788c:	2300      	movs	r3, #0
 800788e:	9306      	str	r3, [sp, #24]
 8007890:	9307      	str	r3, [sp, #28]
 8007892:	930b      	str	r3, [sp, #44]	; 0x2c
 8007894:	9309      	str	r3, [sp, #36]	; 0x24
 8007896:	2322      	movs	r3, #34	; 0x22
 8007898:	9a05      	ldr	r2, [sp, #20]
 800789a:	2600      	movs	r6, #0
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078a0:	2700      	movs	r7, #0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d18d      	bne.n	80077c2 <_strtod_l+0x4e6>
 80078a6:	e560      	b.n	800736a <_strtod_l+0x8e>
 80078a8:	00004e1f 	.word	0x00004e1f
 80078ac:	0800b119 	.word	0x0800b119
 80078b0:	0800b154 	.word	0x0800b154
 80078b4:	7ff00000 	.word	0x7ff00000
 80078b8:	0800b111 	.word	0x0800b111
 80078bc:	0800b344 	.word	0x0800b344
 80078c0:	0800b23f 	.word	0x0800b23f
 80078c4:	0800b4b8 	.word	0x0800b4b8
 80078c8:	0800b490 	.word	0x0800b490
 80078cc:	fcb00000 	.word	0xfcb00000
 80078d0:	7ca00000 	.word	0x7ca00000
 80078d4:	7c900000 	.word	0x7c900000
 80078d8:	7fefffff 	.word	0x7fefffff
 80078dc:	2310      	movs	r3, #16
 80078de:	0022      	movs	r2, r4
 80078e0:	401a      	ands	r2, r3
 80078e2:	9208      	str	r2, [sp, #32]
 80078e4:	421c      	tst	r4, r3
 80078e6:	d001      	beq.n	80078ec <_strtod_l+0x610>
 80078e8:	335a      	adds	r3, #90	; 0x5a
 80078ea:	9308      	str	r3, [sp, #32]
 80078ec:	0030      	movs	r0, r6
 80078ee:	0039      	movs	r1, r7
 80078f0:	2300      	movs	r3, #0
 80078f2:	4dc5      	ldr	r5, [pc, #788]	; (8007c08 <_strtod_l+0x92c>)
 80078f4:	2201      	movs	r2, #1
 80078f6:	4214      	tst	r4, r2
 80078f8:	d004      	beq.n	8007904 <_strtod_l+0x628>
 80078fa:	682a      	ldr	r2, [r5, #0]
 80078fc:	686b      	ldr	r3, [r5, #4]
 80078fe:	f7fa f985 	bl	8001c0c <__aeabi_dmul>
 8007902:	2301      	movs	r3, #1
 8007904:	1064      	asrs	r4, r4, #1
 8007906:	3508      	adds	r5, #8
 8007908:	2c00      	cmp	r4, #0
 800790a:	d1f3      	bne.n	80078f4 <_strtod_l+0x618>
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <_strtod_l+0x638>
 8007910:	0006      	movs	r6, r0
 8007912:	000f      	movs	r7, r1
 8007914:	9b08      	ldr	r3, [sp, #32]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00f      	beq.n	800793a <_strtod_l+0x65e>
 800791a:	236b      	movs	r3, #107	; 0x6b
 800791c:	007a      	lsls	r2, r7, #1
 800791e:	0d52      	lsrs	r2, r2, #21
 8007920:	0039      	movs	r1, r7
 8007922:	1a9b      	subs	r3, r3, r2
 8007924:	2b00      	cmp	r3, #0
 8007926:	dd08      	ble.n	800793a <_strtod_l+0x65e>
 8007928:	2b1f      	cmp	r3, #31
 800792a:	dc00      	bgt.n	800792e <_strtod_l+0x652>
 800792c:	e124      	b.n	8007b78 <_strtod_l+0x89c>
 800792e:	2600      	movs	r6, #0
 8007930:	2b34      	cmp	r3, #52	; 0x34
 8007932:	dc00      	bgt.n	8007936 <_strtod_l+0x65a>
 8007934:	e119      	b.n	8007b6a <_strtod_l+0x88e>
 8007936:	27dc      	movs	r7, #220	; 0xdc
 8007938:	04bf      	lsls	r7, r7, #18
 800793a:	2200      	movs	r2, #0
 800793c:	2300      	movs	r3, #0
 800793e:	0030      	movs	r0, r6
 8007940:	0039      	movs	r1, r7
 8007942:	f7f8 fd83 	bl	800044c <__aeabi_dcmpeq>
 8007946:	2800      	cmp	r0, #0
 8007948:	d1a0      	bne.n	800788c <_strtod_l+0x5b0>
 800794a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800794c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007952:	9b06      	ldr	r3, [sp, #24]
 8007954:	9805      	ldr	r0, [sp, #20]
 8007956:	f001 ff4f 	bl	80097f8 <__s2b>
 800795a:	900b      	str	r0, [sp, #44]	; 0x2c
 800795c:	2800      	cmp	r0, #0
 800795e:	d100      	bne.n	8007962 <_strtod_l+0x686>
 8007960:	e721      	b.n	80077a6 <_strtod_l+0x4ca>
 8007962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007964:	9907      	ldr	r1, [sp, #28]
 8007966:	17da      	asrs	r2, r3, #31
 8007968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800796a:	1a5b      	subs	r3, r3, r1
 800796c:	401a      	ands	r2, r3
 800796e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007970:	9215      	str	r2, [sp, #84]	; 0x54
 8007972:	43db      	mvns	r3, r3
 8007974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007976:	17db      	asrs	r3, r3, #31
 8007978:	401a      	ands	r2, r3
 800797a:	2300      	movs	r3, #0
 800797c:	921a      	str	r2, [sp, #104]	; 0x68
 800797e:	9306      	str	r3, [sp, #24]
 8007980:	9307      	str	r3, [sp, #28]
 8007982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007984:	9805      	ldr	r0, [sp, #20]
 8007986:	6859      	ldr	r1, [r3, #4]
 8007988:	f001 fe8a 	bl	80096a0 <_Balloc>
 800798c:	9009      	str	r0, [sp, #36]	; 0x24
 800798e:	2800      	cmp	r0, #0
 8007990:	d100      	bne.n	8007994 <_strtod_l+0x6b8>
 8007992:	e70d      	b.n	80077b0 <_strtod_l+0x4d4>
 8007994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007996:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	310c      	adds	r1, #12
 800799c:	1c9a      	adds	r2, r3, #2
 800799e:	0092      	lsls	r2, r2, #2
 80079a0:	300c      	adds	r0, #12
 80079a2:	930c      	str	r3, [sp, #48]	; 0x30
 80079a4:	f7fe fed0 	bl	8006748 <memcpy>
 80079a8:	ab22      	add	r3, sp, #136	; 0x88
 80079aa:	9301      	str	r3, [sp, #4]
 80079ac:	ab21      	add	r3, sp, #132	; 0x84
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	0032      	movs	r2, r6
 80079b2:	003b      	movs	r3, r7
 80079b4:	9805      	ldr	r0, [sp, #20]
 80079b6:	9612      	str	r6, [sp, #72]	; 0x48
 80079b8:	9713      	str	r7, [sp, #76]	; 0x4c
 80079ba:	f002 fa69 	bl	8009e90 <__d2b>
 80079be:	9020      	str	r0, [sp, #128]	; 0x80
 80079c0:	2800      	cmp	r0, #0
 80079c2:	d100      	bne.n	80079c6 <_strtod_l+0x6ea>
 80079c4:	e6f4      	b.n	80077b0 <_strtod_l+0x4d4>
 80079c6:	2101      	movs	r1, #1
 80079c8:	9805      	ldr	r0, [sp, #20]
 80079ca:	f001 ffa9 	bl	8009920 <__i2b>
 80079ce:	9007      	str	r0, [sp, #28]
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d100      	bne.n	80079d6 <_strtod_l+0x6fa>
 80079d4:	e6ec      	b.n	80077b0 <_strtod_l+0x4d4>
 80079d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80079da:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80079dc:	1ad4      	subs	r4, r2, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	db01      	blt.n	80079e6 <_strtod_l+0x70a>
 80079e2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80079e4:	195d      	adds	r5, r3, r5
 80079e6:	9908      	ldr	r1, [sp, #32]
 80079e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80079ea:	1a5b      	subs	r3, r3, r1
 80079ec:	2136      	movs	r1, #54	; 0x36
 80079ee:	189b      	adds	r3, r3, r2
 80079f0:	1a8a      	subs	r2, r1, r2
 80079f2:	4986      	ldr	r1, [pc, #536]	; (8007c0c <_strtod_l+0x930>)
 80079f4:	2001      	movs	r0, #1
 80079f6:	468c      	mov	ip, r1
 80079f8:	2100      	movs	r1, #0
 80079fa:	3b01      	subs	r3, #1
 80079fc:	9110      	str	r1, [sp, #64]	; 0x40
 80079fe:	9014      	str	r0, [sp, #80]	; 0x50
 8007a00:	4563      	cmp	r3, ip
 8007a02:	da07      	bge.n	8007a14 <_strtod_l+0x738>
 8007a04:	4661      	mov	r1, ip
 8007a06:	1ac9      	subs	r1, r1, r3
 8007a08:	1a52      	subs	r2, r2, r1
 8007a0a:	291f      	cmp	r1, #31
 8007a0c:	dd00      	ble.n	8007a10 <_strtod_l+0x734>
 8007a0e:	e0b8      	b.n	8007b82 <_strtod_l+0x8a6>
 8007a10:	4088      	lsls	r0, r1
 8007a12:	9014      	str	r0, [sp, #80]	; 0x50
 8007a14:	18ab      	adds	r3, r5, r2
 8007a16:	930c      	str	r3, [sp, #48]	; 0x30
 8007a18:	18a4      	adds	r4, r4, r2
 8007a1a:	9b08      	ldr	r3, [sp, #32]
 8007a1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a1e:	191c      	adds	r4, r3, r4
 8007a20:	002b      	movs	r3, r5
 8007a22:	4295      	cmp	r5, r2
 8007a24:	dd00      	ble.n	8007a28 <_strtod_l+0x74c>
 8007a26:	0013      	movs	r3, r2
 8007a28:	42a3      	cmp	r3, r4
 8007a2a:	dd00      	ble.n	8007a2e <_strtod_l+0x752>
 8007a2c:	0023      	movs	r3, r4
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	dd04      	ble.n	8007a3c <_strtod_l+0x760>
 8007a32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a34:	1ae4      	subs	r4, r4, r3
 8007a36:	1ad2      	subs	r2, r2, r3
 8007a38:	920c      	str	r2, [sp, #48]	; 0x30
 8007a3a:	1aed      	subs	r5, r5, r3
 8007a3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	dd17      	ble.n	8007a72 <_strtod_l+0x796>
 8007a42:	001a      	movs	r2, r3
 8007a44:	9907      	ldr	r1, [sp, #28]
 8007a46:	9805      	ldr	r0, [sp, #20]
 8007a48:	f002 f830 	bl	8009aac <__pow5mult>
 8007a4c:	9007      	str	r0, [sp, #28]
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d100      	bne.n	8007a54 <_strtod_l+0x778>
 8007a52:	e6ad      	b.n	80077b0 <_strtod_l+0x4d4>
 8007a54:	0001      	movs	r1, r0
 8007a56:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a58:	9805      	ldr	r0, [sp, #20]
 8007a5a:	f001 ff77 	bl	800994c <__multiply>
 8007a5e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d100      	bne.n	8007a66 <_strtod_l+0x78a>
 8007a64:	e6a4      	b.n	80077b0 <_strtod_l+0x4d4>
 8007a66:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007a68:	9805      	ldr	r0, [sp, #20]
 8007a6a:	f001 fe5d 	bl	8009728 <_Bfree>
 8007a6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a70:	9320      	str	r3, [sp, #128]	; 0x80
 8007a72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	dd00      	ble.n	8007a7a <_strtod_l+0x79e>
 8007a78:	e089      	b.n	8007b8e <_strtod_l+0x8b2>
 8007a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	dd08      	ble.n	8007a92 <_strtod_l+0x7b6>
 8007a80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007a82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a84:	9805      	ldr	r0, [sp, #20]
 8007a86:	f002 f811 	bl	8009aac <__pow5mult>
 8007a8a:	9009      	str	r0, [sp, #36]	; 0x24
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	d100      	bne.n	8007a92 <_strtod_l+0x7b6>
 8007a90:	e68e      	b.n	80077b0 <_strtod_l+0x4d4>
 8007a92:	2c00      	cmp	r4, #0
 8007a94:	dd08      	ble.n	8007aa8 <_strtod_l+0x7cc>
 8007a96:	0022      	movs	r2, r4
 8007a98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a9a:	9805      	ldr	r0, [sp, #20]
 8007a9c:	f002 f862 	bl	8009b64 <__lshift>
 8007aa0:	9009      	str	r0, [sp, #36]	; 0x24
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d100      	bne.n	8007aa8 <_strtod_l+0x7cc>
 8007aa6:	e683      	b.n	80077b0 <_strtod_l+0x4d4>
 8007aa8:	2d00      	cmp	r5, #0
 8007aaa:	dd08      	ble.n	8007abe <_strtod_l+0x7e2>
 8007aac:	002a      	movs	r2, r5
 8007aae:	9907      	ldr	r1, [sp, #28]
 8007ab0:	9805      	ldr	r0, [sp, #20]
 8007ab2:	f002 f857 	bl	8009b64 <__lshift>
 8007ab6:	9007      	str	r0, [sp, #28]
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d100      	bne.n	8007abe <_strtod_l+0x7e2>
 8007abc:	e678      	b.n	80077b0 <_strtod_l+0x4d4>
 8007abe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ac0:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007ac2:	9805      	ldr	r0, [sp, #20]
 8007ac4:	f002 f8d8 	bl	8009c78 <__mdiff>
 8007ac8:	9006      	str	r0, [sp, #24]
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d100      	bne.n	8007ad0 <_strtod_l+0x7f4>
 8007ace:	e66f      	b.n	80077b0 <_strtod_l+0x4d4>
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	68c3      	ldr	r3, [r0, #12]
 8007ad4:	9907      	ldr	r1, [sp, #28]
 8007ad6:	60c2      	str	r2, [r0, #12]
 8007ad8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ada:	f002 f8b1 	bl	8009c40 <__mcmp>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	da5f      	bge.n	8007ba2 <_strtod_l+0x8c6>
 8007ae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ae4:	4333      	orrs	r3, r6
 8007ae6:	d000      	beq.n	8007aea <_strtod_l+0x80e>
 8007ae8:	e08a      	b.n	8007c00 <_strtod_l+0x924>
 8007aea:	033b      	lsls	r3, r7, #12
 8007aec:	d000      	beq.n	8007af0 <_strtod_l+0x814>
 8007aee:	e087      	b.n	8007c00 <_strtod_l+0x924>
 8007af0:	22d6      	movs	r2, #214	; 0xd6
 8007af2:	4b47      	ldr	r3, [pc, #284]	; (8007c10 <_strtod_l+0x934>)
 8007af4:	04d2      	lsls	r2, r2, #19
 8007af6:	403b      	ands	r3, r7
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d800      	bhi.n	8007afe <_strtod_l+0x822>
 8007afc:	e080      	b.n	8007c00 <_strtod_l+0x924>
 8007afe:	9b06      	ldr	r3, [sp, #24]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	930a      	str	r3, [sp, #40]	; 0x28
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d104      	bne.n	8007b12 <_strtod_l+0x836>
 8007b08:	9b06      	ldr	r3, [sp, #24]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	930a      	str	r3, [sp, #40]	; 0x28
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	dd76      	ble.n	8007c00 <_strtod_l+0x924>
 8007b12:	9906      	ldr	r1, [sp, #24]
 8007b14:	2201      	movs	r2, #1
 8007b16:	9805      	ldr	r0, [sp, #20]
 8007b18:	f002 f824 	bl	8009b64 <__lshift>
 8007b1c:	9907      	ldr	r1, [sp, #28]
 8007b1e:	9006      	str	r0, [sp, #24]
 8007b20:	f002 f88e 	bl	8009c40 <__mcmp>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	dd6b      	ble.n	8007c00 <_strtod_l+0x924>
 8007b28:	9908      	ldr	r1, [sp, #32]
 8007b2a:	003b      	movs	r3, r7
 8007b2c:	4a38      	ldr	r2, [pc, #224]	; (8007c10 <_strtod_l+0x934>)
 8007b2e:	2900      	cmp	r1, #0
 8007b30:	d100      	bne.n	8007b34 <_strtod_l+0x858>
 8007b32:	e092      	b.n	8007c5a <_strtod_l+0x97e>
 8007b34:	0011      	movs	r1, r2
 8007b36:	20d6      	movs	r0, #214	; 0xd6
 8007b38:	4039      	ands	r1, r7
 8007b3a:	04c0      	lsls	r0, r0, #19
 8007b3c:	4281      	cmp	r1, r0
 8007b3e:	dd00      	ble.n	8007b42 <_strtod_l+0x866>
 8007b40:	e08b      	b.n	8007c5a <_strtod_l+0x97e>
 8007b42:	23dc      	movs	r3, #220	; 0xdc
 8007b44:	049b      	lsls	r3, r3, #18
 8007b46:	4299      	cmp	r1, r3
 8007b48:	dc00      	bgt.n	8007b4c <_strtod_l+0x870>
 8007b4a:	e6a4      	b.n	8007896 <_strtod_l+0x5ba>
 8007b4c:	0030      	movs	r0, r6
 8007b4e:	0039      	movs	r1, r7
 8007b50:	2200      	movs	r2, #0
 8007b52:	4b30      	ldr	r3, [pc, #192]	; (8007c14 <_strtod_l+0x938>)
 8007b54:	f7fa f85a 	bl	8001c0c <__aeabi_dmul>
 8007b58:	0006      	movs	r6, r0
 8007b5a:	000f      	movs	r7, r1
 8007b5c:	4308      	orrs	r0, r1
 8007b5e:	d000      	beq.n	8007b62 <_strtod_l+0x886>
 8007b60:	e62f      	b.n	80077c2 <_strtod_l+0x4e6>
 8007b62:	2322      	movs	r3, #34	; 0x22
 8007b64:	9a05      	ldr	r2, [sp, #20]
 8007b66:	6013      	str	r3, [r2, #0]
 8007b68:	e62b      	b.n	80077c2 <_strtod_l+0x4e6>
 8007b6a:	234b      	movs	r3, #75	; 0x4b
 8007b6c:	1a9a      	subs	r2, r3, r2
 8007b6e:	3b4c      	subs	r3, #76	; 0x4c
 8007b70:	4093      	lsls	r3, r2
 8007b72:	4019      	ands	r1, r3
 8007b74:	000f      	movs	r7, r1
 8007b76:	e6e0      	b.n	800793a <_strtod_l+0x65e>
 8007b78:	2201      	movs	r2, #1
 8007b7a:	4252      	negs	r2, r2
 8007b7c:	409a      	lsls	r2, r3
 8007b7e:	4016      	ands	r6, r2
 8007b80:	e6db      	b.n	800793a <_strtod_l+0x65e>
 8007b82:	4925      	ldr	r1, [pc, #148]	; (8007c18 <_strtod_l+0x93c>)
 8007b84:	1acb      	subs	r3, r1, r3
 8007b86:	0001      	movs	r1, r0
 8007b88:	4099      	lsls	r1, r3
 8007b8a:	9110      	str	r1, [sp, #64]	; 0x40
 8007b8c:	e741      	b.n	8007a12 <_strtod_l+0x736>
 8007b8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b90:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007b92:	9805      	ldr	r0, [sp, #20]
 8007b94:	f001 ffe6 	bl	8009b64 <__lshift>
 8007b98:	9020      	str	r0, [sp, #128]	; 0x80
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d000      	beq.n	8007ba0 <_strtod_l+0x8c4>
 8007b9e:	e76c      	b.n	8007a7a <_strtod_l+0x79e>
 8007ba0:	e606      	b.n	80077b0 <_strtod_l+0x4d4>
 8007ba2:	970c      	str	r7, [sp, #48]	; 0x30
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	d176      	bne.n	8007c96 <_strtod_l+0x9ba>
 8007ba8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007baa:	033b      	lsls	r3, r7, #12
 8007bac:	0b1b      	lsrs	r3, r3, #12
 8007bae:	2a00      	cmp	r2, #0
 8007bb0:	d038      	beq.n	8007c24 <_strtod_l+0x948>
 8007bb2:	4a1a      	ldr	r2, [pc, #104]	; (8007c1c <_strtod_l+0x940>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d138      	bne.n	8007c2a <_strtod_l+0x94e>
 8007bb8:	2201      	movs	r2, #1
 8007bba:	9b08      	ldr	r3, [sp, #32]
 8007bbc:	4252      	negs	r2, r2
 8007bbe:	0031      	movs	r1, r6
 8007bc0:	0010      	movs	r0, r2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00b      	beq.n	8007bde <_strtod_l+0x902>
 8007bc6:	24d4      	movs	r4, #212	; 0xd4
 8007bc8:	4b11      	ldr	r3, [pc, #68]	; (8007c10 <_strtod_l+0x934>)
 8007bca:	0010      	movs	r0, r2
 8007bcc:	403b      	ands	r3, r7
 8007bce:	04e4      	lsls	r4, r4, #19
 8007bd0:	42a3      	cmp	r3, r4
 8007bd2:	d804      	bhi.n	8007bde <_strtod_l+0x902>
 8007bd4:	306c      	adds	r0, #108	; 0x6c
 8007bd6:	0d1b      	lsrs	r3, r3, #20
 8007bd8:	1ac3      	subs	r3, r0, r3
 8007bda:	409a      	lsls	r2, r3
 8007bdc:	0010      	movs	r0, r2
 8007bde:	4281      	cmp	r1, r0
 8007be0:	d123      	bne.n	8007c2a <_strtod_l+0x94e>
 8007be2:	4b0f      	ldr	r3, [pc, #60]	; (8007c20 <_strtod_l+0x944>)
 8007be4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d102      	bne.n	8007bf0 <_strtod_l+0x914>
 8007bea:	1c4b      	adds	r3, r1, #1
 8007bec:	d100      	bne.n	8007bf0 <_strtod_l+0x914>
 8007bee:	e5df      	b.n	80077b0 <_strtod_l+0x4d4>
 8007bf0:	4b07      	ldr	r3, [pc, #28]	; (8007c10 <_strtod_l+0x934>)
 8007bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bf4:	2600      	movs	r6, #0
 8007bf6:	401a      	ands	r2, r3
 8007bf8:	0013      	movs	r3, r2
 8007bfa:	2280      	movs	r2, #128	; 0x80
 8007bfc:	0352      	lsls	r2, r2, #13
 8007bfe:	189f      	adds	r7, r3, r2
 8007c00:	9b08      	ldr	r3, [sp, #32]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1a2      	bne.n	8007b4c <_strtod_l+0x870>
 8007c06:	e5dc      	b.n	80077c2 <_strtod_l+0x4e6>
 8007c08:	0800b168 	.word	0x0800b168
 8007c0c:	fffffc02 	.word	0xfffffc02
 8007c10:	7ff00000 	.word	0x7ff00000
 8007c14:	39500000 	.word	0x39500000
 8007c18:	fffffbe2 	.word	0xfffffbe2
 8007c1c:	000fffff 	.word	0x000fffff
 8007c20:	7fefffff 	.word	0x7fefffff
 8007c24:	4333      	orrs	r3, r6
 8007c26:	d100      	bne.n	8007c2a <_strtod_l+0x94e>
 8007c28:	e77e      	b.n	8007b28 <_strtod_l+0x84c>
 8007c2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01d      	beq.n	8007c6c <_strtod_l+0x990>
 8007c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c34:	4213      	tst	r3, r2
 8007c36:	d0e3      	beq.n	8007c00 <_strtod_l+0x924>
 8007c38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c3a:	0030      	movs	r0, r6
 8007c3c:	0039      	movs	r1, r7
 8007c3e:	9a08      	ldr	r2, [sp, #32]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d017      	beq.n	8007c74 <_strtod_l+0x998>
 8007c44:	f7ff fb32 	bl	80072ac <sulp>
 8007c48:	0002      	movs	r2, r0
 8007c4a:	000b      	movs	r3, r1
 8007c4c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007c4e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007c50:	f7f9 f89e 	bl	8000d90 <__aeabi_dadd>
 8007c54:	0006      	movs	r6, r0
 8007c56:	000f      	movs	r7, r1
 8007c58:	e7d2      	b.n	8007c00 <_strtod_l+0x924>
 8007c5a:	2601      	movs	r6, #1
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	4a99      	ldr	r2, [pc, #612]	; (8007ec4 <_strtod_l+0xbe8>)
 8007c60:	4276      	negs	r6, r6
 8007c62:	189b      	adds	r3, r3, r2
 8007c64:	4a98      	ldr	r2, [pc, #608]	; (8007ec8 <_strtod_l+0xbec>)
 8007c66:	431a      	orrs	r2, r3
 8007c68:	0017      	movs	r7, r2
 8007c6a:	e7c9      	b.n	8007c00 <_strtod_l+0x924>
 8007c6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c6e:	4233      	tst	r3, r6
 8007c70:	d0c6      	beq.n	8007c00 <_strtod_l+0x924>
 8007c72:	e7e1      	b.n	8007c38 <_strtod_l+0x95c>
 8007c74:	f7ff fb1a 	bl	80072ac <sulp>
 8007c78:	0002      	movs	r2, r0
 8007c7a:	000b      	movs	r3, r1
 8007c7c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007c7e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007c80:	f7fa fa30 	bl	80020e4 <__aeabi_dsub>
 8007c84:	2200      	movs	r2, #0
 8007c86:	2300      	movs	r3, #0
 8007c88:	0006      	movs	r6, r0
 8007c8a:	000f      	movs	r7, r1
 8007c8c:	f7f8 fbde 	bl	800044c <__aeabi_dcmpeq>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d0b5      	beq.n	8007c00 <_strtod_l+0x924>
 8007c94:	e5ff      	b.n	8007896 <_strtod_l+0x5ba>
 8007c96:	9907      	ldr	r1, [sp, #28]
 8007c98:	9806      	ldr	r0, [sp, #24]
 8007c9a:	f002 f95d 	bl	8009f58 <__ratio>
 8007c9e:	2380      	movs	r3, #128	; 0x80
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	05db      	lsls	r3, r3, #23
 8007ca4:	0004      	movs	r4, r0
 8007ca6:	000d      	movs	r5, r1
 8007ca8:	f7f8 fbe0 	bl	800046c <__aeabi_dcmple>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d075      	beq.n	8007d9c <_strtod_l+0xac0>
 8007cb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d047      	beq.n	8007d46 <_strtod_l+0xa6a>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	4c84      	ldr	r4, [pc, #528]	; (8007ecc <_strtod_l+0xbf0>)
 8007cba:	2500      	movs	r5, #0
 8007cbc:	9310      	str	r3, [sp, #64]	; 0x40
 8007cbe:	9411      	str	r4, [sp, #68]	; 0x44
 8007cc0:	4c82      	ldr	r4, [pc, #520]	; (8007ecc <_strtod_l+0xbf0>)
 8007cc2:	4a83      	ldr	r2, [pc, #524]	; (8007ed0 <_strtod_l+0xbf4>)
 8007cc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	9314      	str	r3, [sp, #80]	; 0x50
 8007cca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ccc:	4b81      	ldr	r3, [pc, #516]	; (8007ed4 <_strtod_l+0xbf8>)
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d000      	beq.n	8007cd4 <_strtod_l+0x9f8>
 8007cd2:	e0ac      	b.n	8007e2e <_strtod_l+0xb52>
 8007cd4:	4a80      	ldr	r2, [pc, #512]	; (8007ed8 <_strtod_l+0xbfc>)
 8007cd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cd8:	4694      	mov	ip, r2
 8007cda:	4463      	add	r3, ip
 8007cdc:	001f      	movs	r7, r3
 8007cde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ce2:	0030      	movs	r0, r6
 8007ce4:	0039      	movs	r1, r7
 8007ce6:	920c      	str	r2, [sp, #48]	; 0x30
 8007ce8:	930d      	str	r3, [sp, #52]	; 0x34
 8007cea:	f002 f85d 	bl	8009da8 <__ulp>
 8007cee:	0002      	movs	r2, r0
 8007cf0:	000b      	movs	r3, r1
 8007cf2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007cf4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007cf6:	f7f9 ff89 	bl	8001c0c <__aeabi_dmul>
 8007cfa:	0032      	movs	r2, r6
 8007cfc:	003b      	movs	r3, r7
 8007cfe:	f7f9 f847 	bl	8000d90 <__aeabi_dadd>
 8007d02:	4a73      	ldr	r2, [pc, #460]	; (8007ed0 <_strtod_l+0xbf4>)
 8007d04:	4b75      	ldr	r3, [pc, #468]	; (8007edc <_strtod_l+0xc00>)
 8007d06:	0006      	movs	r6, r0
 8007d08:	400a      	ands	r2, r1
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d95e      	bls.n	8007dcc <_strtod_l+0xaf0>
 8007d0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d10:	4b73      	ldr	r3, [pc, #460]	; (8007ee0 <_strtod_l+0xc04>)
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d103      	bne.n	8007d1e <_strtod_l+0xa42>
 8007d16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d18:	3301      	adds	r3, #1
 8007d1a:	d100      	bne.n	8007d1e <_strtod_l+0xa42>
 8007d1c:	e548      	b.n	80077b0 <_strtod_l+0x4d4>
 8007d1e:	2601      	movs	r6, #1
 8007d20:	4f6f      	ldr	r7, [pc, #444]	; (8007ee0 <_strtod_l+0xc04>)
 8007d22:	4276      	negs	r6, r6
 8007d24:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007d26:	9805      	ldr	r0, [sp, #20]
 8007d28:	f001 fcfe 	bl	8009728 <_Bfree>
 8007d2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d2e:	9805      	ldr	r0, [sp, #20]
 8007d30:	f001 fcfa 	bl	8009728 <_Bfree>
 8007d34:	9907      	ldr	r1, [sp, #28]
 8007d36:	9805      	ldr	r0, [sp, #20]
 8007d38:	f001 fcf6 	bl	8009728 <_Bfree>
 8007d3c:	9906      	ldr	r1, [sp, #24]
 8007d3e:	9805      	ldr	r0, [sp, #20]
 8007d40:	f001 fcf2 	bl	8009728 <_Bfree>
 8007d44:	e61d      	b.n	8007982 <_strtod_l+0x6a6>
 8007d46:	2e00      	cmp	r6, #0
 8007d48:	d11c      	bne.n	8007d84 <_strtod_l+0xaa8>
 8007d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d4c:	031b      	lsls	r3, r3, #12
 8007d4e:	d11f      	bne.n	8007d90 <_strtod_l+0xab4>
 8007d50:	2200      	movs	r2, #0
 8007d52:	0020      	movs	r0, r4
 8007d54:	0029      	movs	r1, r5
 8007d56:	4b5d      	ldr	r3, [pc, #372]	; (8007ecc <_strtod_l+0xbf0>)
 8007d58:	f7f8 fb7e 	bl	8000458 <__aeabi_dcmplt>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d11a      	bne.n	8007d96 <_strtod_l+0xaba>
 8007d60:	0020      	movs	r0, r4
 8007d62:	0029      	movs	r1, r5
 8007d64:	2200      	movs	r2, #0
 8007d66:	4b5f      	ldr	r3, [pc, #380]	; (8007ee4 <_strtod_l+0xc08>)
 8007d68:	f7f9 ff50 	bl	8001c0c <__aeabi_dmul>
 8007d6c:	0005      	movs	r5, r0
 8007d6e:	000c      	movs	r4, r1
 8007d70:	2380      	movs	r3, #128	; 0x80
 8007d72:	061b      	lsls	r3, r3, #24
 8007d74:	18e3      	adds	r3, r4, r3
 8007d76:	951c      	str	r5, [sp, #112]	; 0x70
 8007d78:	931d      	str	r3, [sp, #116]	; 0x74
 8007d7a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007d7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d7e:	9210      	str	r2, [sp, #64]	; 0x40
 8007d80:	9311      	str	r3, [sp, #68]	; 0x44
 8007d82:	e79e      	b.n	8007cc2 <_strtod_l+0x9e6>
 8007d84:	2e01      	cmp	r6, #1
 8007d86:	d103      	bne.n	8007d90 <_strtod_l+0xab4>
 8007d88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d100      	bne.n	8007d90 <_strtod_l+0xab4>
 8007d8e:	e582      	b.n	8007896 <_strtod_l+0x5ba>
 8007d90:	2300      	movs	r3, #0
 8007d92:	4c55      	ldr	r4, [pc, #340]	; (8007ee8 <_strtod_l+0xc0c>)
 8007d94:	e791      	b.n	8007cba <_strtod_l+0x9de>
 8007d96:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d98:	4c52      	ldr	r4, [pc, #328]	; (8007ee4 <_strtod_l+0xc08>)
 8007d9a:	e7e9      	b.n	8007d70 <_strtod_l+0xa94>
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	0020      	movs	r0, r4
 8007da0:	0029      	movs	r1, r5
 8007da2:	4b50      	ldr	r3, [pc, #320]	; (8007ee4 <_strtod_l+0xc08>)
 8007da4:	f7f9 ff32 	bl	8001c0c <__aeabi_dmul>
 8007da8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007daa:	0005      	movs	r5, r0
 8007dac:	000b      	movs	r3, r1
 8007dae:	000c      	movs	r4, r1
 8007db0:	2a00      	cmp	r2, #0
 8007db2:	d107      	bne.n	8007dc4 <_strtod_l+0xae8>
 8007db4:	2280      	movs	r2, #128	; 0x80
 8007db6:	0612      	lsls	r2, r2, #24
 8007db8:	188b      	adds	r3, r1, r2
 8007dba:	9016      	str	r0, [sp, #88]	; 0x58
 8007dbc:	9317      	str	r3, [sp, #92]	; 0x5c
 8007dbe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007dc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dc2:	e7dc      	b.n	8007d7e <_strtod_l+0xaa2>
 8007dc4:	0002      	movs	r2, r0
 8007dc6:	9216      	str	r2, [sp, #88]	; 0x58
 8007dc8:	9317      	str	r3, [sp, #92]	; 0x5c
 8007dca:	e7f8      	b.n	8007dbe <_strtod_l+0xae2>
 8007dcc:	23d4      	movs	r3, #212	; 0xd4
 8007dce:	049b      	lsls	r3, r3, #18
 8007dd0:	18cf      	adds	r7, r1, r3
 8007dd2:	9b08      	ldr	r3, [sp, #32]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1a5      	bne.n	8007d24 <_strtod_l+0xa48>
 8007dd8:	4b3d      	ldr	r3, [pc, #244]	; (8007ed0 <_strtod_l+0xbf4>)
 8007dda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ddc:	403b      	ands	r3, r7
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d1a0      	bne.n	8007d24 <_strtod_l+0xa48>
 8007de2:	0028      	movs	r0, r5
 8007de4:	0021      	movs	r1, r4
 8007de6:	f7f8 fbb7 	bl	8000558 <__aeabi_d2lz>
 8007dea:	f7f8 fbf1 	bl	80005d0 <__aeabi_l2d>
 8007dee:	0002      	movs	r2, r0
 8007df0:	000b      	movs	r3, r1
 8007df2:	0028      	movs	r0, r5
 8007df4:	0021      	movs	r1, r4
 8007df6:	f7fa f975 	bl	80020e4 <__aeabi_dsub>
 8007dfa:	033b      	lsls	r3, r7, #12
 8007dfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dfe:	0b1b      	lsrs	r3, r3, #12
 8007e00:	4333      	orrs	r3, r6
 8007e02:	4313      	orrs	r3, r2
 8007e04:	0004      	movs	r4, r0
 8007e06:	000d      	movs	r5, r1
 8007e08:	4a38      	ldr	r2, [pc, #224]	; (8007eec <_strtod_l+0xc10>)
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d055      	beq.n	8007eba <_strtod_l+0xbde>
 8007e0e:	4b38      	ldr	r3, [pc, #224]	; (8007ef0 <_strtod_l+0xc14>)
 8007e10:	f7f8 fb22 	bl	8000458 <__aeabi_dcmplt>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d000      	beq.n	8007e1a <_strtod_l+0xb3e>
 8007e18:	e4d3      	b.n	80077c2 <_strtod_l+0x4e6>
 8007e1a:	0020      	movs	r0, r4
 8007e1c:	0029      	movs	r1, r5
 8007e1e:	4a35      	ldr	r2, [pc, #212]	; (8007ef4 <_strtod_l+0xc18>)
 8007e20:	4b30      	ldr	r3, [pc, #192]	; (8007ee4 <_strtod_l+0xc08>)
 8007e22:	f7f8 fb2d 	bl	8000480 <__aeabi_dcmpgt>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d100      	bne.n	8007e2c <_strtod_l+0xb50>
 8007e2a:	e77b      	b.n	8007d24 <_strtod_l+0xa48>
 8007e2c:	e4c9      	b.n	80077c2 <_strtod_l+0x4e6>
 8007e2e:	9b08      	ldr	r3, [sp, #32]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d02b      	beq.n	8007e8c <_strtod_l+0xbb0>
 8007e34:	23d4      	movs	r3, #212	; 0xd4
 8007e36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e38:	04db      	lsls	r3, r3, #19
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d826      	bhi.n	8007e8c <_strtod_l+0xbb0>
 8007e3e:	0028      	movs	r0, r5
 8007e40:	0021      	movs	r1, r4
 8007e42:	4a2d      	ldr	r2, [pc, #180]	; (8007ef8 <_strtod_l+0xc1c>)
 8007e44:	4b2d      	ldr	r3, [pc, #180]	; (8007efc <_strtod_l+0xc20>)
 8007e46:	f7f8 fb11 	bl	800046c <__aeabi_dcmple>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	d017      	beq.n	8007e7e <_strtod_l+0xba2>
 8007e4e:	0028      	movs	r0, r5
 8007e50:	0021      	movs	r1, r4
 8007e52:	f7f8 fb63 	bl	800051c <__aeabi_d2uiz>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d100      	bne.n	8007e5c <_strtod_l+0xb80>
 8007e5a:	3001      	adds	r0, #1
 8007e5c:	f7fa fd58 	bl	8002910 <__aeabi_ui2d>
 8007e60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e62:	0005      	movs	r5, r0
 8007e64:	000b      	movs	r3, r1
 8007e66:	000c      	movs	r4, r1
 8007e68:	2a00      	cmp	r2, #0
 8007e6a:	d122      	bne.n	8007eb2 <_strtod_l+0xbd6>
 8007e6c:	2280      	movs	r2, #128	; 0x80
 8007e6e:	0612      	lsls	r2, r2, #24
 8007e70:	188b      	adds	r3, r1, r2
 8007e72:	9018      	str	r0, [sp, #96]	; 0x60
 8007e74:	9319      	str	r3, [sp, #100]	; 0x64
 8007e76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007e78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e7a:	9210      	str	r2, [sp, #64]	; 0x40
 8007e7c:	9311      	str	r3, [sp, #68]	; 0x44
 8007e7e:	22d6      	movs	r2, #214	; 0xd6
 8007e80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e82:	04d2      	lsls	r2, r2, #19
 8007e84:	189b      	adds	r3, r3, r2
 8007e86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e88:	1a9b      	subs	r3, r3, r2
 8007e8a:	9311      	str	r3, [sp, #68]	; 0x44
 8007e8c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007e8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007e90:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007e92:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007e94:	f001 ff88 	bl	8009da8 <__ulp>
 8007e98:	0002      	movs	r2, r0
 8007e9a:	000b      	movs	r3, r1
 8007e9c:	0030      	movs	r0, r6
 8007e9e:	0039      	movs	r1, r7
 8007ea0:	f7f9 feb4 	bl	8001c0c <__aeabi_dmul>
 8007ea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ea6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ea8:	f7f8 ff72 	bl	8000d90 <__aeabi_dadd>
 8007eac:	0006      	movs	r6, r0
 8007eae:	000f      	movs	r7, r1
 8007eb0:	e78f      	b.n	8007dd2 <_strtod_l+0xaf6>
 8007eb2:	0002      	movs	r2, r0
 8007eb4:	9218      	str	r2, [sp, #96]	; 0x60
 8007eb6:	9319      	str	r3, [sp, #100]	; 0x64
 8007eb8:	e7dd      	b.n	8007e76 <_strtod_l+0xb9a>
 8007eba:	4b11      	ldr	r3, [pc, #68]	; (8007f00 <_strtod_l+0xc24>)
 8007ebc:	f7f8 facc 	bl	8000458 <__aeabi_dcmplt>
 8007ec0:	e7b1      	b.n	8007e26 <_strtod_l+0xb4a>
 8007ec2:	46c0      	nop			; (mov r8, r8)
 8007ec4:	fff00000 	.word	0xfff00000
 8007ec8:	000fffff 	.word	0x000fffff
 8007ecc:	3ff00000 	.word	0x3ff00000
 8007ed0:	7ff00000 	.word	0x7ff00000
 8007ed4:	7fe00000 	.word	0x7fe00000
 8007ed8:	fcb00000 	.word	0xfcb00000
 8007edc:	7c9fffff 	.word	0x7c9fffff
 8007ee0:	7fefffff 	.word	0x7fefffff
 8007ee4:	3fe00000 	.word	0x3fe00000
 8007ee8:	bff00000 	.word	0xbff00000
 8007eec:	94a03595 	.word	0x94a03595
 8007ef0:	3fdfffff 	.word	0x3fdfffff
 8007ef4:	35afe535 	.word	0x35afe535
 8007ef8:	ffc00000 	.word	0xffc00000
 8007efc:	41dfffff 	.word	0x41dfffff
 8007f00:	3fcfffff 	.word	0x3fcfffff

08007f04 <strtof>:
 8007f04:	000a      	movs	r2, r1
 8007f06:	0001      	movs	r1, r0
 8007f08:	4824      	ldr	r0, [pc, #144]	; (8007f9c <strtof+0x98>)
 8007f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0c:	6800      	ldr	r0, [r0, #0]
 8007f0e:	4b24      	ldr	r3, [pc, #144]	; (8007fa0 <strtof+0x9c>)
 8007f10:	f7ff f9e4 	bl	80072dc <_strtod_l>
 8007f14:	0006      	movs	r6, r0
 8007f16:	000c      	movs	r4, r1
 8007f18:	0002      	movs	r2, r0
 8007f1a:	000b      	movs	r3, r1
 8007f1c:	0030      	movs	r0, r6
 8007f1e:	0021      	movs	r1, r4
 8007f20:	f7fa fc72 	bl	8002808 <__aeabi_dcmpun>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d00d      	beq.n	8007f44 <strtof+0x40>
 8007f28:	481e      	ldr	r0, [pc, #120]	; (8007fa4 <strtof+0xa0>)
 8007f2a:	2c00      	cmp	r4, #0
 8007f2c:	da06      	bge.n	8007f3c <strtof+0x38>
 8007f2e:	f002 fb77 	bl	800a620 <nanf>
 8007f32:	2380      	movs	r3, #128	; 0x80
 8007f34:	061b      	lsls	r3, r3, #24
 8007f36:	18c5      	adds	r5, r0, r3
 8007f38:	1c28      	adds	r0, r5, #0
 8007f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f3c:	f002 fb70 	bl	800a620 <nanf>
 8007f40:	1c05      	adds	r5, r0, #0
 8007f42:	e7f9      	b.n	8007f38 <strtof+0x34>
 8007f44:	0021      	movs	r1, r4
 8007f46:	0030      	movs	r0, r6
 8007f48:	f7fa fd50 	bl	80029ec <__aeabi_d2f>
 8007f4c:	0047      	lsls	r7, r0, #1
 8007f4e:	087f      	lsrs	r7, r7, #1
 8007f50:	1c05      	adds	r5, r0, #0
 8007f52:	4915      	ldr	r1, [pc, #84]	; (8007fa8 <strtof+0xa4>)
 8007f54:	1c38      	adds	r0, r7, #0
 8007f56:	f7f8 feb7 	bl	8000cc8 <__aeabi_fcmpun>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	d1ec      	bne.n	8007f38 <strtof+0x34>
 8007f5e:	4912      	ldr	r1, [pc, #72]	; (8007fa8 <strtof+0xa4>)
 8007f60:	1c38      	adds	r0, r7, #0
 8007f62:	f7f8 fabd 	bl	80004e0 <__aeabi_fcmple>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d1e6      	bne.n	8007f38 <strtof+0x34>
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	0064      	lsls	r4, r4, #1
 8007f6e:	0864      	lsrs	r4, r4, #1
 8007f70:	0030      	movs	r0, r6
 8007f72:	0021      	movs	r1, r4
 8007f74:	4b0d      	ldr	r3, [pc, #52]	; (8007fac <strtof+0xa8>)
 8007f76:	4252      	negs	r2, r2
 8007f78:	f7fa fc46 	bl	8002808 <__aeabi_dcmpun>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d108      	bne.n	8007f92 <strtof+0x8e>
 8007f80:	2201      	movs	r2, #1
 8007f82:	0030      	movs	r0, r6
 8007f84:	0021      	movs	r1, r4
 8007f86:	4b09      	ldr	r3, [pc, #36]	; (8007fac <strtof+0xa8>)
 8007f88:	4252      	negs	r2, r2
 8007f8a:	f7f8 fa6f 	bl	800046c <__aeabi_dcmple>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d0d2      	beq.n	8007f38 <strtof+0x34>
 8007f92:	2222      	movs	r2, #34	; 0x22
 8007f94:	4b01      	ldr	r3, [pc, #4]	; (8007f9c <strtof+0x98>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	e7cd      	b.n	8007f38 <strtof+0x34>
 8007f9c:	2000000c 	.word	0x2000000c
 8007fa0:	20000074 	.word	0x20000074
 8007fa4:	0800b23f 	.word	0x0800b23f
 8007fa8:	7f7fffff 	.word	0x7f7fffff
 8007fac:	7fefffff 	.word	0x7fefffff

08007fb0 <strtok>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	4b16      	ldr	r3, [pc, #88]	; (800800c <strtok+0x5c>)
 8007fb4:	0005      	movs	r5, r0
 8007fb6:	681f      	ldr	r7, [r3, #0]
 8007fb8:	000e      	movs	r6, r1
 8007fba:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8007fbc:	2c00      	cmp	r4, #0
 8007fbe:	d11d      	bne.n	8007ffc <strtok+0x4c>
 8007fc0:	2050      	movs	r0, #80	; 0x50
 8007fc2:	f7fe fbad 	bl	8006720 <malloc>
 8007fc6:	1e02      	subs	r2, r0, #0
 8007fc8:	65b8      	str	r0, [r7, #88]	; 0x58
 8007fca:	d104      	bne.n	8007fd6 <strtok+0x26>
 8007fcc:	2157      	movs	r1, #87	; 0x57
 8007fce:	4b10      	ldr	r3, [pc, #64]	; (8008010 <strtok+0x60>)
 8007fd0:	4810      	ldr	r0, [pc, #64]	; (8008014 <strtok+0x64>)
 8007fd2:	f000 f8eb 	bl	80081ac <__assert_func>
 8007fd6:	6004      	str	r4, [r0, #0]
 8007fd8:	6044      	str	r4, [r0, #4]
 8007fda:	6084      	str	r4, [r0, #8]
 8007fdc:	60c4      	str	r4, [r0, #12]
 8007fde:	6104      	str	r4, [r0, #16]
 8007fe0:	6144      	str	r4, [r0, #20]
 8007fe2:	6184      	str	r4, [r0, #24]
 8007fe4:	6284      	str	r4, [r0, #40]	; 0x28
 8007fe6:	62c4      	str	r4, [r0, #44]	; 0x2c
 8007fe8:	6304      	str	r4, [r0, #48]	; 0x30
 8007fea:	6344      	str	r4, [r0, #52]	; 0x34
 8007fec:	6384      	str	r4, [r0, #56]	; 0x38
 8007fee:	63c4      	str	r4, [r0, #60]	; 0x3c
 8007ff0:	6404      	str	r4, [r0, #64]	; 0x40
 8007ff2:	6444      	str	r4, [r0, #68]	; 0x44
 8007ff4:	6484      	str	r4, [r0, #72]	; 0x48
 8007ff6:	64c4      	str	r4, [r0, #76]	; 0x4c
 8007ff8:	7704      	strb	r4, [r0, #28]
 8007ffa:	6244      	str	r4, [r0, #36]	; 0x24
 8007ffc:	0031      	movs	r1, r6
 8007ffe:	0028      	movs	r0, r5
 8008000:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008002:	2301      	movs	r3, #1
 8008004:	f000 f808 	bl	8008018 <__strtok_r>
 8008008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800800a:	46c0      	nop			; (mov r8, r8)
 800800c:	2000000c 	.word	0x2000000c
 8008010:	0800b190 	.word	0x0800b190
 8008014:	0800b1a7 	.word	0x0800b1a7

08008018 <__strtok_r>:
 8008018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800801a:	2800      	cmp	r0, #0
 800801c:	d102      	bne.n	8008024 <__strtok_r+0xc>
 800801e:	6810      	ldr	r0, [r2, #0]
 8008020:	2800      	cmp	r0, #0
 8008022:	d013      	beq.n	800804c <__strtok_r+0x34>
 8008024:	0004      	movs	r4, r0
 8008026:	0020      	movs	r0, r4
 8008028:	000e      	movs	r6, r1
 800802a:	7805      	ldrb	r5, [r0, #0]
 800802c:	3401      	adds	r4, #1
 800802e:	7837      	ldrb	r7, [r6, #0]
 8008030:	2f00      	cmp	r7, #0
 8008032:	d104      	bne.n	800803e <__strtok_r+0x26>
 8008034:	2d00      	cmp	r5, #0
 8008036:	d10f      	bne.n	8008058 <__strtok_r+0x40>
 8008038:	0028      	movs	r0, r5
 800803a:	6015      	str	r5, [r2, #0]
 800803c:	e006      	b.n	800804c <__strtok_r+0x34>
 800803e:	3601      	adds	r6, #1
 8008040:	42bd      	cmp	r5, r7
 8008042:	d1f4      	bne.n	800802e <__strtok_r+0x16>
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1ee      	bne.n	8008026 <__strtok_r+0xe>
 8008048:	6014      	str	r4, [r2, #0]
 800804a:	7003      	strb	r3, [r0, #0]
 800804c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800804e:	002f      	movs	r7, r5
 8008050:	e00f      	b.n	8008072 <__strtok_r+0x5a>
 8008052:	3301      	adds	r3, #1
 8008054:	2e00      	cmp	r6, #0
 8008056:	d104      	bne.n	8008062 <__strtok_r+0x4a>
 8008058:	0023      	movs	r3, r4
 800805a:	3401      	adds	r4, #1
 800805c:	781d      	ldrb	r5, [r3, #0]
 800805e:	0027      	movs	r7, r4
 8008060:	000b      	movs	r3, r1
 8008062:	781e      	ldrb	r6, [r3, #0]
 8008064:	42b5      	cmp	r5, r6
 8008066:	d1f4      	bne.n	8008052 <__strtok_r+0x3a>
 8008068:	2d00      	cmp	r5, #0
 800806a:	d0f0      	beq.n	800804e <__strtok_r+0x36>
 800806c:	2300      	movs	r3, #0
 800806e:	3c01      	subs	r4, #1
 8008070:	7023      	strb	r3, [r4, #0]
 8008072:	6017      	str	r7, [r2, #0]
 8008074:	e7ea      	b.n	800804c <__strtok_r+0x34>
	...

08008078 <_strtol_l.constprop.0>:
 8008078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800807a:	b087      	sub	sp, #28
 800807c:	001e      	movs	r6, r3
 800807e:	9005      	str	r0, [sp, #20]
 8008080:	9101      	str	r1, [sp, #4]
 8008082:	9202      	str	r2, [sp, #8]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d045      	beq.n	8008114 <_strtol_l.constprop.0+0x9c>
 8008088:	000b      	movs	r3, r1
 800808a:	2e24      	cmp	r6, #36	; 0x24
 800808c:	d842      	bhi.n	8008114 <_strtol_l.constprop.0+0x9c>
 800808e:	4a3f      	ldr	r2, [pc, #252]	; (800818c <_strtol_l.constprop.0+0x114>)
 8008090:	2108      	movs	r1, #8
 8008092:	4694      	mov	ip, r2
 8008094:	001a      	movs	r2, r3
 8008096:	4660      	mov	r0, ip
 8008098:	7814      	ldrb	r4, [r2, #0]
 800809a:	3301      	adds	r3, #1
 800809c:	5d00      	ldrb	r0, [r0, r4]
 800809e:	001d      	movs	r5, r3
 80080a0:	0007      	movs	r7, r0
 80080a2:	400f      	ands	r7, r1
 80080a4:	4208      	tst	r0, r1
 80080a6:	d1f5      	bne.n	8008094 <_strtol_l.constprop.0+0x1c>
 80080a8:	2c2d      	cmp	r4, #45	; 0x2d
 80080aa:	d13a      	bne.n	8008122 <_strtol_l.constprop.0+0xaa>
 80080ac:	2701      	movs	r7, #1
 80080ae:	781c      	ldrb	r4, [r3, #0]
 80080b0:	1c95      	adds	r5, r2, #2
 80080b2:	2e00      	cmp	r6, #0
 80080b4:	d065      	beq.n	8008182 <_strtol_l.constprop.0+0x10a>
 80080b6:	2e10      	cmp	r6, #16
 80080b8:	d109      	bne.n	80080ce <_strtol_l.constprop.0+0x56>
 80080ba:	2c30      	cmp	r4, #48	; 0x30
 80080bc:	d107      	bne.n	80080ce <_strtol_l.constprop.0+0x56>
 80080be:	2220      	movs	r2, #32
 80080c0:	782b      	ldrb	r3, [r5, #0]
 80080c2:	4393      	bics	r3, r2
 80080c4:	2b58      	cmp	r3, #88	; 0x58
 80080c6:	d157      	bne.n	8008178 <_strtol_l.constprop.0+0x100>
 80080c8:	2610      	movs	r6, #16
 80080ca:	786c      	ldrb	r4, [r5, #1]
 80080cc:	3502      	adds	r5, #2
 80080ce:	4b30      	ldr	r3, [pc, #192]	; (8008190 <_strtol_l.constprop.0+0x118>)
 80080d0:	0031      	movs	r1, r6
 80080d2:	18fb      	adds	r3, r7, r3
 80080d4:	0018      	movs	r0, r3
 80080d6:	9303      	str	r3, [sp, #12]
 80080d8:	f7f8 f8b8 	bl	800024c <__aeabi_uidivmod>
 80080dc:	2300      	movs	r3, #0
 80080de:	2201      	movs	r2, #1
 80080e0:	4684      	mov	ip, r0
 80080e2:	0018      	movs	r0, r3
 80080e4:	9104      	str	r1, [sp, #16]
 80080e6:	4252      	negs	r2, r2
 80080e8:	0021      	movs	r1, r4
 80080ea:	3930      	subs	r1, #48	; 0x30
 80080ec:	2909      	cmp	r1, #9
 80080ee:	d81d      	bhi.n	800812c <_strtol_l.constprop.0+0xb4>
 80080f0:	000c      	movs	r4, r1
 80080f2:	42a6      	cmp	r6, r4
 80080f4:	dd28      	ble.n	8008148 <_strtol_l.constprop.0+0xd0>
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	db24      	blt.n	8008144 <_strtol_l.constprop.0+0xcc>
 80080fa:	0013      	movs	r3, r2
 80080fc:	4584      	cmp	ip, r0
 80080fe:	d306      	bcc.n	800810e <_strtol_l.constprop.0+0x96>
 8008100:	d102      	bne.n	8008108 <_strtol_l.constprop.0+0x90>
 8008102:	9904      	ldr	r1, [sp, #16]
 8008104:	42a1      	cmp	r1, r4
 8008106:	db02      	blt.n	800810e <_strtol_l.constprop.0+0x96>
 8008108:	2301      	movs	r3, #1
 800810a:	4370      	muls	r0, r6
 800810c:	1820      	adds	r0, r4, r0
 800810e:	782c      	ldrb	r4, [r5, #0]
 8008110:	3501      	adds	r5, #1
 8008112:	e7e9      	b.n	80080e8 <_strtol_l.constprop.0+0x70>
 8008114:	f7fe fada 	bl	80066cc <__errno>
 8008118:	2316      	movs	r3, #22
 800811a:	6003      	str	r3, [r0, #0]
 800811c:	2000      	movs	r0, #0
 800811e:	b007      	add	sp, #28
 8008120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008122:	2c2b      	cmp	r4, #43	; 0x2b
 8008124:	d1c5      	bne.n	80080b2 <_strtol_l.constprop.0+0x3a>
 8008126:	781c      	ldrb	r4, [r3, #0]
 8008128:	1c95      	adds	r5, r2, #2
 800812a:	e7c2      	b.n	80080b2 <_strtol_l.constprop.0+0x3a>
 800812c:	0021      	movs	r1, r4
 800812e:	3941      	subs	r1, #65	; 0x41
 8008130:	2919      	cmp	r1, #25
 8008132:	d801      	bhi.n	8008138 <_strtol_l.constprop.0+0xc0>
 8008134:	3c37      	subs	r4, #55	; 0x37
 8008136:	e7dc      	b.n	80080f2 <_strtol_l.constprop.0+0x7a>
 8008138:	0021      	movs	r1, r4
 800813a:	3961      	subs	r1, #97	; 0x61
 800813c:	2919      	cmp	r1, #25
 800813e:	d803      	bhi.n	8008148 <_strtol_l.constprop.0+0xd0>
 8008140:	3c57      	subs	r4, #87	; 0x57
 8008142:	e7d6      	b.n	80080f2 <_strtol_l.constprop.0+0x7a>
 8008144:	0013      	movs	r3, r2
 8008146:	e7e2      	b.n	800810e <_strtol_l.constprop.0+0x96>
 8008148:	2b00      	cmp	r3, #0
 800814a:	da09      	bge.n	8008160 <_strtol_l.constprop.0+0xe8>
 800814c:	2322      	movs	r3, #34	; 0x22
 800814e:	9a05      	ldr	r2, [sp, #20]
 8008150:	9803      	ldr	r0, [sp, #12]
 8008152:	6013      	str	r3, [r2, #0]
 8008154:	9b02      	ldr	r3, [sp, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d0e1      	beq.n	800811e <_strtol_l.constprop.0+0xa6>
 800815a:	1e6b      	subs	r3, r5, #1
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	e007      	b.n	8008170 <_strtol_l.constprop.0+0xf8>
 8008160:	2f00      	cmp	r7, #0
 8008162:	d000      	beq.n	8008166 <_strtol_l.constprop.0+0xee>
 8008164:	4240      	negs	r0, r0
 8008166:	9a02      	ldr	r2, [sp, #8]
 8008168:	2a00      	cmp	r2, #0
 800816a:	d0d8      	beq.n	800811e <_strtol_l.constprop.0+0xa6>
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1f4      	bne.n	800815a <_strtol_l.constprop.0+0xe2>
 8008170:	9b02      	ldr	r3, [sp, #8]
 8008172:	9a01      	ldr	r2, [sp, #4]
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	e7d2      	b.n	800811e <_strtol_l.constprop.0+0xa6>
 8008178:	2430      	movs	r4, #48	; 0x30
 800817a:	2e00      	cmp	r6, #0
 800817c:	d1a7      	bne.n	80080ce <_strtol_l.constprop.0+0x56>
 800817e:	3608      	adds	r6, #8
 8008180:	e7a5      	b.n	80080ce <_strtol_l.constprop.0+0x56>
 8008182:	2c30      	cmp	r4, #48	; 0x30
 8008184:	d09b      	beq.n	80080be <_strtol_l.constprop.0+0x46>
 8008186:	260a      	movs	r6, #10
 8008188:	e7a1      	b.n	80080ce <_strtol_l.constprop.0+0x56>
 800818a:	46c0      	nop			; (mov r8, r8)
 800818c:	0800b241 	.word	0x0800b241
 8008190:	7fffffff 	.word	0x7fffffff

08008194 <strtol>:
 8008194:	b510      	push	{r4, lr}
 8008196:	0013      	movs	r3, r2
 8008198:	000a      	movs	r2, r1
 800819a:	0001      	movs	r1, r0
 800819c:	4802      	ldr	r0, [pc, #8]	; (80081a8 <strtol+0x14>)
 800819e:	6800      	ldr	r0, [r0, #0]
 80081a0:	f7ff ff6a 	bl	8008078 <_strtol_l.constprop.0>
 80081a4:	bd10      	pop	{r4, pc}
 80081a6:	46c0      	nop			; (mov r8, r8)
 80081a8:	2000000c 	.word	0x2000000c

080081ac <__assert_func>:
 80081ac:	b530      	push	{r4, r5, lr}
 80081ae:	0014      	movs	r4, r2
 80081b0:	001a      	movs	r2, r3
 80081b2:	4b09      	ldr	r3, [pc, #36]	; (80081d8 <__assert_func+0x2c>)
 80081b4:	0005      	movs	r5, r0
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	b085      	sub	sp, #20
 80081ba:	68d8      	ldr	r0, [r3, #12]
 80081bc:	4b07      	ldr	r3, [pc, #28]	; (80081dc <__assert_func+0x30>)
 80081be:	2c00      	cmp	r4, #0
 80081c0:	d101      	bne.n	80081c6 <__assert_func+0x1a>
 80081c2:	4b07      	ldr	r3, [pc, #28]	; (80081e0 <__assert_func+0x34>)
 80081c4:	001c      	movs	r4, r3
 80081c6:	9301      	str	r3, [sp, #4]
 80081c8:	9100      	str	r1, [sp, #0]
 80081ca:	002b      	movs	r3, r5
 80081cc:	4905      	ldr	r1, [pc, #20]	; (80081e4 <__assert_func+0x38>)
 80081ce:	9402      	str	r4, [sp, #8]
 80081d0:	f000 feb0 	bl	8008f34 <fiprintf>
 80081d4:	f002 fb16 	bl	800a804 <abort>
 80081d8:	2000000c 	.word	0x2000000c
 80081dc:	0800b204 	.word	0x0800b204
 80081e0:	0800b23f 	.word	0x0800b23f
 80081e4:	0800b211 	.word	0x0800b211

080081e8 <quorem>:
 80081e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ea:	0006      	movs	r6, r0
 80081ec:	690b      	ldr	r3, [r1, #16]
 80081ee:	6932      	ldr	r2, [r6, #16]
 80081f0:	b087      	sub	sp, #28
 80081f2:	2000      	movs	r0, #0
 80081f4:	9103      	str	r1, [sp, #12]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	db65      	blt.n	80082c6 <quorem+0xde>
 80081fa:	3b01      	subs	r3, #1
 80081fc:	009c      	lsls	r4, r3, #2
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	000b      	movs	r3, r1
 8008202:	3314      	adds	r3, #20
 8008204:	9305      	str	r3, [sp, #20]
 8008206:	191b      	adds	r3, r3, r4
 8008208:	9304      	str	r3, [sp, #16]
 800820a:	0033      	movs	r3, r6
 800820c:	3314      	adds	r3, #20
 800820e:	9302      	str	r3, [sp, #8]
 8008210:	191c      	adds	r4, r3, r4
 8008212:	9b04      	ldr	r3, [sp, #16]
 8008214:	6827      	ldr	r7, [r4, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	0038      	movs	r0, r7
 800821a:	1c5d      	adds	r5, r3, #1
 800821c:	0029      	movs	r1, r5
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	f7f7 ff8e 	bl	8000140 <__udivsi3>
 8008224:	9001      	str	r0, [sp, #4]
 8008226:	42af      	cmp	r7, r5
 8008228:	d324      	bcc.n	8008274 <quorem+0x8c>
 800822a:	2500      	movs	r5, #0
 800822c:	46ac      	mov	ip, r5
 800822e:	9802      	ldr	r0, [sp, #8]
 8008230:	9f05      	ldr	r7, [sp, #20]
 8008232:	cf08      	ldmia	r7!, {r3}
 8008234:	9a01      	ldr	r2, [sp, #4]
 8008236:	b299      	uxth	r1, r3
 8008238:	4351      	muls	r1, r2
 800823a:	0c1b      	lsrs	r3, r3, #16
 800823c:	4353      	muls	r3, r2
 800823e:	1949      	adds	r1, r1, r5
 8008240:	0c0a      	lsrs	r2, r1, #16
 8008242:	189b      	adds	r3, r3, r2
 8008244:	6802      	ldr	r2, [r0, #0]
 8008246:	b289      	uxth	r1, r1
 8008248:	b292      	uxth	r2, r2
 800824a:	4462      	add	r2, ip
 800824c:	1a52      	subs	r2, r2, r1
 800824e:	6801      	ldr	r1, [r0, #0]
 8008250:	0c1d      	lsrs	r5, r3, #16
 8008252:	0c09      	lsrs	r1, r1, #16
 8008254:	b29b      	uxth	r3, r3
 8008256:	1acb      	subs	r3, r1, r3
 8008258:	1411      	asrs	r1, r2, #16
 800825a:	185b      	adds	r3, r3, r1
 800825c:	1419      	asrs	r1, r3, #16
 800825e:	b292      	uxth	r2, r2
 8008260:	041b      	lsls	r3, r3, #16
 8008262:	431a      	orrs	r2, r3
 8008264:	9b04      	ldr	r3, [sp, #16]
 8008266:	468c      	mov	ip, r1
 8008268:	c004      	stmia	r0!, {r2}
 800826a:	42bb      	cmp	r3, r7
 800826c:	d2e1      	bcs.n	8008232 <quorem+0x4a>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d030      	beq.n	80082d6 <quorem+0xee>
 8008274:	0030      	movs	r0, r6
 8008276:	9903      	ldr	r1, [sp, #12]
 8008278:	f001 fce2 	bl	8009c40 <__mcmp>
 800827c:	2800      	cmp	r0, #0
 800827e:	db21      	blt.n	80082c4 <quorem+0xdc>
 8008280:	0030      	movs	r0, r6
 8008282:	2400      	movs	r4, #0
 8008284:	9b01      	ldr	r3, [sp, #4]
 8008286:	9903      	ldr	r1, [sp, #12]
 8008288:	3301      	adds	r3, #1
 800828a:	9301      	str	r3, [sp, #4]
 800828c:	3014      	adds	r0, #20
 800828e:	3114      	adds	r1, #20
 8008290:	6803      	ldr	r3, [r0, #0]
 8008292:	c920      	ldmia	r1!, {r5}
 8008294:	b29a      	uxth	r2, r3
 8008296:	1914      	adds	r4, r2, r4
 8008298:	b2aa      	uxth	r2, r5
 800829a:	1aa2      	subs	r2, r4, r2
 800829c:	0c1b      	lsrs	r3, r3, #16
 800829e:	0c2d      	lsrs	r5, r5, #16
 80082a0:	1414      	asrs	r4, r2, #16
 80082a2:	1b5b      	subs	r3, r3, r5
 80082a4:	191b      	adds	r3, r3, r4
 80082a6:	141c      	asrs	r4, r3, #16
 80082a8:	b292      	uxth	r2, r2
 80082aa:	041b      	lsls	r3, r3, #16
 80082ac:	4313      	orrs	r3, r2
 80082ae:	c008      	stmia	r0!, {r3}
 80082b0:	9b04      	ldr	r3, [sp, #16]
 80082b2:	428b      	cmp	r3, r1
 80082b4:	d2ec      	bcs.n	8008290 <quorem+0xa8>
 80082b6:	9b00      	ldr	r3, [sp, #0]
 80082b8:	9a02      	ldr	r2, [sp, #8]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	18d3      	adds	r3, r2, r3
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	2a00      	cmp	r2, #0
 80082c2:	d015      	beq.n	80082f0 <quorem+0x108>
 80082c4:	9801      	ldr	r0, [sp, #4]
 80082c6:	b007      	add	sp, #28
 80082c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d106      	bne.n	80082de <quorem+0xf6>
 80082d0:	9b00      	ldr	r3, [sp, #0]
 80082d2:	3b01      	subs	r3, #1
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	9b02      	ldr	r3, [sp, #8]
 80082d8:	3c04      	subs	r4, #4
 80082da:	42a3      	cmp	r3, r4
 80082dc:	d3f5      	bcc.n	80082ca <quorem+0xe2>
 80082de:	9b00      	ldr	r3, [sp, #0]
 80082e0:	6133      	str	r3, [r6, #16]
 80082e2:	e7c7      	b.n	8008274 <quorem+0x8c>
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	2a00      	cmp	r2, #0
 80082e8:	d106      	bne.n	80082f8 <quorem+0x110>
 80082ea:	9a00      	ldr	r2, [sp, #0]
 80082ec:	3a01      	subs	r2, #1
 80082ee:	9200      	str	r2, [sp, #0]
 80082f0:	9a02      	ldr	r2, [sp, #8]
 80082f2:	3b04      	subs	r3, #4
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d3f5      	bcc.n	80082e4 <quorem+0xfc>
 80082f8:	9b00      	ldr	r3, [sp, #0]
 80082fa:	6133      	str	r3, [r6, #16]
 80082fc:	e7e2      	b.n	80082c4 <quorem+0xdc>
	...

08008300 <_dtoa_r>:
 8008300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008302:	b09d      	sub	sp, #116	; 0x74
 8008304:	9202      	str	r2, [sp, #8]
 8008306:	9303      	str	r3, [sp, #12]
 8008308:	9b02      	ldr	r3, [sp, #8]
 800830a:	9c03      	ldr	r4, [sp, #12]
 800830c:	9308      	str	r3, [sp, #32]
 800830e:	9409      	str	r4, [sp, #36]	; 0x24
 8008310:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008312:	0007      	movs	r7, r0
 8008314:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008316:	2c00      	cmp	r4, #0
 8008318:	d10e      	bne.n	8008338 <_dtoa_r+0x38>
 800831a:	2010      	movs	r0, #16
 800831c:	f7fe fa00 	bl	8006720 <malloc>
 8008320:	1e02      	subs	r2, r0, #0
 8008322:	6278      	str	r0, [r7, #36]	; 0x24
 8008324:	d104      	bne.n	8008330 <_dtoa_r+0x30>
 8008326:	21ea      	movs	r1, #234	; 0xea
 8008328:	4bc7      	ldr	r3, [pc, #796]	; (8008648 <_dtoa_r+0x348>)
 800832a:	48c8      	ldr	r0, [pc, #800]	; (800864c <_dtoa_r+0x34c>)
 800832c:	f7ff ff3e 	bl	80081ac <__assert_func>
 8008330:	6044      	str	r4, [r0, #4]
 8008332:	6084      	str	r4, [r0, #8]
 8008334:	6004      	str	r4, [r0, #0]
 8008336:	60c4      	str	r4, [r0, #12]
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	6819      	ldr	r1, [r3, #0]
 800833c:	2900      	cmp	r1, #0
 800833e:	d00a      	beq.n	8008356 <_dtoa_r+0x56>
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	2301      	movs	r3, #1
 8008344:	4093      	lsls	r3, r2
 8008346:	604a      	str	r2, [r1, #4]
 8008348:	608b      	str	r3, [r1, #8]
 800834a:	0038      	movs	r0, r7
 800834c:	f001 f9ec 	bl	8009728 <_Bfree>
 8008350:	2200      	movs	r2, #0
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	9b03      	ldr	r3, [sp, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	da20      	bge.n	800839e <_dtoa_r+0x9e>
 800835c:	2301      	movs	r3, #1
 800835e:	602b      	str	r3, [r5, #0]
 8008360:	9b03      	ldr	r3, [sp, #12]
 8008362:	005b      	lsls	r3, r3, #1
 8008364:	085b      	lsrs	r3, r3, #1
 8008366:	9309      	str	r3, [sp, #36]	; 0x24
 8008368:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800836a:	4bb9      	ldr	r3, [pc, #740]	; (8008650 <_dtoa_r+0x350>)
 800836c:	4ab8      	ldr	r2, [pc, #736]	; (8008650 <_dtoa_r+0x350>)
 800836e:	402b      	ands	r3, r5
 8008370:	4293      	cmp	r3, r2
 8008372:	d117      	bne.n	80083a4 <_dtoa_r+0xa4>
 8008374:	4bb7      	ldr	r3, [pc, #732]	; (8008654 <_dtoa_r+0x354>)
 8008376:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008378:	0328      	lsls	r0, r5, #12
 800837a:	6013      	str	r3, [r2, #0]
 800837c:	9b02      	ldr	r3, [sp, #8]
 800837e:	0b00      	lsrs	r0, r0, #12
 8008380:	4318      	orrs	r0, r3
 8008382:	d101      	bne.n	8008388 <_dtoa_r+0x88>
 8008384:	f000 fdbf 	bl	8008f06 <_dtoa_r+0xc06>
 8008388:	48b3      	ldr	r0, [pc, #716]	; (8008658 <_dtoa_r+0x358>)
 800838a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800838c:	9006      	str	r0, [sp, #24]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d002      	beq.n	8008398 <_dtoa_r+0x98>
 8008392:	4bb2      	ldr	r3, [pc, #712]	; (800865c <_dtoa_r+0x35c>)
 8008394:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008396:	6013      	str	r3, [r2, #0]
 8008398:	9806      	ldr	r0, [sp, #24]
 800839a:	b01d      	add	sp, #116	; 0x74
 800839c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800839e:	2300      	movs	r3, #0
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	e7e1      	b.n	8008368 <_dtoa_r+0x68>
 80083a4:	9b08      	ldr	r3, [sp, #32]
 80083a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80083a8:	9312      	str	r3, [sp, #72]	; 0x48
 80083aa:	9413      	str	r4, [sp, #76]	; 0x4c
 80083ac:	9812      	ldr	r0, [sp, #72]	; 0x48
 80083ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80083b0:	2200      	movs	r2, #0
 80083b2:	2300      	movs	r3, #0
 80083b4:	f7f8 f84a 	bl	800044c <__aeabi_dcmpeq>
 80083b8:	1e04      	subs	r4, r0, #0
 80083ba:	d009      	beq.n	80083d0 <_dtoa_r+0xd0>
 80083bc:	2301      	movs	r3, #1
 80083be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80083c0:	6013      	str	r3, [r2, #0]
 80083c2:	4ba7      	ldr	r3, [pc, #668]	; (8008660 <_dtoa_r+0x360>)
 80083c4:	9306      	str	r3, [sp, #24]
 80083c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0e5      	beq.n	8008398 <_dtoa_r+0x98>
 80083cc:	4ba5      	ldr	r3, [pc, #660]	; (8008664 <_dtoa_r+0x364>)
 80083ce:	e7e1      	b.n	8008394 <_dtoa_r+0x94>
 80083d0:	ab1a      	add	r3, sp, #104	; 0x68
 80083d2:	9301      	str	r3, [sp, #4]
 80083d4:	ab1b      	add	r3, sp, #108	; 0x6c
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	0038      	movs	r0, r7
 80083da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083de:	f001 fd57 	bl	8009e90 <__d2b>
 80083e2:	006e      	lsls	r6, r5, #1
 80083e4:	9005      	str	r0, [sp, #20]
 80083e6:	0d76      	lsrs	r6, r6, #21
 80083e8:	d100      	bne.n	80083ec <_dtoa_r+0xec>
 80083ea:	e07c      	b.n	80084e6 <_dtoa_r+0x1e6>
 80083ec:	9812      	ldr	r0, [sp, #72]	; 0x48
 80083ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80083f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083f2:	4a9d      	ldr	r2, [pc, #628]	; (8008668 <_dtoa_r+0x368>)
 80083f4:	031b      	lsls	r3, r3, #12
 80083f6:	0b1b      	lsrs	r3, r3, #12
 80083f8:	431a      	orrs	r2, r3
 80083fa:	0011      	movs	r1, r2
 80083fc:	4b9b      	ldr	r3, [pc, #620]	; (800866c <_dtoa_r+0x36c>)
 80083fe:	9418      	str	r4, [sp, #96]	; 0x60
 8008400:	18f6      	adds	r6, r6, r3
 8008402:	2200      	movs	r2, #0
 8008404:	4b9a      	ldr	r3, [pc, #616]	; (8008670 <_dtoa_r+0x370>)
 8008406:	f7f9 fe6d 	bl	80020e4 <__aeabi_dsub>
 800840a:	4a9a      	ldr	r2, [pc, #616]	; (8008674 <_dtoa_r+0x374>)
 800840c:	4b9a      	ldr	r3, [pc, #616]	; (8008678 <_dtoa_r+0x378>)
 800840e:	f7f9 fbfd 	bl	8001c0c <__aeabi_dmul>
 8008412:	4a9a      	ldr	r2, [pc, #616]	; (800867c <_dtoa_r+0x37c>)
 8008414:	4b9a      	ldr	r3, [pc, #616]	; (8008680 <_dtoa_r+0x380>)
 8008416:	f7f8 fcbb 	bl	8000d90 <__aeabi_dadd>
 800841a:	0004      	movs	r4, r0
 800841c:	0030      	movs	r0, r6
 800841e:	000d      	movs	r5, r1
 8008420:	f7fa fa46 	bl	80028b0 <__aeabi_i2d>
 8008424:	4a97      	ldr	r2, [pc, #604]	; (8008684 <_dtoa_r+0x384>)
 8008426:	4b98      	ldr	r3, [pc, #608]	; (8008688 <_dtoa_r+0x388>)
 8008428:	f7f9 fbf0 	bl	8001c0c <__aeabi_dmul>
 800842c:	0002      	movs	r2, r0
 800842e:	000b      	movs	r3, r1
 8008430:	0020      	movs	r0, r4
 8008432:	0029      	movs	r1, r5
 8008434:	f7f8 fcac 	bl	8000d90 <__aeabi_dadd>
 8008438:	0004      	movs	r4, r0
 800843a:	000d      	movs	r5, r1
 800843c:	f7fa fa02 	bl	8002844 <__aeabi_d2iz>
 8008440:	2200      	movs	r2, #0
 8008442:	9002      	str	r0, [sp, #8]
 8008444:	2300      	movs	r3, #0
 8008446:	0020      	movs	r0, r4
 8008448:	0029      	movs	r1, r5
 800844a:	f7f8 f805 	bl	8000458 <__aeabi_dcmplt>
 800844e:	2800      	cmp	r0, #0
 8008450:	d00b      	beq.n	800846a <_dtoa_r+0x16a>
 8008452:	9802      	ldr	r0, [sp, #8]
 8008454:	f7fa fa2c 	bl	80028b0 <__aeabi_i2d>
 8008458:	002b      	movs	r3, r5
 800845a:	0022      	movs	r2, r4
 800845c:	f7f7 fff6 	bl	800044c <__aeabi_dcmpeq>
 8008460:	4243      	negs	r3, r0
 8008462:	4158      	adcs	r0, r3
 8008464:	9b02      	ldr	r3, [sp, #8]
 8008466:	1a1b      	subs	r3, r3, r0
 8008468:	9302      	str	r3, [sp, #8]
 800846a:	2301      	movs	r3, #1
 800846c:	9316      	str	r3, [sp, #88]	; 0x58
 800846e:	9b02      	ldr	r3, [sp, #8]
 8008470:	2b16      	cmp	r3, #22
 8008472:	d80f      	bhi.n	8008494 <_dtoa_r+0x194>
 8008474:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008476:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008478:	00da      	lsls	r2, r3, #3
 800847a:	4b84      	ldr	r3, [pc, #528]	; (800868c <_dtoa_r+0x38c>)
 800847c:	189b      	adds	r3, r3, r2
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f7f7 ffe9 	bl	8000458 <__aeabi_dcmplt>
 8008486:	2800      	cmp	r0, #0
 8008488:	d049      	beq.n	800851e <_dtoa_r+0x21e>
 800848a:	9b02      	ldr	r3, [sp, #8]
 800848c:	3b01      	subs	r3, #1
 800848e:	9302      	str	r3, [sp, #8]
 8008490:	2300      	movs	r3, #0
 8008492:	9316      	str	r3, [sp, #88]	; 0x58
 8008494:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008496:	1b9e      	subs	r6, r3, r6
 8008498:	2300      	movs	r3, #0
 800849a:	930a      	str	r3, [sp, #40]	; 0x28
 800849c:	0033      	movs	r3, r6
 800849e:	3b01      	subs	r3, #1
 80084a0:	930d      	str	r3, [sp, #52]	; 0x34
 80084a2:	d504      	bpl.n	80084ae <_dtoa_r+0x1ae>
 80084a4:	2301      	movs	r3, #1
 80084a6:	1b9b      	subs	r3, r3, r6
 80084a8:	930a      	str	r3, [sp, #40]	; 0x28
 80084aa:	2300      	movs	r3, #0
 80084ac:	930d      	str	r3, [sp, #52]	; 0x34
 80084ae:	9b02      	ldr	r3, [sp, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	db36      	blt.n	8008522 <_dtoa_r+0x222>
 80084b4:	9a02      	ldr	r2, [sp, #8]
 80084b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084b8:	4694      	mov	ip, r2
 80084ba:	4463      	add	r3, ip
 80084bc:	930d      	str	r3, [sp, #52]	; 0x34
 80084be:	2300      	movs	r3, #0
 80084c0:	9215      	str	r2, [sp, #84]	; 0x54
 80084c2:	930e      	str	r3, [sp, #56]	; 0x38
 80084c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084c6:	2401      	movs	r4, #1
 80084c8:	2b09      	cmp	r3, #9
 80084ca:	d864      	bhi.n	8008596 <_dtoa_r+0x296>
 80084cc:	2b05      	cmp	r3, #5
 80084ce:	dd02      	ble.n	80084d6 <_dtoa_r+0x1d6>
 80084d0:	2400      	movs	r4, #0
 80084d2:	3b04      	subs	r3, #4
 80084d4:	9322      	str	r3, [sp, #136]	; 0x88
 80084d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084d8:	1e98      	subs	r0, r3, #2
 80084da:	2803      	cmp	r0, #3
 80084dc:	d864      	bhi.n	80085a8 <_dtoa_r+0x2a8>
 80084de:	f7f7 fe1b 	bl	8000118 <__gnu_thumb1_case_uqi>
 80084e2:	3829      	.short	0x3829
 80084e4:	5836      	.short	0x5836
 80084e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80084e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80084ea:	189e      	adds	r6, r3, r2
 80084ec:	4b68      	ldr	r3, [pc, #416]	; (8008690 <_dtoa_r+0x390>)
 80084ee:	18f2      	adds	r2, r6, r3
 80084f0:	2a20      	cmp	r2, #32
 80084f2:	dd0f      	ble.n	8008514 <_dtoa_r+0x214>
 80084f4:	2340      	movs	r3, #64	; 0x40
 80084f6:	1a9b      	subs	r3, r3, r2
 80084f8:	409d      	lsls	r5, r3
 80084fa:	4b66      	ldr	r3, [pc, #408]	; (8008694 <_dtoa_r+0x394>)
 80084fc:	9802      	ldr	r0, [sp, #8]
 80084fe:	18f3      	adds	r3, r6, r3
 8008500:	40d8      	lsrs	r0, r3
 8008502:	4328      	orrs	r0, r5
 8008504:	f7fa fa04 	bl	8002910 <__aeabi_ui2d>
 8008508:	2301      	movs	r3, #1
 800850a:	4c63      	ldr	r4, [pc, #396]	; (8008698 <_dtoa_r+0x398>)
 800850c:	3e01      	subs	r6, #1
 800850e:	1909      	adds	r1, r1, r4
 8008510:	9318      	str	r3, [sp, #96]	; 0x60
 8008512:	e776      	b.n	8008402 <_dtoa_r+0x102>
 8008514:	2320      	movs	r3, #32
 8008516:	9802      	ldr	r0, [sp, #8]
 8008518:	1a9b      	subs	r3, r3, r2
 800851a:	4098      	lsls	r0, r3
 800851c:	e7f2      	b.n	8008504 <_dtoa_r+0x204>
 800851e:	9016      	str	r0, [sp, #88]	; 0x58
 8008520:	e7b8      	b.n	8008494 <_dtoa_r+0x194>
 8008522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008524:	9a02      	ldr	r2, [sp, #8]
 8008526:	1a9b      	subs	r3, r3, r2
 8008528:	930a      	str	r3, [sp, #40]	; 0x28
 800852a:	4253      	negs	r3, r2
 800852c:	930e      	str	r3, [sp, #56]	; 0x38
 800852e:	2300      	movs	r3, #0
 8008530:	9315      	str	r3, [sp, #84]	; 0x54
 8008532:	e7c7      	b.n	80084c4 <_dtoa_r+0x1c4>
 8008534:	2300      	movs	r3, #0
 8008536:	930f      	str	r3, [sp, #60]	; 0x3c
 8008538:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800853a:	930c      	str	r3, [sp, #48]	; 0x30
 800853c:	9307      	str	r3, [sp, #28]
 800853e:	2b00      	cmp	r3, #0
 8008540:	dc13      	bgt.n	800856a <_dtoa_r+0x26a>
 8008542:	2301      	movs	r3, #1
 8008544:	001a      	movs	r2, r3
 8008546:	930c      	str	r3, [sp, #48]	; 0x30
 8008548:	9307      	str	r3, [sp, #28]
 800854a:	9223      	str	r2, [sp, #140]	; 0x8c
 800854c:	e00d      	b.n	800856a <_dtoa_r+0x26a>
 800854e:	2301      	movs	r3, #1
 8008550:	e7f1      	b.n	8008536 <_dtoa_r+0x236>
 8008552:	2300      	movs	r3, #0
 8008554:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008556:	930f      	str	r3, [sp, #60]	; 0x3c
 8008558:	4694      	mov	ip, r2
 800855a:	9b02      	ldr	r3, [sp, #8]
 800855c:	4463      	add	r3, ip
 800855e:	930c      	str	r3, [sp, #48]	; 0x30
 8008560:	3301      	adds	r3, #1
 8008562:	9307      	str	r3, [sp, #28]
 8008564:	2b00      	cmp	r3, #0
 8008566:	dc00      	bgt.n	800856a <_dtoa_r+0x26a>
 8008568:	2301      	movs	r3, #1
 800856a:	2200      	movs	r2, #0
 800856c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800856e:	6042      	str	r2, [r0, #4]
 8008570:	3204      	adds	r2, #4
 8008572:	0015      	movs	r5, r2
 8008574:	3514      	adds	r5, #20
 8008576:	6841      	ldr	r1, [r0, #4]
 8008578:	429d      	cmp	r5, r3
 800857a:	d919      	bls.n	80085b0 <_dtoa_r+0x2b0>
 800857c:	0038      	movs	r0, r7
 800857e:	f001 f88f 	bl	80096a0 <_Balloc>
 8008582:	9006      	str	r0, [sp, #24]
 8008584:	2800      	cmp	r0, #0
 8008586:	d117      	bne.n	80085b8 <_dtoa_r+0x2b8>
 8008588:	21d5      	movs	r1, #213	; 0xd5
 800858a:	0002      	movs	r2, r0
 800858c:	4b43      	ldr	r3, [pc, #268]	; (800869c <_dtoa_r+0x39c>)
 800858e:	0049      	lsls	r1, r1, #1
 8008590:	e6cb      	b.n	800832a <_dtoa_r+0x2a>
 8008592:	2301      	movs	r3, #1
 8008594:	e7de      	b.n	8008554 <_dtoa_r+0x254>
 8008596:	2300      	movs	r3, #0
 8008598:	940f      	str	r4, [sp, #60]	; 0x3c
 800859a:	9322      	str	r3, [sp, #136]	; 0x88
 800859c:	3b01      	subs	r3, #1
 800859e:	930c      	str	r3, [sp, #48]	; 0x30
 80085a0:	9307      	str	r3, [sp, #28]
 80085a2:	2200      	movs	r2, #0
 80085a4:	3313      	adds	r3, #19
 80085a6:	e7d0      	b.n	800854a <_dtoa_r+0x24a>
 80085a8:	2301      	movs	r3, #1
 80085aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80085ac:	3b02      	subs	r3, #2
 80085ae:	e7f6      	b.n	800859e <_dtoa_r+0x29e>
 80085b0:	3101      	adds	r1, #1
 80085b2:	6041      	str	r1, [r0, #4]
 80085b4:	0052      	lsls	r2, r2, #1
 80085b6:	e7dc      	b.n	8008572 <_dtoa_r+0x272>
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	9a06      	ldr	r2, [sp, #24]
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	9b07      	ldr	r3, [sp, #28]
 80085c0:	2b0e      	cmp	r3, #14
 80085c2:	d900      	bls.n	80085c6 <_dtoa_r+0x2c6>
 80085c4:	e0eb      	b.n	800879e <_dtoa_r+0x49e>
 80085c6:	2c00      	cmp	r4, #0
 80085c8:	d100      	bne.n	80085cc <_dtoa_r+0x2cc>
 80085ca:	e0e8      	b.n	800879e <_dtoa_r+0x49e>
 80085cc:	9b02      	ldr	r3, [sp, #8]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	dd68      	ble.n	80086a4 <_dtoa_r+0x3a4>
 80085d2:	001a      	movs	r2, r3
 80085d4:	210f      	movs	r1, #15
 80085d6:	4b2d      	ldr	r3, [pc, #180]	; (800868c <_dtoa_r+0x38c>)
 80085d8:	400a      	ands	r2, r1
 80085da:	00d2      	lsls	r2, r2, #3
 80085dc:	189b      	adds	r3, r3, r2
 80085de:	681d      	ldr	r5, [r3, #0]
 80085e0:	685e      	ldr	r6, [r3, #4]
 80085e2:	9b02      	ldr	r3, [sp, #8]
 80085e4:	111c      	asrs	r4, r3, #4
 80085e6:	2302      	movs	r3, #2
 80085e8:	9310      	str	r3, [sp, #64]	; 0x40
 80085ea:	9b02      	ldr	r3, [sp, #8]
 80085ec:	05db      	lsls	r3, r3, #23
 80085ee:	d50b      	bpl.n	8008608 <_dtoa_r+0x308>
 80085f0:	4b2b      	ldr	r3, [pc, #172]	; (80086a0 <_dtoa_r+0x3a0>)
 80085f2:	400c      	ands	r4, r1
 80085f4:	6a1a      	ldr	r2, [r3, #32]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80085fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80085fc:	f7f8 ff04 	bl	8001408 <__aeabi_ddiv>
 8008600:	2303      	movs	r3, #3
 8008602:	9008      	str	r0, [sp, #32]
 8008604:	9109      	str	r1, [sp, #36]	; 0x24
 8008606:	9310      	str	r3, [sp, #64]	; 0x40
 8008608:	4b25      	ldr	r3, [pc, #148]	; (80086a0 <_dtoa_r+0x3a0>)
 800860a:	9314      	str	r3, [sp, #80]	; 0x50
 800860c:	2c00      	cmp	r4, #0
 800860e:	d108      	bne.n	8008622 <_dtoa_r+0x322>
 8008610:	9808      	ldr	r0, [sp, #32]
 8008612:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008614:	002a      	movs	r2, r5
 8008616:	0033      	movs	r3, r6
 8008618:	f7f8 fef6 	bl	8001408 <__aeabi_ddiv>
 800861c:	9008      	str	r0, [sp, #32]
 800861e:	9109      	str	r1, [sp, #36]	; 0x24
 8008620:	e05c      	b.n	80086dc <_dtoa_r+0x3dc>
 8008622:	2301      	movs	r3, #1
 8008624:	421c      	tst	r4, r3
 8008626:	d00b      	beq.n	8008640 <_dtoa_r+0x340>
 8008628:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800862a:	0028      	movs	r0, r5
 800862c:	3301      	adds	r3, #1
 800862e:	9310      	str	r3, [sp, #64]	; 0x40
 8008630:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008632:	0031      	movs	r1, r6
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f7f9 fae8 	bl	8001c0c <__aeabi_dmul>
 800863c:	0005      	movs	r5, r0
 800863e:	000e      	movs	r6, r1
 8008640:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008642:	1064      	asrs	r4, r4, #1
 8008644:	3308      	adds	r3, #8
 8008646:	e7e0      	b.n	800860a <_dtoa_r+0x30a>
 8008648:	0800b190 	.word	0x0800b190
 800864c:	0800b34e 	.word	0x0800b34e
 8008650:	7ff00000 	.word	0x7ff00000
 8008654:	0000270f 	.word	0x0000270f
 8008658:	0800b34a 	.word	0x0800b34a
 800865c:	0800b34d 	.word	0x0800b34d
 8008660:	0800b11c 	.word	0x0800b11c
 8008664:	0800b11d 	.word	0x0800b11d
 8008668:	3ff00000 	.word	0x3ff00000
 800866c:	fffffc01 	.word	0xfffffc01
 8008670:	3ff80000 	.word	0x3ff80000
 8008674:	636f4361 	.word	0x636f4361
 8008678:	3fd287a7 	.word	0x3fd287a7
 800867c:	8b60c8b3 	.word	0x8b60c8b3
 8008680:	3fc68a28 	.word	0x3fc68a28
 8008684:	509f79fb 	.word	0x509f79fb
 8008688:	3fd34413 	.word	0x3fd34413
 800868c:	0800b4b8 	.word	0x0800b4b8
 8008690:	00000432 	.word	0x00000432
 8008694:	00000412 	.word	0x00000412
 8008698:	fe100000 	.word	0xfe100000
 800869c:	0800b3a9 	.word	0x0800b3a9
 80086a0:	0800b490 	.word	0x0800b490
 80086a4:	2302      	movs	r3, #2
 80086a6:	9310      	str	r3, [sp, #64]	; 0x40
 80086a8:	9b02      	ldr	r3, [sp, #8]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d016      	beq.n	80086dc <_dtoa_r+0x3dc>
 80086ae:	9812      	ldr	r0, [sp, #72]	; 0x48
 80086b0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80086b2:	425c      	negs	r4, r3
 80086b4:	230f      	movs	r3, #15
 80086b6:	4ab6      	ldr	r2, [pc, #728]	; (8008990 <_dtoa_r+0x690>)
 80086b8:	4023      	ands	r3, r4
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	18d3      	adds	r3, r2, r3
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f7f9 faa3 	bl	8001c0c <__aeabi_dmul>
 80086c6:	2601      	movs	r6, #1
 80086c8:	2300      	movs	r3, #0
 80086ca:	9008      	str	r0, [sp, #32]
 80086cc:	9109      	str	r1, [sp, #36]	; 0x24
 80086ce:	4db1      	ldr	r5, [pc, #708]	; (8008994 <_dtoa_r+0x694>)
 80086d0:	1124      	asrs	r4, r4, #4
 80086d2:	2c00      	cmp	r4, #0
 80086d4:	d000      	beq.n	80086d8 <_dtoa_r+0x3d8>
 80086d6:	e094      	b.n	8008802 <_dtoa_r+0x502>
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d19f      	bne.n	800861c <_dtoa_r+0x31c>
 80086dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d100      	bne.n	80086e4 <_dtoa_r+0x3e4>
 80086e2:	e09b      	b.n	800881c <_dtoa_r+0x51c>
 80086e4:	9c08      	ldr	r4, [sp, #32]
 80086e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80086e8:	2200      	movs	r2, #0
 80086ea:	0020      	movs	r0, r4
 80086ec:	0029      	movs	r1, r5
 80086ee:	4baa      	ldr	r3, [pc, #680]	; (8008998 <_dtoa_r+0x698>)
 80086f0:	f7f7 feb2 	bl	8000458 <__aeabi_dcmplt>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d100      	bne.n	80086fa <_dtoa_r+0x3fa>
 80086f8:	e090      	b.n	800881c <_dtoa_r+0x51c>
 80086fa:	9b07      	ldr	r3, [sp, #28]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d100      	bne.n	8008702 <_dtoa_r+0x402>
 8008700:	e08c      	b.n	800881c <_dtoa_r+0x51c>
 8008702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008704:	2b00      	cmp	r3, #0
 8008706:	dd46      	ble.n	8008796 <_dtoa_r+0x496>
 8008708:	9b02      	ldr	r3, [sp, #8]
 800870a:	2200      	movs	r2, #0
 800870c:	0020      	movs	r0, r4
 800870e:	0029      	movs	r1, r5
 8008710:	1e5e      	subs	r6, r3, #1
 8008712:	4ba2      	ldr	r3, [pc, #648]	; (800899c <_dtoa_r+0x69c>)
 8008714:	f7f9 fa7a 	bl	8001c0c <__aeabi_dmul>
 8008718:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800871a:	9008      	str	r0, [sp, #32]
 800871c:	9109      	str	r1, [sp, #36]	; 0x24
 800871e:	3301      	adds	r3, #1
 8008720:	9310      	str	r3, [sp, #64]	; 0x40
 8008722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008724:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008726:	9c08      	ldr	r4, [sp, #32]
 8008728:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800872a:	9314      	str	r3, [sp, #80]	; 0x50
 800872c:	f7fa f8c0 	bl	80028b0 <__aeabi_i2d>
 8008730:	0022      	movs	r2, r4
 8008732:	002b      	movs	r3, r5
 8008734:	f7f9 fa6a 	bl	8001c0c <__aeabi_dmul>
 8008738:	2200      	movs	r2, #0
 800873a:	4b99      	ldr	r3, [pc, #612]	; (80089a0 <_dtoa_r+0x6a0>)
 800873c:	f7f8 fb28 	bl	8000d90 <__aeabi_dadd>
 8008740:	9010      	str	r0, [sp, #64]	; 0x40
 8008742:	9111      	str	r1, [sp, #68]	; 0x44
 8008744:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008746:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008748:	9208      	str	r2, [sp, #32]
 800874a:	9309      	str	r3, [sp, #36]	; 0x24
 800874c:	4a95      	ldr	r2, [pc, #596]	; (80089a4 <_dtoa_r+0x6a4>)
 800874e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008750:	4694      	mov	ip, r2
 8008752:	4463      	add	r3, ip
 8008754:	9317      	str	r3, [sp, #92]	; 0x5c
 8008756:	9309      	str	r3, [sp, #36]	; 0x24
 8008758:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800875a:	2b00      	cmp	r3, #0
 800875c:	d161      	bne.n	8008822 <_dtoa_r+0x522>
 800875e:	2200      	movs	r2, #0
 8008760:	0020      	movs	r0, r4
 8008762:	0029      	movs	r1, r5
 8008764:	4b90      	ldr	r3, [pc, #576]	; (80089a8 <_dtoa_r+0x6a8>)
 8008766:	f7f9 fcbd 	bl	80020e4 <__aeabi_dsub>
 800876a:	9a08      	ldr	r2, [sp, #32]
 800876c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800876e:	0004      	movs	r4, r0
 8008770:	000d      	movs	r5, r1
 8008772:	f7f7 fe85 	bl	8000480 <__aeabi_dcmpgt>
 8008776:	2800      	cmp	r0, #0
 8008778:	d000      	beq.n	800877c <_dtoa_r+0x47c>
 800877a:	e2af      	b.n	8008cdc <_dtoa_r+0x9dc>
 800877c:	488b      	ldr	r0, [pc, #556]	; (80089ac <_dtoa_r+0x6ac>)
 800877e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008780:	4684      	mov	ip, r0
 8008782:	4461      	add	r1, ip
 8008784:	000b      	movs	r3, r1
 8008786:	0020      	movs	r0, r4
 8008788:	0029      	movs	r1, r5
 800878a:	9a08      	ldr	r2, [sp, #32]
 800878c:	f7f7 fe64 	bl	8000458 <__aeabi_dcmplt>
 8008790:	2800      	cmp	r0, #0
 8008792:	d000      	beq.n	8008796 <_dtoa_r+0x496>
 8008794:	e29f      	b.n	8008cd6 <_dtoa_r+0x9d6>
 8008796:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008798:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800879a:	9308      	str	r3, [sp, #32]
 800879c:	9409      	str	r4, [sp, #36]	; 0x24
 800879e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	da00      	bge.n	80087a6 <_dtoa_r+0x4a6>
 80087a4:	e172      	b.n	8008a8c <_dtoa_r+0x78c>
 80087a6:	9a02      	ldr	r2, [sp, #8]
 80087a8:	2a0e      	cmp	r2, #14
 80087aa:	dd00      	ble.n	80087ae <_dtoa_r+0x4ae>
 80087ac:	e16e      	b.n	8008a8c <_dtoa_r+0x78c>
 80087ae:	4b78      	ldr	r3, [pc, #480]	; (8008990 <_dtoa_r+0x690>)
 80087b0:	00d2      	lsls	r2, r2, #3
 80087b2:	189b      	adds	r3, r3, r2
 80087b4:	685c      	ldr	r4, [r3, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	930a      	str	r3, [sp, #40]	; 0x28
 80087ba:	940b      	str	r4, [sp, #44]	; 0x2c
 80087bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	db00      	blt.n	80087c4 <_dtoa_r+0x4c4>
 80087c2:	e0f7      	b.n	80089b4 <_dtoa_r+0x6b4>
 80087c4:	9b07      	ldr	r3, [sp, #28]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	dd00      	ble.n	80087cc <_dtoa_r+0x4cc>
 80087ca:	e0f3      	b.n	80089b4 <_dtoa_r+0x6b4>
 80087cc:	d000      	beq.n	80087d0 <_dtoa_r+0x4d0>
 80087ce:	e282      	b.n	8008cd6 <_dtoa_r+0x9d6>
 80087d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80087d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087d4:	2200      	movs	r2, #0
 80087d6:	4b74      	ldr	r3, [pc, #464]	; (80089a8 <_dtoa_r+0x6a8>)
 80087d8:	f7f9 fa18 	bl	8001c0c <__aeabi_dmul>
 80087dc:	9a08      	ldr	r2, [sp, #32]
 80087de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e0:	f7f7 fe58 	bl	8000494 <__aeabi_dcmpge>
 80087e4:	9e07      	ldr	r6, [sp, #28]
 80087e6:	0035      	movs	r5, r6
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d000      	beq.n	80087ee <_dtoa_r+0x4ee>
 80087ec:	e259      	b.n	8008ca2 <_dtoa_r+0x9a2>
 80087ee:	9b06      	ldr	r3, [sp, #24]
 80087f0:	9a06      	ldr	r2, [sp, #24]
 80087f2:	3301      	adds	r3, #1
 80087f4:	9308      	str	r3, [sp, #32]
 80087f6:	2331      	movs	r3, #49	; 0x31
 80087f8:	7013      	strb	r3, [r2, #0]
 80087fa:	9b02      	ldr	r3, [sp, #8]
 80087fc:	3301      	adds	r3, #1
 80087fe:	9302      	str	r3, [sp, #8]
 8008800:	e254      	b.n	8008cac <_dtoa_r+0x9ac>
 8008802:	4234      	tst	r4, r6
 8008804:	d007      	beq.n	8008816 <_dtoa_r+0x516>
 8008806:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008808:	3301      	adds	r3, #1
 800880a:	9310      	str	r3, [sp, #64]	; 0x40
 800880c:	682a      	ldr	r2, [r5, #0]
 800880e:	686b      	ldr	r3, [r5, #4]
 8008810:	f7f9 f9fc 	bl	8001c0c <__aeabi_dmul>
 8008814:	0033      	movs	r3, r6
 8008816:	1064      	asrs	r4, r4, #1
 8008818:	3508      	adds	r5, #8
 800881a:	e75a      	b.n	80086d2 <_dtoa_r+0x3d2>
 800881c:	9e02      	ldr	r6, [sp, #8]
 800881e:	9b07      	ldr	r3, [sp, #28]
 8008820:	e780      	b.n	8008724 <_dtoa_r+0x424>
 8008822:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008824:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008826:	1e5a      	subs	r2, r3, #1
 8008828:	4b59      	ldr	r3, [pc, #356]	; (8008990 <_dtoa_r+0x690>)
 800882a:	00d2      	lsls	r2, r2, #3
 800882c:	189b      	adds	r3, r3, r2
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	2900      	cmp	r1, #0
 8008834:	d051      	beq.n	80088da <_dtoa_r+0x5da>
 8008836:	2000      	movs	r0, #0
 8008838:	495d      	ldr	r1, [pc, #372]	; (80089b0 <_dtoa_r+0x6b0>)
 800883a:	f7f8 fde5 	bl	8001408 <__aeabi_ddiv>
 800883e:	9a08      	ldr	r2, [sp, #32]
 8008840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008842:	f7f9 fc4f 	bl	80020e4 <__aeabi_dsub>
 8008846:	9a06      	ldr	r2, [sp, #24]
 8008848:	9b06      	ldr	r3, [sp, #24]
 800884a:	4694      	mov	ip, r2
 800884c:	9317      	str	r3, [sp, #92]	; 0x5c
 800884e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008850:	9010      	str	r0, [sp, #64]	; 0x40
 8008852:	9111      	str	r1, [sp, #68]	; 0x44
 8008854:	4463      	add	r3, ip
 8008856:	9319      	str	r3, [sp, #100]	; 0x64
 8008858:	0029      	movs	r1, r5
 800885a:	0020      	movs	r0, r4
 800885c:	f7f9 fff2 	bl	8002844 <__aeabi_d2iz>
 8008860:	9014      	str	r0, [sp, #80]	; 0x50
 8008862:	f7fa f825 	bl	80028b0 <__aeabi_i2d>
 8008866:	0002      	movs	r2, r0
 8008868:	000b      	movs	r3, r1
 800886a:	0020      	movs	r0, r4
 800886c:	0029      	movs	r1, r5
 800886e:	f7f9 fc39 	bl	80020e4 <__aeabi_dsub>
 8008872:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008874:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008876:	3301      	adds	r3, #1
 8008878:	9308      	str	r3, [sp, #32]
 800887a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800887c:	0004      	movs	r4, r0
 800887e:	3330      	adds	r3, #48	; 0x30
 8008880:	7013      	strb	r3, [r2, #0]
 8008882:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008884:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008886:	000d      	movs	r5, r1
 8008888:	f7f7 fde6 	bl	8000458 <__aeabi_dcmplt>
 800888c:	2800      	cmp	r0, #0
 800888e:	d175      	bne.n	800897c <_dtoa_r+0x67c>
 8008890:	0022      	movs	r2, r4
 8008892:	002b      	movs	r3, r5
 8008894:	2000      	movs	r0, #0
 8008896:	4940      	ldr	r1, [pc, #256]	; (8008998 <_dtoa_r+0x698>)
 8008898:	f7f9 fc24 	bl	80020e4 <__aeabi_dsub>
 800889c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800889e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088a0:	f7f7 fdda 	bl	8000458 <__aeabi_dcmplt>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d000      	beq.n	80088aa <_dtoa_r+0x5aa>
 80088a8:	e0d2      	b.n	8008a50 <_dtoa_r+0x750>
 80088aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80088ac:	9a08      	ldr	r2, [sp, #32]
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d100      	bne.n	80088b4 <_dtoa_r+0x5b4>
 80088b2:	e770      	b.n	8008796 <_dtoa_r+0x496>
 80088b4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80088b6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80088b8:	2200      	movs	r2, #0
 80088ba:	4b38      	ldr	r3, [pc, #224]	; (800899c <_dtoa_r+0x69c>)
 80088bc:	f7f9 f9a6 	bl	8001c0c <__aeabi_dmul>
 80088c0:	4b36      	ldr	r3, [pc, #216]	; (800899c <_dtoa_r+0x69c>)
 80088c2:	9010      	str	r0, [sp, #64]	; 0x40
 80088c4:	9111      	str	r1, [sp, #68]	; 0x44
 80088c6:	2200      	movs	r2, #0
 80088c8:	0020      	movs	r0, r4
 80088ca:	0029      	movs	r1, r5
 80088cc:	f7f9 f99e 	bl	8001c0c <__aeabi_dmul>
 80088d0:	9b08      	ldr	r3, [sp, #32]
 80088d2:	0004      	movs	r4, r0
 80088d4:	000d      	movs	r5, r1
 80088d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80088d8:	e7be      	b.n	8008858 <_dtoa_r+0x558>
 80088da:	9808      	ldr	r0, [sp, #32]
 80088dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088de:	f7f9 f995 	bl	8001c0c <__aeabi_dmul>
 80088e2:	9a06      	ldr	r2, [sp, #24]
 80088e4:	9b06      	ldr	r3, [sp, #24]
 80088e6:	4694      	mov	ip, r2
 80088e8:	9308      	str	r3, [sp, #32]
 80088ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088ec:	9010      	str	r0, [sp, #64]	; 0x40
 80088ee:	9111      	str	r1, [sp, #68]	; 0x44
 80088f0:	4463      	add	r3, ip
 80088f2:	9319      	str	r3, [sp, #100]	; 0x64
 80088f4:	0029      	movs	r1, r5
 80088f6:	0020      	movs	r0, r4
 80088f8:	f7f9 ffa4 	bl	8002844 <__aeabi_d2iz>
 80088fc:	9017      	str	r0, [sp, #92]	; 0x5c
 80088fe:	f7f9 ffd7 	bl	80028b0 <__aeabi_i2d>
 8008902:	0002      	movs	r2, r0
 8008904:	000b      	movs	r3, r1
 8008906:	0020      	movs	r0, r4
 8008908:	0029      	movs	r1, r5
 800890a:	f7f9 fbeb 	bl	80020e4 <__aeabi_dsub>
 800890e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008910:	9a08      	ldr	r2, [sp, #32]
 8008912:	3330      	adds	r3, #48	; 0x30
 8008914:	7013      	strb	r3, [r2, #0]
 8008916:	0013      	movs	r3, r2
 8008918:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800891a:	3301      	adds	r3, #1
 800891c:	0004      	movs	r4, r0
 800891e:	000d      	movs	r5, r1
 8008920:	9308      	str	r3, [sp, #32]
 8008922:	4293      	cmp	r3, r2
 8008924:	d12c      	bne.n	8008980 <_dtoa_r+0x680>
 8008926:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008928:	9911      	ldr	r1, [sp, #68]	; 0x44
 800892a:	9a06      	ldr	r2, [sp, #24]
 800892c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800892e:	4694      	mov	ip, r2
 8008930:	4463      	add	r3, ip
 8008932:	2200      	movs	r2, #0
 8008934:	9308      	str	r3, [sp, #32]
 8008936:	4b1e      	ldr	r3, [pc, #120]	; (80089b0 <_dtoa_r+0x6b0>)
 8008938:	f7f8 fa2a 	bl	8000d90 <__aeabi_dadd>
 800893c:	0002      	movs	r2, r0
 800893e:	000b      	movs	r3, r1
 8008940:	0020      	movs	r0, r4
 8008942:	0029      	movs	r1, r5
 8008944:	f7f7 fd9c 	bl	8000480 <__aeabi_dcmpgt>
 8008948:	2800      	cmp	r0, #0
 800894a:	d000      	beq.n	800894e <_dtoa_r+0x64e>
 800894c:	e080      	b.n	8008a50 <_dtoa_r+0x750>
 800894e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008950:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008952:	2000      	movs	r0, #0
 8008954:	4916      	ldr	r1, [pc, #88]	; (80089b0 <_dtoa_r+0x6b0>)
 8008956:	f7f9 fbc5 	bl	80020e4 <__aeabi_dsub>
 800895a:	0002      	movs	r2, r0
 800895c:	000b      	movs	r3, r1
 800895e:	0020      	movs	r0, r4
 8008960:	0029      	movs	r1, r5
 8008962:	f7f7 fd79 	bl	8000458 <__aeabi_dcmplt>
 8008966:	2800      	cmp	r0, #0
 8008968:	d100      	bne.n	800896c <_dtoa_r+0x66c>
 800896a:	e714      	b.n	8008796 <_dtoa_r+0x496>
 800896c:	9b08      	ldr	r3, [sp, #32]
 800896e:	001a      	movs	r2, r3
 8008970:	3a01      	subs	r2, #1
 8008972:	9208      	str	r2, [sp, #32]
 8008974:	7812      	ldrb	r2, [r2, #0]
 8008976:	2a30      	cmp	r2, #48	; 0x30
 8008978:	d0f8      	beq.n	800896c <_dtoa_r+0x66c>
 800897a:	9308      	str	r3, [sp, #32]
 800897c:	9602      	str	r6, [sp, #8]
 800897e:	e055      	b.n	8008a2c <_dtoa_r+0x72c>
 8008980:	2200      	movs	r2, #0
 8008982:	4b06      	ldr	r3, [pc, #24]	; (800899c <_dtoa_r+0x69c>)
 8008984:	f7f9 f942 	bl	8001c0c <__aeabi_dmul>
 8008988:	0004      	movs	r4, r0
 800898a:	000d      	movs	r5, r1
 800898c:	e7b2      	b.n	80088f4 <_dtoa_r+0x5f4>
 800898e:	46c0      	nop			; (mov r8, r8)
 8008990:	0800b4b8 	.word	0x0800b4b8
 8008994:	0800b490 	.word	0x0800b490
 8008998:	3ff00000 	.word	0x3ff00000
 800899c:	40240000 	.word	0x40240000
 80089a0:	401c0000 	.word	0x401c0000
 80089a4:	fcc00000 	.word	0xfcc00000
 80089a8:	40140000 	.word	0x40140000
 80089ac:	7cc00000 	.word	0x7cc00000
 80089b0:	3fe00000 	.word	0x3fe00000
 80089b4:	9b07      	ldr	r3, [sp, #28]
 80089b6:	9e06      	ldr	r6, [sp, #24]
 80089b8:	3b01      	subs	r3, #1
 80089ba:	199b      	adds	r3, r3, r6
 80089bc:	930c      	str	r3, [sp, #48]	; 0x30
 80089be:	9c08      	ldr	r4, [sp, #32]
 80089c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80089c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089c6:	0020      	movs	r0, r4
 80089c8:	0029      	movs	r1, r5
 80089ca:	f7f8 fd1d 	bl	8001408 <__aeabi_ddiv>
 80089ce:	f7f9 ff39 	bl	8002844 <__aeabi_d2iz>
 80089d2:	9007      	str	r0, [sp, #28]
 80089d4:	f7f9 ff6c 	bl	80028b0 <__aeabi_i2d>
 80089d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089dc:	f7f9 f916 	bl	8001c0c <__aeabi_dmul>
 80089e0:	0002      	movs	r2, r0
 80089e2:	000b      	movs	r3, r1
 80089e4:	0020      	movs	r0, r4
 80089e6:	0029      	movs	r1, r5
 80089e8:	f7f9 fb7c 	bl	80020e4 <__aeabi_dsub>
 80089ec:	0033      	movs	r3, r6
 80089ee:	9a07      	ldr	r2, [sp, #28]
 80089f0:	3601      	adds	r6, #1
 80089f2:	3230      	adds	r2, #48	; 0x30
 80089f4:	701a      	strb	r2, [r3, #0]
 80089f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089f8:	9608      	str	r6, [sp, #32]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d139      	bne.n	8008a72 <_dtoa_r+0x772>
 80089fe:	0002      	movs	r2, r0
 8008a00:	000b      	movs	r3, r1
 8008a02:	f7f8 f9c5 	bl	8000d90 <__aeabi_dadd>
 8008a06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a0a:	0004      	movs	r4, r0
 8008a0c:	000d      	movs	r5, r1
 8008a0e:	f7f7 fd37 	bl	8000480 <__aeabi_dcmpgt>
 8008a12:	2800      	cmp	r0, #0
 8008a14:	d11b      	bne.n	8008a4e <_dtoa_r+0x74e>
 8008a16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a1a:	0020      	movs	r0, r4
 8008a1c:	0029      	movs	r1, r5
 8008a1e:	f7f7 fd15 	bl	800044c <__aeabi_dcmpeq>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d002      	beq.n	8008a2c <_dtoa_r+0x72c>
 8008a26:	9b07      	ldr	r3, [sp, #28]
 8008a28:	07db      	lsls	r3, r3, #31
 8008a2a:	d410      	bmi.n	8008a4e <_dtoa_r+0x74e>
 8008a2c:	0038      	movs	r0, r7
 8008a2e:	9905      	ldr	r1, [sp, #20]
 8008a30:	f000 fe7a 	bl	8009728 <_Bfree>
 8008a34:	2300      	movs	r3, #0
 8008a36:	9a08      	ldr	r2, [sp, #32]
 8008a38:	9802      	ldr	r0, [sp, #8]
 8008a3a:	7013      	strb	r3, [r2, #0]
 8008a3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008a3e:	3001      	adds	r0, #1
 8008a40:	6018      	str	r0, [r3, #0]
 8008a42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d100      	bne.n	8008a4a <_dtoa_r+0x74a>
 8008a48:	e4a6      	b.n	8008398 <_dtoa_r+0x98>
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	e4a4      	b.n	8008398 <_dtoa_r+0x98>
 8008a4e:	9e02      	ldr	r6, [sp, #8]
 8008a50:	9b08      	ldr	r3, [sp, #32]
 8008a52:	9308      	str	r3, [sp, #32]
 8008a54:	3b01      	subs	r3, #1
 8008a56:	781a      	ldrb	r2, [r3, #0]
 8008a58:	2a39      	cmp	r2, #57	; 0x39
 8008a5a:	d106      	bne.n	8008a6a <_dtoa_r+0x76a>
 8008a5c:	9a06      	ldr	r2, [sp, #24]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d1f7      	bne.n	8008a52 <_dtoa_r+0x752>
 8008a62:	2230      	movs	r2, #48	; 0x30
 8008a64:	9906      	ldr	r1, [sp, #24]
 8008a66:	3601      	adds	r6, #1
 8008a68:	700a      	strb	r2, [r1, #0]
 8008a6a:	781a      	ldrb	r2, [r3, #0]
 8008a6c:	3201      	adds	r2, #1
 8008a6e:	701a      	strb	r2, [r3, #0]
 8008a70:	e784      	b.n	800897c <_dtoa_r+0x67c>
 8008a72:	2200      	movs	r2, #0
 8008a74:	4baa      	ldr	r3, [pc, #680]	; (8008d20 <_dtoa_r+0xa20>)
 8008a76:	f7f9 f8c9 	bl	8001c0c <__aeabi_dmul>
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	0004      	movs	r4, r0
 8008a80:	000d      	movs	r5, r1
 8008a82:	f7f7 fce3 	bl	800044c <__aeabi_dcmpeq>
 8008a86:	2800      	cmp	r0, #0
 8008a88:	d09b      	beq.n	80089c2 <_dtoa_r+0x6c2>
 8008a8a:	e7cf      	b.n	8008a2c <_dtoa_r+0x72c>
 8008a8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008a8e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008a90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008a92:	2d00      	cmp	r5, #0
 8008a94:	d012      	beq.n	8008abc <_dtoa_r+0x7bc>
 8008a96:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008a98:	2a01      	cmp	r2, #1
 8008a9a:	dc66      	bgt.n	8008b6a <_dtoa_r+0x86a>
 8008a9c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008a9e:	2a00      	cmp	r2, #0
 8008aa0:	d05d      	beq.n	8008b5e <_dtoa_r+0x85e>
 8008aa2:	4aa0      	ldr	r2, [pc, #640]	; (8008d24 <_dtoa_r+0xa24>)
 8008aa4:	189b      	adds	r3, r3, r2
 8008aa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	18d2      	adds	r2, r2, r3
 8008aac:	920a      	str	r2, [sp, #40]	; 0x28
 8008aae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ab0:	0038      	movs	r0, r7
 8008ab2:	18d3      	adds	r3, r2, r3
 8008ab4:	930d      	str	r3, [sp, #52]	; 0x34
 8008ab6:	f000 ff33 	bl	8009920 <__i2b>
 8008aba:	0005      	movs	r5, r0
 8008abc:	2c00      	cmp	r4, #0
 8008abe:	dd0e      	ble.n	8008ade <_dtoa_r+0x7de>
 8008ac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	dd0b      	ble.n	8008ade <_dtoa_r+0x7de>
 8008ac6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ac8:	0023      	movs	r3, r4
 8008aca:	4294      	cmp	r4, r2
 8008acc:	dd00      	ble.n	8008ad0 <_dtoa_r+0x7d0>
 8008ace:	0013      	movs	r3, r2
 8008ad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ad2:	1ae4      	subs	r4, r4, r3
 8008ad4:	1ad2      	subs	r2, r2, r3
 8008ad6:	920a      	str	r2, [sp, #40]	; 0x28
 8008ad8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	930d      	str	r3, [sp, #52]	; 0x34
 8008ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d01f      	beq.n	8008b24 <_dtoa_r+0x824>
 8008ae4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d054      	beq.n	8008b94 <_dtoa_r+0x894>
 8008aea:	2e00      	cmp	r6, #0
 8008aec:	dd11      	ble.n	8008b12 <_dtoa_r+0x812>
 8008aee:	0029      	movs	r1, r5
 8008af0:	0032      	movs	r2, r6
 8008af2:	0038      	movs	r0, r7
 8008af4:	f000 ffda 	bl	8009aac <__pow5mult>
 8008af8:	9a05      	ldr	r2, [sp, #20]
 8008afa:	0001      	movs	r1, r0
 8008afc:	0005      	movs	r5, r0
 8008afe:	0038      	movs	r0, r7
 8008b00:	f000 ff24 	bl	800994c <__multiply>
 8008b04:	9905      	ldr	r1, [sp, #20]
 8008b06:	9014      	str	r0, [sp, #80]	; 0x50
 8008b08:	0038      	movs	r0, r7
 8008b0a:	f000 fe0d 	bl	8009728 <_Bfree>
 8008b0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b10:	9305      	str	r3, [sp, #20]
 8008b12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b14:	1b9a      	subs	r2, r3, r6
 8008b16:	42b3      	cmp	r3, r6
 8008b18:	d004      	beq.n	8008b24 <_dtoa_r+0x824>
 8008b1a:	0038      	movs	r0, r7
 8008b1c:	9905      	ldr	r1, [sp, #20]
 8008b1e:	f000 ffc5 	bl	8009aac <__pow5mult>
 8008b22:	9005      	str	r0, [sp, #20]
 8008b24:	2101      	movs	r1, #1
 8008b26:	0038      	movs	r0, r7
 8008b28:	f000 fefa 	bl	8009920 <__i2b>
 8008b2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b2e:	0006      	movs	r6, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	dd31      	ble.n	8008b98 <_dtoa_r+0x898>
 8008b34:	001a      	movs	r2, r3
 8008b36:	0001      	movs	r1, r0
 8008b38:	0038      	movs	r0, r7
 8008b3a:	f000 ffb7 	bl	8009aac <__pow5mult>
 8008b3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b40:	0006      	movs	r6, r0
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	dd2d      	ble.n	8008ba2 <_dtoa_r+0x8a2>
 8008b46:	2300      	movs	r3, #0
 8008b48:	930e      	str	r3, [sp, #56]	; 0x38
 8008b4a:	6933      	ldr	r3, [r6, #16]
 8008b4c:	3303      	adds	r3, #3
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	18f3      	adds	r3, r6, r3
 8008b52:	6858      	ldr	r0, [r3, #4]
 8008b54:	f000 fe9c 	bl	8009890 <__hi0bits>
 8008b58:	2320      	movs	r3, #32
 8008b5a:	1a18      	subs	r0, r3, r0
 8008b5c:	e039      	b.n	8008bd2 <_dtoa_r+0x8d2>
 8008b5e:	2336      	movs	r3, #54	; 0x36
 8008b60:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008b62:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008b64:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b66:	1a9b      	subs	r3, r3, r2
 8008b68:	e79d      	b.n	8008aa6 <_dtoa_r+0x7a6>
 8008b6a:	9b07      	ldr	r3, [sp, #28]
 8008b6c:	1e5e      	subs	r6, r3, #1
 8008b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b70:	42b3      	cmp	r3, r6
 8008b72:	db07      	blt.n	8008b84 <_dtoa_r+0x884>
 8008b74:	1b9e      	subs	r6, r3, r6
 8008b76:	9b07      	ldr	r3, [sp, #28]
 8008b78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	da93      	bge.n	8008aa6 <_dtoa_r+0x7a6>
 8008b7e:	1ae4      	subs	r4, r4, r3
 8008b80:	2300      	movs	r3, #0
 8008b82:	e790      	b.n	8008aa6 <_dtoa_r+0x7a6>
 8008b84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b88:	1af3      	subs	r3, r6, r3
 8008b8a:	18d3      	adds	r3, r2, r3
 8008b8c:	960e      	str	r6, [sp, #56]	; 0x38
 8008b8e:	9315      	str	r3, [sp, #84]	; 0x54
 8008b90:	2600      	movs	r6, #0
 8008b92:	e7f0      	b.n	8008b76 <_dtoa_r+0x876>
 8008b94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b96:	e7c0      	b.n	8008b1a <_dtoa_r+0x81a>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	930e      	str	r3, [sp, #56]	; 0x38
 8008b9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	dc13      	bgt.n	8008bca <_dtoa_r+0x8ca>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ba6:	9b08      	ldr	r3, [sp, #32]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10e      	bne.n	8008bca <_dtoa_r+0x8ca>
 8008bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bae:	031b      	lsls	r3, r3, #12
 8008bb0:	d10b      	bne.n	8008bca <_dtoa_r+0x8ca>
 8008bb2:	4b5d      	ldr	r3, [pc, #372]	; (8008d28 <_dtoa_r+0xa28>)
 8008bb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bb6:	4213      	tst	r3, r2
 8008bb8:	d007      	beq.n	8008bca <_dtoa_r+0x8ca>
 8008bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8008bc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	930d      	str	r3, [sp, #52]	; 0x34
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	930e      	str	r3, [sp, #56]	; 0x38
 8008bca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bcc:	2001      	movs	r0, #1
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1bb      	bne.n	8008b4a <_dtoa_r+0x84a>
 8008bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bd4:	221f      	movs	r2, #31
 8008bd6:	1818      	adds	r0, r3, r0
 8008bd8:	0003      	movs	r3, r0
 8008bda:	4013      	ands	r3, r2
 8008bdc:	4210      	tst	r0, r2
 8008bde:	d046      	beq.n	8008c6e <_dtoa_r+0x96e>
 8008be0:	3201      	adds	r2, #1
 8008be2:	1ad2      	subs	r2, r2, r3
 8008be4:	2a04      	cmp	r2, #4
 8008be6:	dd3f      	ble.n	8008c68 <_dtoa_r+0x968>
 8008be8:	221c      	movs	r2, #28
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bee:	18e4      	adds	r4, r4, r3
 8008bf0:	18d2      	adds	r2, r2, r3
 8008bf2:	920a      	str	r2, [sp, #40]	; 0x28
 8008bf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bf6:	18d3      	adds	r3, r2, r3
 8008bf8:	930d      	str	r3, [sp, #52]	; 0x34
 8008bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	dd05      	ble.n	8008c0c <_dtoa_r+0x90c>
 8008c00:	001a      	movs	r2, r3
 8008c02:	0038      	movs	r0, r7
 8008c04:	9905      	ldr	r1, [sp, #20]
 8008c06:	f000 ffad 	bl	8009b64 <__lshift>
 8008c0a:	9005      	str	r0, [sp, #20]
 8008c0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	dd05      	ble.n	8008c1e <_dtoa_r+0x91e>
 8008c12:	0031      	movs	r1, r6
 8008c14:	001a      	movs	r2, r3
 8008c16:	0038      	movs	r0, r7
 8008c18:	f000 ffa4 	bl	8009b64 <__lshift>
 8008c1c:	0006      	movs	r6, r0
 8008c1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d026      	beq.n	8008c72 <_dtoa_r+0x972>
 8008c24:	0031      	movs	r1, r6
 8008c26:	9805      	ldr	r0, [sp, #20]
 8008c28:	f001 f80a 	bl	8009c40 <__mcmp>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	da20      	bge.n	8008c72 <_dtoa_r+0x972>
 8008c30:	9b02      	ldr	r3, [sp, #8]
 8008c32:	220a      	movs	r2, #10
 8008c34:	3b01      	subs	r3, #1
 8008c36:	9302      	str	r3, [sp, #8]
 8008c38:	0038      	movs	r0, r7
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	9905      	ldr	r1, [sp, #20]
 8008c3e:	f000 fd97 	bl	8009770 <__multadd>
 8008c42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c44:	9005      	str	r0, [sp, #20]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d100      	bne.n	8008c4c <_dtoa_r+0x94c>
 8008c4a:	e166      	b.n	8008f1a <_dtoa_r+0xc1a>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	0029      	movs	r1, r5
 8008c50:	220a      	movs	r2, #10
 8008c52:	0038      	movs	r0, r7
 8008c54:	f000 fd8c 	bl	8009770 <__multadd>
 8008c58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c5a:	0005      	movs	r5, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	dc47      	bgt.n	8008cf0 <_dtoa_r+0x9f0>
 8008c60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	dc0d      	bgt.n	8008c82 <_dtoa_r+0x982>
 8008c66:	e043      	b.n	8008cf0 <_dtoa_r+0x9f0>
 8008c68:	2a04      	cmp	r2, #4
 8008c6a:	d0c6      	beq.n	8008bfa <_dtoa_r+0x8fa>
 8008c6c:	0013      	movs	r3, r2
 8008c6e:	331c      	adds	r3, #28
 8008c70:	e7bc      	b.n	8008bec <_dtoa_r+0x8ec>
 8008c72:	9b07      	ldr	r3, [sp, #28]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	dc35      	bgt.n	8008ce4 <_dtoa_r+0x9e4>
 8008c78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	dd32      	ble.n	8008ce4 <_dtoa_r+0x9e4>
 8008c7e:	9b07      	ldr	r3, [sp, #28]
 8008c80:	930c      	str	r3, [sp, #48]	; 0x30
 8008c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10c      	bne.n	8008ca2 <_dtoa_r+0x9a2>
 8008c88:	0031      	movs	r1, r6
 8008c8a:	2205      	movs	r2, #5
 8008c8c:	0038      	movs	r0, r7
 8008c8e:	f000 fd6f 	bl	8009770 <__multadd>
 8008c92:	0006      	movs	r6, r0
 8008c94:	0001      	movs	r1, r0
 8008c96:	9805      	ldr	r0, [sp, #20]
 8008c98:	f000 ffd2 	bl	8009c40 <__mcmp>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	dd00      	ble.n	8008ca2 <_dtoa_r+0x9a2>
 8008ca0:	e5a5      	b.n	80087ee <_dtoa_r+0x4ee>
 8008ca2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ca4:	43db      	mvns	r3, r3
 8008ca6:	9302      	str	r3, [sp, #8]
 8008ca8:	9b06      	ldr	r3, [sp, #24]
 8008caa:	9308      	str	r3, [sp, #32]
 8008cac:	2400      	movs	r4, #0
 8008cae:	0031      	movs	r1, r6
 8008cb0:	0038      	movs	r0, r7
 8008cb2:	f000 fd39 	bl	8009728 <_Bfree>
 8008cb6:	2d00      	cmp	r5, #0
 8008cb8:	d100      	bne.n	8008cbc <_dtoa_r+0x9bc>
 8008cba:	e6b7      	b.n	8008a2c <_dtoa_r+0x72c>
 8008cbc:	2c00      	cmp	r4, #0
 8008cbe:	d005      	beq.n	8008ccc <_dtoa_r+0x9cc>
 8008cc0:	42ac      	cmp	r4, r5
 8008cc2:	d003      	beq.n	8008ccc <_dtoa_r+0x9cc>
 8008cc4:	0021      	movs	r1, r4
 8008cc6:	0038      	movs	r0, r7
 8008cc8:	f000 fd2e 	bl	8009728 <_Bfree>
 8008ccc:	0029      	movs	r1, r5
 8008cce:	0038      	movs	r0, r7
 8008cd0:	f000 fd2a 	bl	8009728 <_Bfree>
 8008cd4:	e6aa      	b.n	8008a2c <_dtoa_r+0x72c>
 8008cd6:	2600      	movs	r6, #0
 8008cd8:	0035      	movs	r5, r6
 8008cda:	e7e2      	b.n	8008ca2 <_dtoa_r+0x9a2>
 8008cdc:	9602      	str	r6, [sp, #8]
 8008cde:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008ce0:	0035      	movs	r5, r6
 8008ce2:	e584      	b.n	80087ee <_dtoa_r+0x4ee>
 8008ce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d100      	bne.n	8008cec <_dtoa_r+0x9ec>
 8008cea:	e0ce      	b.n	8008e8a <_dtoa_r+0xb8a>
 8008cec:	9b07      	ldr	r3, [sp, #28]
 8008cee:	930c      	str	r3, [sp, #48]	; 0x30
 8008cf0:	2c00      	cmp	r4, #0
 8008cf2:	dd05      	ble.n	8008d00 <_dtoa_r+0xa00>
 8008cf4:	0029      	movs	r1, r5
 8008cf6:	0022      	movs	r2, r4
 8008cf8:	0038      	movs	r0, r7
 8008cfa:	f000 ff33 	bl	8009b64 <__lshift>
 8008cfe:	0005      	movs	r5, r0
 8008d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d02:	0028      	movs	r0, r5
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d022      	beq.n	8008d4e <_dtoa_r+0xa4e>
 8008d08:	0038      	movs	r0, r7
 8008d0a:	6869      	ldr	r1, [r5, #4]
 8008d0c:	f000 fcc8 	bl	80096a0 <_Balloc>
 8008d10:	1e04      	subs	r4, r0, #0
 8008d12:	d10f      	bne.n	8008d34 <_dtoa_r+0xa34>
 8008d14:	0002      	movs	r2, r0
 8008d16:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <_dtoa_r+0xa2c>)
 8008d18:	4905      	ldr	r1, [pc, #20]	; (8008d30 <_dtoa_r+0xa30>)
 8008d1a:	f7ff fb06 	bl	800832a <_dtoa_r+0x2a>
 8008d1e:	46c0      	nop			; (mov r8, r8)
 8008d20:	40240000 	.word	0x40240000
 8008d24:	00000433 	.word	0x00000433
 8008d28:	7ff00000 	.word	0x7ff00000
 8008d2c:	0800b3a9 	.word	0x0800b3a9
 8008d30:	000002ea 	.word	0x000002ea
 8008d34:	0029      	movs	r1, r5
 8008d36:	692b      	ldr	r3, [r5, #16]
 8008d38:	310c      	adds	r1, #12
 8008d3a:	1c9a      	adds	r2, r3, #2
 8008d3c:	0092      	lsls	r2, r2, #2
 8008d3e:	300c      	adds	r0, #12
 8008d40:	f7fd fd02 	bl	8006748 <memcpy>
 8008d44:	2201      	movs	r2, #1
 8008d46:	0021      	movs	r1, r4
 8008d48:	0038      	movs	r0, r7
 8008d4a:	f000 ff0b 	bl	8009b64 <__lshift>
 8008d4e:	9b06      	ldr	r3, [sp, #24]
 8008d50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d52:	930a      	str	r3, [sp, #40]	; 0x28
 8008d54:	3b01      	subs	r3, #1
 8008d56:	189b      	adds	r3, r3, r2
 8008d58:	2201      	movs	r2, #1
 8008d5a:	002c      	movs	r4, r5
 8008d5c:	0005      	movs	r5, r0
 8008d5e:	9314      	str	r3, [sp, #80]	; 0x50
 8008d60:	9b08      	ldr	r3, [sp, #32]
 8008d62:	4013      	ands	r3, r2
 8008d64:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d66:	0031      	movs	r1, r6
 8008d68:	9805      	ldr	r0, [sp, #20]
 8008d6a:	f7ff fa3d 	bl	80081e8 <quorem>
 8008d6e:	0003      	movs	r3, r0
 8008d70:	0021      	movs	r1, r4
 8008d72:	3330      	adds	r3, #48	; 0x30
 8008d74:	900d      	str	r0, [sp, #52]	; 0x34
 8008d76:	9805      	ldr	r0, [sp, #20]
 8008d78:	9307      	str	r3, [sp, #28]
 8008d7a:	f000 ff61 	bl	8009c40 <__mcmp>
 8008d7e:	002a      	movs	r2, r5
 8008d80:	900e      	str	r0, [sp, #56]	; 0x38
 8008d82:	0031      	movs	r1, r6
 8008d84:	0038      	movs	r0, r7
 8008d86:	f000 ff77 	bl	8009c78 <__mdiff>
 8008d8a:	68c3      	ldr	r3, [r0, #12]
 8008d8c:	9008      	str	r0, [sp, #32]
 8008d8e:	9310      	str	r3, [sp, #64]	; 0x40
 8008d90:	2301      	movs	r3, #1
 8008d92:	930c      	str	r3, [sp, #48]	; 0x30
 8008d94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d104      	bne.n	8008da4 <_dtoa_r+0xaa4>
 8008d9a:	0001      	movs	r1, r0
 8008d9c:	9805      	ldr	r0, [sp, #20]
 8008d9e:	f000 ff4f 	bl	8009c40 <__mcmp>
 8008da2:	900c      	str	r0, [sp, #48]	; 0x30
 8008da4:	0038      	movs	r0, r7
 8008da6:	9908      	ldr	r1, [sp, #32]
 8008da8:	f000 fcbe 	bl	8009728 <_Bfree>
 8008dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008db0:	3301      	adds	r3, #1
 8008db2:	9308      	str	r3, [sp, #32]
 8008db4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008db6:	4313      	orrs	r3, r2
 8008db8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	d10c      	bne.n	8008dd8 <_dtoa_r+0xad8>
 8008dbe:	9b07      	ldr	r3, [sp, #28]
 8008dc0:	2b39      	cmp	r3, #57	; 0x39
 8008dc2:	d026      	beq.n	8008e12 <_dtoa_r+0xb12>
 8008dc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	dd02      	ble.n	8008dd0 <_dtoa_r+0xad0>
 8008dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dcc:	3331      	adds	r3, #49	; 0x31
 8008dce:	9307      	str	r3, [sp, #28]
 8008dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dd2:	9a07      	ldr	r2, [sp, #28]
 8008dd4:	701a      	strb	r2, [r3, #0]
 8008dd6:	e76a      	b.n	8008cae <_dtoa_r+0x9ae>
 8008dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	db04      	blt.n	8008de8 <_dtoa_r+0xae8>
 8008dde:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008de0:	4313      	orrs	r3, r2
 8008de2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008de4:	4313      	orrs	r3, r2
 8008de6:	d11f      	bne.n	8008e28 <_dtoa_r+0xb28>
 8008de8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	ddf0      	ble.n	8008dd0 <_dtoa_r+0xad0>
 8008dee:	9905      	ldr	r1, [sp, #20]
 8008df0:	2201      	movs	r2, #1
 8008df2:	0038      	movs	r0, r7
 8008df4:	f000 feb6 	bl	8009b64 <__lshift>
 8008df8:	0031      	movs	r1, r6
 8008dfa:	9005      	str	r0, [sp, #20]
 8008dfc:	f000 ff20 	bl	8009c40 <__mcmp>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	dc03      	bgt.n	8008e0c <_dtoa_r+0xb0c>
 8008e04:	d1e4      	bne.n	8008dd0 <_dtoa_r+0xad0>
 8008e06:	9b07      	ldr	r3, [sp, #28]
 8008e08:	07db      	lsls	r3, r3, #31
 8008e0a:	d5e1      	bpl.n	8008dd0 <_dtoa_r+0xad0>
 8008e0c:	9b07      	ldr	r3, [sp, #28]
 8008e0e:	2b39      	cmp	r3, #57	; 0x39
 8008e10:	d1db      	bne.n	8008dca <_dtoa_r+0xaca>
 8008e12:	2339      	movs	r3, #57	; 0x39
 8008e14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e16:	7013      	strb	r3, [r2, #0]
 8008e18:	9b08      	ldr	r3, [sp, #32]
 8008e1a:	9308      	str	r3, [sp, #32]
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	781a      	ldrb	r2, [r3, #0]
 8008e20:	2a39      	cmp	r2, #57	; 0x39
 8008e22:	d068      	beq.n	8008ef6 <_dtoa_r+0xbf6>
 8008e24:	3201      	adds	r2, #1
 8008e26:	e7d5      	b.n	8008dd4 <_dtoa_r+0xad4>
 8008e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	dd07      	ble.n	8008e3e <_dtoa_r+0xb3e>
 8008e2e:	9b07      	ldr	r3, [sp, #28]
 8008e30:	2b39      	cmp	r3, #57	; 0x39
 8008e32:	d0ee      	beq.n	8008e12 <_dtoa_r+0xb12>
 8008e34:	9b07      	ldr	r3, [sp, #28]
 8008e36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e38:	3301      	adds	r3, #1
 8008e3a:	7013      	strb	r3, [r2, #0]
 8008e3c:	e737      	b.n	8008cae <_dtoa_r+0x9ae>
 8008e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e40:	9a07      	ldr	r2, [sp, #28]
 8008e42:	701a      	strb	r2, [r3, #0]
 8008e44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d03e      	beq.n	8008eca <_dtoa_r+0xbca>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	220a      	movs	r2, #10
 8008e50:	9905      	ldr	r1, [sp, #20]
 8008e52:	0038      	movs	r0, r7
 8008e54:	f000 fc8c 	bl	8009770 <__multadd>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	9005      	str	r0, [sp, #20]
 8008e5c:	220a      	movs	r2, #10
 8008e5e:	0021      	movs	r1, r4
 8008e60:	0038      	movs	r0, r7
 8008e62:	42ac      	cmp	r4, r5
 8008e64:	d106      	bne.n	8008e74 <_dtoa_r+0xb74>
 8008e66:	f000 fc83 	bl	8009770 <__multadd>
 8008e6a:	0004      	movs	r4, r0
 8008e6c:	0005      	movs	r5, r0
 8008e6e:	9b08      	ldr	r3, [sp, #32]
 8008e70:	930a      	str	r3, [sp, #40]	; 0x28
 8008e72:	e778      	b.n	8008d66 <_dtoa_r+0xa66>
 8008e74:	f000 fc7c 	bl	8009770 <__multadd>
 8008e78:	0029      	movs	r1, r5
 8008e7a:	0004      	movs	r4, r0
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	220a      	movs	r2, #10
 8008e80:	0038      	movs	r0, r7
 8008e82:	f000 fc75 	bl	8009770 <__multadd>
 8008e86:	0005      	movs	r5, r0
 8008e88:	e7f1      	b.n	8008e6e <_dtoa_r+0xb6e>
 8008e8a:	9b07      	ldr	r3, [sp, #28]
 8008e8c:	930c      	str	r3, [sp, #48]	; 0x30
 8008e8e:	2400      	movs	r4, #0
 8008e90:	0031      	movs	r1, r6
 8008e92:	9805      	ldr	r0, [sp, #20]
 8008e94:	f7ff f9a8 	bl	80081e8 <quorem>
 8008e98:	9b06      	ldr	r3, [sp, #24]
 8008e9a:	3030      	adds	r0, #48	; 0x30
 8008e9c:	5518      	strb	r0, [r3, r4]
 8008e9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ea0:	3401      	adds	r4, #1
 8008ea2:	9007      	str	r0, [sp, #28]
 8008ea4:	42a3      	cmp	r3, r4
 8008ea6:	dd07      	ble.n	8008eb8 <_dtoa_r+0xbb8>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	220a      	movs	r2, #10
 8008eac:	0038      	movs	r0, r7
 8008eae:	9905      	ldr	r1, [sp, #20]
 8008eb0:	f000 fc5e 	bl	8009770 <__multadd>
 8008eb4:	9005      	str	r0, [sp, #20]
 8008eb6:	e7eb      	b.n	8008e90 <_dtoa_r+0xb90>
 8008eb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eba:	2001      	movs	r0, #1
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	dd00      	ble.n	8008ec2 <_dtoa_r+0xbc2>
 8008ec0:	0018      	movs	r0, r3
 8008ec2:	2400      	movs	r4, #0
 8008ec4:	9b06      	ldr	r3, [sp, #24]
 8008ec6:	181b      	adds	r3, r3, r0
 8008ec8:	9308      	str	r3, [sp, #32]
 8008eca:	9905      	ldr	r1, [sp, #20]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	0038      	movs	r0, r7
 8008ed0:	f000 fe48 	bl	8009b64 <__lshift>
 8008ed4:	0031      	movs	r1, r6
 8008ed6:	9005      	str	r0, [sp, #20]
 8008ed8:	f000 feb2 	bl	8009c40 <__mcmp>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	dc9b      	bgt.n	8008e18 <_dtoa_r+0xb18>
 8008ee0:	d102      	bne.n	8008ee8 <_dtoa_r+0xbe8>
 8008ee2:	9b07      	ldr	r3, [sp, #28]
 8008ee4:	07db      	lsls	r3, r3, #31
 8008ee6:	d497      	bmi.n	8008e18 <_dtoa_r+0xb18>
 8008ee8:	9b08      	ldr	r3, [sp, #32]
 8008eea:	9308      	str	r3, [sp, #32]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	781a      	ldrb	r2, [r3, #0]
 8008ef0:	2a30      	cmp	r2, #48	; 0x30
 8008ef2:	d0fa      	beq.n	8008eea <_dtoa_r+0xbea>
 8008ef4:	e6db      	b.n	8008cae <_dtoa_r+0x9ae>
 8008ef6:	9a06      	ldr	r2, [sp, #24]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d18e      	bne.n	8008e1a <_dtoa_r+0xb1a>
 8008efc:	9b02      	ldr	r3, [sp, #8]
 8008efe:	3301      	adds	r3, #1
 8008f00:	9302      	str	r3, [sp, #8]
 8008f02:	2331      	movs	r3, #49	; 0x31
 8008f04:	e799      	b.n	8008e3a <_dtoa_r+0xb3a>
 8008f06:	4b09      	ldr	r3, [pc, #36]	; (8008f2c <_dtoa_r+0xc2c>)
 8008f08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008f0a:	9306      	str	r3, [sp, #24]
 8008f0c:	4b08      	ldr	r3, [pc, #32]	; (8008f30 <_dtoa_r+0xc30>)
 8008f0e:	2a00      	cmp	r2, #0
 8008f10:	d001      	beq.n	8008f16 <_dtoa_r+0xc16>
 8008f12:	f7ff fa3f 	bl	8008394 <_dtoa_r+0x94>
 8008f16:	f7ff fa3f 	bl	8008398 <_dtoa_r+0x98>
 8008f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	dcb6      	bgt.n	8008e8e <_dtoa_r+0xb8e>
 8008f20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	dd00      	ble.n	8008f28 <_dtoa_r+0xc28>
 8008f26:	e6ac      	b.n	8008c82 <_dtoa_r+0x982>
 8008f28:	e7b1      	b.n	8008e8e <_dtoa_r+0xb8e>
 8008f2a:	46c0      	nop			; (mov r8, r8)
 8008f2c:	0800b341 	.word	0x0800b341
 8008f30:	0800b349 	.word	0x0800b349

08008f34 <fiprintf>:
 8008f34:	b40e      	push	{r1, r2, r3}
 8008f36:	b503      	push	{r0, r1, lr}
 8008f38:	0001      	movs	r1, r0
 8008f3a:	ab03      	add	r3, sp, #12
 8008f3c:	4804      	ldr	r0, [pc, #16]	; (8008f50 <fiprintf+0x1c>)
 8008f3e:	cb04      	ldmia	r3!, {r2}
 8008f40:	6800      	ldr	r0, [r0, #0]
 8008f42:	9301      	str	r3, [sp, #4]
 8008f44:	f001 fa2c 	bl	800a3a0 <_vfiprintf_r>
 8008f48:	b002      	add	sp, #8
 8008f4a:	bc08      	pop	{r3}
 8008f4c:	b003      	add	sp, #12
 8008f4e:	4718      	bx	r3
 8008f50:	2000000c 	.word	0x2000000c

08008f54 <rshift>:
 8008f54:	0002      	movs	r2, r0
 8008f56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f58:	6904      	ldr	r4, [r0, #16]
 8008f5a:	3214      	adds	r2, #20
 8008f5c:	0013      	movs	r3, r2
 8008f5e:	b085      	sub	sp, #20
 8008f60:	114f      	asrs	r7, r1, #5
 8008f62:	42bc      	cmp	r4, r7
 8008f64:	dd31      	ble.n	8008fca <rshift+0x76>
 8008f66:	00bb      	lsls	r3, r7, #2
 8008f68:	18d3      	adds	r3, r2, r3
 8008f6a:	261f      	movs	r6, #31
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	000b      	movs	r3, r1
 8008f70:	00a5      	lsls	r5, r4, #2
 8008f72:	4033      	ands	r3, r6
 8008f74:	1955      	adds	r5, r2, r5
 8008f76:	9302      	str	r3, [sp, #8]
 8008f78:	4231      	tst	r1, r6
 8008f7a:	d10c      	bne.n	8008f96 <rshift+0x42>
 8008f7c:	0016      	movs	r6, r2
 8008f7e:	9901      	ldr	r1, [sp, #4]
 8008f80:	428d      	cmp	r5, r1
 8008f82:	d838      	bhi.n	8008ff6 <rshift+0xa2>
 8008f84:	9901      	ldr	r1, [sp, #4]
 8008f86:	2300      	movs	r3, #0
 8008f88:	3903      	subs	r1, #3
 8008f8a:	428d      	cmp	r5, r1
 8008f8c:	d301      	bcc.n	8008f92 <rshift+0x3e>
 8008f8e:	1be3      	subs	r3, r4, r7
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	18d3      	adds	r3, r2, r3
 8008f94:	e019      	b.n	8008fca <rshift+0x76>
 8008f96:	2120      	movs	r1, #32
 8008f98:	9b02      	ldr	r3, [sp, #8]
 8008f9a:	9e01      	ldr	r6, [sp, #4]
 8008f9c:	1acb      	subs	r3, r1, r3
 8008f9e:	9303      	str	r3, [sp, #12]
 8008fa0:	ce02      	ldmia	r6!, {r1}
 8008fa2:	9b02      	ldr	r3, [sp, #8]
 8008fa4:	4694      	mov	ip, r2
 8008fa6:	40d9      	lsrs	r1, r3
 8008fa8:	9100      	str	r1, [sp, #0]
 8008faa:	42b5      	cmp	r5, r6
 8008fac:	d816      	bhi.n	8008fdc <rshift+0x88>
 8008fae:	9e01      	ldr	r6, [sp, #4]
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	3601      	adds	r6, #1
 8008fb4:	42b5      	cmp	r5, r6
 8008fb6:	d302      	bcc.n	8008fbe <rshift+0x6a>
 8008fb8:	1be3      	subs	r3, r4, r7
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	3b04      	subs	r3, #4
 8008fbe:	9900      	ldr	r1, [sp, #0]
 8008fc0:	18d3      	adds	r3, r2, r3
 8008fc2:	6019      	str	r1, [r3, #0]
 8008fc4:	2900      	cmp	r1, #0
 8008fc6:	d000      	beq.n	8008fca <rshift+0x76>
 8008fc8:	3304      	adds	r3, #4
 8008fca:	1a99      	subs	r1, r3, r2
 8008fcc:	1089      	asrs	r1, r1, #2
 8008fce:	6101      	str	r1, [r0, #16]
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d101      	bne.n	8008fd8 <rshift+0x84>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	6143      	str	r3, [r0, #20]
 8008fd8:	b005      	add	sp, #20
 8008fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fdc:	6833      	ldr	r3, [r6, #0]
 8008fde:	9903      	ldr	r1, [sp, #12]
 8008fe0:	408b      	lsls	r3, r1
 8008fe2:	9900      	ldr	r1, [sp, #0]
 8008fe4:	4319      	orrs	r1, r3
 8008fe6:	4663      	mov	r3, ip
 8008fe8:	c302      	stmia	r3!, {r1}
 8008fea:	469c      	mov	ip, r3
 8008fec:	ce02      	ldmia	r6!, {r1}
 8008fee:	9b02      	ldr	r3, [sp, #8]
 8008ff0:	40d9      	lsrs	r1, r3
 8008ff2:	9100      	str	r1, [sp, #0]
 8008ff4:	e7d9      	b.n	8008faa <rshift+0x56>
 8008ff6:	c908      	ldmia	r1!, {r3}
 8008ff8:	c608      	stmia	r6!, {r3}
 8008ffa:	e7c1      	b.n	8008f80 <rshift+0x2c>

08008ffc <__hexdig_fun>:
 8008ffc:	0002      	movs	r2, r0
 8008ffe:	3a30      	subs	r2, #48	; 0x30
 8009000:	0003      	movs	r3, r0
 8009002:	2a09      	cmp	r2, #9
 8009004:	d802      	bhi.n	800900c <__hexdig_fun+0x10>
 8009006:	3b20      	subs	r3, #32
 8009008:	b2d8      	uxtb	r0, r3
 800900a:	4770      	bx	lr
 800900c:	0002      	movs	r2, r0
 800900e:	3a61      	subs	r2, #97	; 0x61
 8009010:	2a05      	cmp	r2, #5
 8009012:	d801      	bhi.n	8009018 <__hexdig_fun+0x1c>
 8009014:	3b47      	subs	r3, #71	; 0x47
 8009016:	e7f7      	b.n	8009008 <__hexdig_fun+0xc>
 8009018:	001a      	movs	r2, r3
 800901a:	3a41      	subs	r2, #65	; 0x41
 800901c:	2000      	movs	r0, #0
 800901e:	2a05      	cmp	r2, #5
 8009020:	d8f3      	bhi.n	800900a <__hexdig_fun+0xe>
 8009022:	3b27      	subs	r3, #39	; 0x27
 8009024:	e7f0      	b.n	8009008 <__hexdig_fun+0xc>
	...

08009028 <__gethex>:
 8009028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800902a:	b08d      	sub	sp, #52	; 0x34
 800902c:	930a      	str	r3, [sp, #40]	; 0x28
 800902e:	4bbf      	ldr	r3, [pc, #764]	; (800932c <__gethex+0x304>)
 8009030:	9005      	str	r0, [sp, #20]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	9109      	str	r1, [sp, #36]	; 0x24
 8009036:	0018      	movs	r0, r3
 8009038:	9202      	str	r2, [sp, #8]
 800903a:	9307      	str	r3, [sp, #28]
 800903c:	f7f7 f864 	bl	8000108 <strlen>
 8009040:	2202      	movs	r2, #2
 8009042:	9b07      	ldr	r3, [sp, #28]
 8009044:	4252      	negs	r2, r2
 8009046:	181b      	adds	r3, r3, r0
 8009048:	3b01      	subs	r3, #1
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	9003      	str	r0, [sp, #12]
 800904e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009052:	6819      	ldr	r1, [r3, #0]
 8009054:	1c8b      	adds	r3, r1, #2
 8009056:	1a52      	subs	r2, r2, r1
 8009058:	18d1      	adds	r1, r2, r3
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	9108      	str	r1, [sp, #32]
 800905e:	9901      	ldr	r1, [sp, #4]
 8009060:	3301      	adds	r3, #1
 8009062:	7808      	ldrb	r0, [r1, #0]
 8009064:	2830      	cmp	r0, #48	; 0x30
 8009066:	d0f7      	beq.n	8009058 <__gethex+0x30>
 8009068:	f7ff ffc8 	bl	8008ffc <__hexdig_fun>
 800906c:	2300      	movs	r3, #0
 800906e:	001c      	movs	r4, r3
 8009070:	9304      	str	r3, [sp, #16]
 8009072:	4298      	cmp	r0, r3
 8009074:	d11f      	bne.n	80090b6 <__gethex+0x8e>
 8009076:	9a03      	ldr	r2, [sp, #12]
 8009078:	9907      	ldr	r1, [sp, #28]
 800907a:	9801      	ldr	r0, [sp, #4]
 800907c:	f001 fad4 	bl	800a628 <strncmp>
 8009080:	0007      	movs	r7, r0
 8009082:	42a0      	cmp	r0, r4
 8009084:	d000      	beq.n	8009088 <__gethex+0x60>
 8009086:	e06b      	b.n	8009160 <__gethex+0x138>
 8009088:	9b01      	ldr	r3, [sp, #4]
 800908a:	9a03      	ldr	r2, [sp, #12]
 800908c:	5c98      	ldrb	r0, [r3, r2]
 800908e:	189d      	adds	r5, r3, r2
 8009090:	f7ff ffb4 	bl	8008ffc <__hexdig_fun>
 8009094:	2301      	movs	r3, #1
 8009096:	9304      	str	r3, [sp, #16]
 8009098:	42a0      	cmp	r0, r4
 800909a:	d030      	beq.n	80090fe <__gethex+0xd6>
 800909c:	9501      	str	r5, [sp, #4]
 800909e:	9b01      	ldr	r3, [sp, #4]
 80090a0:	7818      	ldrb	r0, [r3, #0]
 80090a2:	2830      	cmp	r0, #48	; 0x30
 80090a4:	d009      	beq.n	80090ba <__gethex+0x92>
 80090a6:	f7ff ffa9 	bl	8008ffc <__hexdig_fun>
 80090aa:	4242      	negs	r2, r0
 80090ac:	4142      	adcs	r2, r0
 80090ae:	2301      	movs	r3, #1
 80090b0:	002c      	movs	r4, r5
 80090b2:	9204      	str	r2, [sp, #16]
 80090b4:	9308      	str	r3, [sp, #32]
 80090b6:	9d01      	ldr	r5, [sp, #4]
 80090b8:	e004      	b.n	80090c4 <__gethex+0x9c>
 80090ba:	9b01      	ldr	r3, [sp, #4]
 80090bc:	3301      	adds	r3, #1
 80090be:	9301      	str	r3, [sp, #4]
 80090c0:	e7ed      	b.n	800909e <__gethex+0x76>
 80090c2:	3501      	adds	r5, #1
 80090c4:	7828      	ldrb	r0, [r5, #0]
 80090c6:	f7ff ff99 	bl	8008ffc <__hexdig_fun>
 80090ca:	1e07      	subs	r7, r0, #0
 80090cc:	d1f9      	bne.n	80090c2 <__gethex+0x9a>
 80090ce:	0028      	movs	r0, r5
 80090d0:	9a03      	ldr	r2, [sp, #12]
 80090d2:	9907      	ldr	r1, [sp, #28]
 80090d4:	f001 faa8 	bl	800a628 <strncmp>
 80090d8:	2800      	cmp	r0, #0
 80090da:	d10e      	bne.n	80090fa <__gethex+0xd2>
 80090dc:	2c00      	cmp	r4, #0
 80090de:	d107      	bne.n	80090f0 <__gethex+0xc8>
 80090e0:	9b03      	ldr	r3, [sp, #12]
 80090e2:	18ed      	adds	r5, r5, r3
 80090e4:	002c      	movs	r4, r5
 80090e6:	7828      	ldrb	r0, [r5, #0]
 80090e8:	f7ff ff88 	bl	8008ffc <__hexdig_fun>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d102      	bne.n	80090f6 <__gethex+0xce>
 80090f0:	1b64      	subs	r4, r4, r5
 80090f2:	00a7      	lsls	r7, r4, #2
 80090f4:	e003      	b.n	80090fe <__gethex+0xd6>
 80090f6:	3501      	adds	r5, #1
 80090f8:	e7f5      	b.n	80090e6 <__gethex+0xbe>
 80090fa:	2c00      	cmp	r4, #0
 80090fc:	d1f8      	bne.n	80090f0 <__gethex+0xc8>
 80090fe:	2220      	movs	r2, #32
 8009100:	782b      	ldrb	r3, [r5, #0]
 8009102:	002e      	movs	r6, r5
 8009104:	4393      	bics	r3, r2
 8009106:	2b50      	cmp	r3, #80	; 0x50
 8009108:	d11d      	bne.n	8009146 <__gethex+0x11e>
 800910a:	786b      	ldrb	r3, [r5, #1]
 800910c:	2b2b      	cmp	r3, #43	; 0x2b
 800910e:	d02c      	beq.n	800916a <__gethex+0x142>
 8009110:	2b2d      	cmp	r3, #45	; 0x2d
 8009112:	d02e      	beq.n	8009172 <__gethex+0x14a>
 8009114:	2300      	movs	r3, #0
 8009116:	1c6e      	adds	r6, r5, #1
 8009118:	9306      	str	r3, [sp, #24]
 800911a:	7830      	ldrb	r0, [r6, #0]
 800911c:	f7ff ff6e 	bl	8008ffc <__hexdig_fun>
 8009120:	1e43      	subs	r3, r0, #1
 8009122:	b2db      	uxtb	r3, r3
 8009124:	2b18      	cmp	r3, #24
 8009126:	d82b      	bhi.n	8009180 <__gethex+0x158>
 8009128:	3810      	subs	r0, #16
 800912a:	0004      	movs	r4, r0
 800912c:	7870      	ldrb	r0, [r6, #1]
 800912e:	f7ff ff65 	bl	8008ffc <__hexdig_fun>
 8009132:	1e43      	subs	r3, r0, #1
 8009134:	b2db      	uxtb	r3, r3
 8009136:	3601      	adds	r6, #1
 8009138:	2b18      	cmp	r3, #24
 800913a:	d91c      	bls.n	8009176 <__gethex+0x14e>
 800913c:	9b06      	ldr	r3, [sp, #24]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d000      	beq.n	8009144 <__gethex+0x11c>
 8009142:	4264      	negs	r4, r4
 8009144:	193f      	adds	r7, r7, r4
 8009146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009148:	601e      	str	r6, [r3, #0]
 800914a:	9b04      	ldr	r3, [sp, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d019      	beq.n	8009184 <__gethex+0x15c>
 8009150:	2600      	movs	r6, #0
 8009152:	9b08      	ldr	r3, [sp, #32]
 8009154:	42b3      	cmp	r3, r6
 8009156:	d100      	bne.n	800915a <__gethex+0x132>
 8009158:	3606      	adds	r6, #6
 800915a:	0030      	movs	r0, r6
 800915c:	b00d      	add	sp, #52	; 0x34
 800915e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009160:	2301      	movs	r3, #1
 8009162:	2700      	movs	r7, #0
 8009164:	9d01      	ldr	r5, [sp, #4]
 8009166:	9304      	str	r3, [sp, #16]
 8009168:	e7c9      	b.n	80090fe <__gethex+0xd6>
 800916a:	2300      	movs	r3, #0
 800916c:	9306      	str	r3, [sp, #24]
 800916e:	1cae      	adds	r6, r5, #2
 8009170:	e7d3      	b.n	800911a <__gethex+0xf2>
 8009172:	2301      	movs	r3, #1
 8009174:	e7fa      	b.n	800916c <__gethex+0x144>
 8009176:	230a      	movs	r3, #10
 8009178:	435c      	muls	r4, r3
 800917a:	1824      	adds	r4, r4, r0
 800917c:	3c10      	subs	r4, #16
 800917e:	e7d5      	b.n	800912c <__gethex+0x104>
 8009180:	002e      	movs	r6, r5
 8009182:	e7e0      	b.n	8009146 <__gethex+0x11e>
 8009184:	9b01      	ldr	r3, [sp, #4]
 8009186:	9904      	ldr	r1, [sp, #16]
 8009188:	1aeb      	subs	r3, r5, r3
 800918a:	3b01      	subs	r3, #1
 800918c:	2b07      	cmp	r3, #7
 800918e:	dc0a      	bgt.n	80091a6 <__gethex+0x17e>
 8009190:	9805      	ldr	r0, [sp, #20]
 8009192:	f000 fa85 	bl	80096a0 <_Balloc>
 8009196:	1e04      	subs	r4, r0, #0
 8009198:	d108      	bne.n	80091ac <__gethex+0x184>
 800919a:	0002      	movs	r2, r0
 800919c:	21de      	movs	r1, #222	; 0xde
 800919e:	4b64      	ldr	r3, [pc, #400]	; (8009330 <__gethex+0x308>)
 80091a0:	4864      	ldr	r0, [pc, #400]	; (8009334 <__gethex+0x30c>)
 80091a2:	f7ff f803 	bl	80081ac <__assert_func>
 80091a6:	3101      	adds	r1, #1
 80091a8:	105b      	asrs	r3, r3, #1
 80091aa:	e7ef      	b.n	800918c <__gethex+0x164>
 80091ac:	0003      	movs	r3, r0
 80091ae:	3314      	adds	r3, #20
 80091b0:	9304      	str	r3, [sp, #16]
 80091b2:	9309      	str	r3, [sp, #36]	; 0x24
 80091b4:	2300      	movs	r3, #0
 80091b6:	001e      	movs	r6, r3
 80091b8:	9306      	str	r3, [sp, #24]
 80091ba:	9b01      	ldr	r3, [sp, #4]
 80091bc:	42ab      	cmp	r3, r5
 80091be:	d340      	bcc.n	8009242 <__gethex+0x21a>
 80091c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80091c2:	9b04      	ldr	r3, [sp, #16]
 80091c4:	c540      	stmia	r5!, {r6}
 80091c6:	1aed      	subs	r5, r5, r3
 80091c8:	10ad      	asrs	r5, r5, #2
 80091ca:	0030      	movs	r0, r6
 80091cc:	6125      	str	r5, [r4, #16]
 80091ce:	f000 fb5f 	bl	8009890 <__hi0bits>
 80091d2:	9b02      	ldr	r3, [sp, #8]
 80091d4:	016d      	lsls	r5, r5, #5
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	1a2e      	subs	r6, r5, r0
 80091da:	9301      	str	r3, [sp, #4]
 80091dc:	429e      	cmp	r6, r3
 80091de:	dd5a      	ble.n	8009296 <__gethex+0x26e>
 80091e0:	1af6      	subs	r6, r6, r3
 80091e2:	0031      	movs	r1, r6
 80091e4:	0020      	movs	r0, r4
 80091e6:	f000 ff01 	bl	8009fec <__any_on>
 80091ea:	1e05      	subs	r5, r0, #0
 80091ec:	d016      	beq.n	800921c <__gethex+0x1f4>
 80091ee:	2501      	movs	r5, #1
 80091f0:	211f      	movs	r1, #31
 80091f2:	0028      	movs	r0, r5
 80091f4:	1e73      	subs	r3, r6, #1
 80091f6:	4019      	ands	r1, r3
 80091f8:	4088      	lsls	r0, r1
 80091fa:	0001      	movs	r1, r0
 80091fc:	115a      	asrs	r2, r3, #5
 80091fe:	9804      	ldr	r0, [sp, #16]
 8009200:	0092      	lsls	r2, r2, #2
 8009202:	5812      	ldr	r2, [r2, r0]
 8009204:	420a      	tst	r2, r1
 8009206:	d009      	beq.n	800921c <__gethex+0x1f4>
 8009208:	42ab      	cmp	r3, r5
 800920a:	dd06      	ble.n	800921a <__gethex+0x1f2>
 800920c:	0020      	movs	r0, r4
 800920e:	1eb1      	subs	r1, r6, #2
 8009210:	f000 feec 	bl	8009fec <__any_on>
 8009214:	3502      	adds	r5, #2
 8009216:	2800      	cmp	r0, #0
 8009218:	d100      	bne.n	800921c <__gethex+0x1f4>
 800921a:	2502      	movs	r5, #2
 800921c:	0031      	movs	r1, r6
 800921e:	0020      	movs	r0, r4
 8009220:	f7ff fe98 	bl	8008f54 <rshift>
 8009224:	19bf      	adds	r7, r7, r6
 8009226:	9b02      	ldr	r3, [sp, #8]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	9303      	str	r3, [sp, #12]
 800922c:	42bb      	cmp	r3, r7
 800922e:	da42      	bge.n	80092b6 <__gethex+0x28e>
 8009230:	0021      	movs	r1, r4
 8009232:	9805      	ldr	r0, [sp, #20]
 8009234:	f000 fa78 	bl	8009728 <_Bfree>
 8009238:	2300      	movs	r3, #0
 800923a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800923c:	26a3      	movs	r6, #163	; 0xa3
 800923e:	6013      	str	r3, [r2, #0]
 8009240:	e78b      	b.n	800915a <__gethex+0x132>
 8009242:	1e6b      	subs	r3, r5, #1
 8009244:	9308      	str	r3, [sp, #32]
 8009246:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	4293      	cmp	r3, r2
 800924c:	d014      	beq.n	8009278 <__gethex+0x250>
 800924e:	9b06      	ldr	r3, [sp, #24]
 8009250:	2b20      	cmp	r3, #32
 8009252:	d104      	bne.n	800925e <__gethex+0x236>
 8009254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009256:	c340      	stmia	r3!, {r6}
 8009258:	2600      	movs	r6, #0
 800925a:	9309      	str	r3, [sp, #36]	; 0x24
 800925c:	9606      	str	r6, [sp, #24]
 800925e:	9b08      	ldr	r3, [sp, #32]
 8009260:	7818      	ldrb	r0, [r3, #0]
 8009262:	f7ff fecb 	bl	8008ffc <__hexdig_fun>
 8009266:	230f      	movs	r3, #15
 8009268:	4018      	ands	r0, r3
 800926a:	9b06      	ldr	r3, [sp, #24]
 800926c:	9d08      	ldr	r5, [sp, #32]
 800926e:	4098      	lsls	r0, r3
 8009270:	3304      	adds	r3, #4
 8009272:	4306      	orrs	r6, r0
 8009274:	9306      	str	r3, [sp, #24]
 8009276:	e7a0      	b.n	80091ba <__gethex+0x192>
 8009278:	2301      	movs	r3, #1
 800927a:	9a03      	ldr	r2, [sp, #12]
 800927c:	1a9d      	subs	r5, r3, r2
 800927e:	9b08      	ldr	r3, [sp, #32]
 8009280:	195d      	adds	r5, r3, r5
 8009282:	9b01      	ldr	r3, [sp, #4]
 8009284:	429d      	cmp	r5, r3
 8009286:	d3e2      	bcc.n	800924e <__gethex+0x226>
 8009288:	0028      	movs	r0, r5
 800928a:	9907      	ldr	r1, [sp, #28]
 800928c:	f001 f9cc 	bl	800a628 <strncmp>
 8009290:	2800      	cmp	r0, #0
 8009292:	d1dc      	bne.n	800924e <__gethex+0x226>
 8009294:	e791      	b.n	80091ba <__gethex+0x192>
 8009296:	9b01      	ldr	r3, [sp, #4]
 8009298:	2500      	movs	r5, #0
 800929a:	429e      	cmp	r6, r3
 800929c:	dac3      	bge.n	8009226 <__gethex+0x1fe>
 800929e:	1b9e      	subs	r6, r3, r6
 80092a0:	0021      	movs	r1, r4
 80092a2:	0032      	movs	r2, r6
 80092a4:	9805      	ldr	r0, [sp, #20]
 80092a6:	f000 fc5d 	bl	8009b64 <__lshift>
 80092aa:	0003      	movs	r3, r0
 80092ac:	3314      	adds	r3, #20
 80092ae:	0004      	movs	r4, r0
 80092b0:	1bbf      	subs	r7, r7, r6
 80092b2:	9304      	str	r3, [sp, #16]
 80092b4:	e7b7      	b.n	8009226 <__gethex+0x1fe>
 80092b6:	9b02      	ldr	r3, [sp, #8]
 80092b8:	685e      	ldr	r6, [r3, #4]
 80092ba:	42be      	cmp	r6, r7
 80092bc:	dd71      	ble.n	80093a2 <__gethex+0x37a>
 80092be:	9b01      	ldr	r3, [sp, #4]
 80092c0:	1bf6      	subs	r6, r6, r7
 80092c2:	42b3      	cmp	r3, r6
 80092c4:	dc38      	bgt.n	8009338 <__gethex+0x310>
 80092c6:	9b02      	ldr	r3, [sp, #8]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d026      	beq.n	800931c <__gethex+0x2f4>
 80092ce:	2b03      	cmp	r3, #3
 80092d0:	d028      	beq.n	8009324 <__gethex+0x2fc>
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d119      	bne.n	800930a <__gethex+0x2e2>
 80092d6:	9b01      	ldr	r3, [sp, #4]
 80092d8:	42b3      	cmp	r3, r6
 80092da:	d116      	bne.n	800930a <__gethex+0x2e2>
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d10d      	bne.n	80092fc <__gethex+0x2d4>
 80092e0:	9b02      	ldr	r3, [sp, #8]
 80092e2:	2662      	movs	r6, #98	; 0x62
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	9301      	str	r3, [sp, #4]
 80092e8:	9a01      	ldr	r2, [sp, #4]
 80092ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092ec:	601a      	str	r2, [r3, #0]
 80092ee:	2301      	movs	r3, #1
 80092f0:	9a04      	ldr	r2, [sp, #16]
 80092f2:	6123      	str	r3, [r4, #16]
 80092f4:	6013      	str	r3, [r2, #0]
 80092f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092f8:	601c      	str	r4, [r3, #0]
 80092fa:	e72e      	b.n	800915a <__gethex+0x132>
 80092fc:	9901      	ldr	r1, [sp, #4]
 80092fe:	0020      	movs	r0, r4
 8009300:	3901      	subs	r1, #1
 8009302:	f000 fe73 	bl	8009fec <__any_on>
 8009306:	2800      	cmp	r0, #0
 8009308:	d1ea      	bne.n	80092e0 <__gethex+0x2b8>
 800930a:	0021      	movs	r1, r4
 800930c:	9805      	ldr	r0, [sp, #20]
 800930e:	f000 fa0b 	bl	8009728 <_Bfree>
 8009312:	2300      	movs	r3, #0
 8009314:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009316:	2650      	movs	r6, #80	; 0x50
 8009318:	6013      	str	r3, [r2, #0]
 800931a:	e71e      	b.n	800915a <__gethex+0x132>
 800931c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1f3      	bne.n	800930a <__gethex+0x2e2>
 8009322:	e7dd      	b.n	80092e0 <__gethex+0x2b8>
 8009324:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1da      	bne.n	80092e0 <__gethex+0x2b8>
 800932a:	e7ee      	b.n	800930a <__gethex+0x2e2>
 800932c:	0800b420 	.word	0x0800b420
 8009330:	0800b3a9 	.word	0x0800b3a9
 8009334:	0800b3ba 	.word	0x0800b3ba
 8009338:	1e77      	subs	r7, r6, #1
 800933a:	2d00      	cmp	r5, #0
 800933c:	d12f      	bne.n	800939e <__gethex+0x376>
 800933e:	2f00      	cmp	r7, #0
 8009340:	d004      	beq.n	800934c <__gethex+0x324>
 8009342:	0039      	movs	r1, r7
 8009344:	0020      	movs	r0, r4
 8009346:	f000 fe51 	bl	8009fec <__any_on>
 800934a:	0005      	movs	r5, r0
 800934c:	231f      	movs	r3, #31
 800934e:	117a      	asrs	r2, r7, #5
 8009350:	401f      	ands	r7, r3
 8009352:	3b1e      	subs	r3, #30
 8009354:	40bb      	lsls	r3, r7
 8009356:	9904      	ldr	r1, [sp, #16]
 8009358:	0092      	lsls	r2, r2, #2
 800935a:	5852      	ldr	r2, [r2, r1]
 800935c:	421a      	tst	r2, r3
 800935e:	d001      	beq.n	8009364 <__gethex+0x33c>
 8009360:	2302      	movs	r3, #2
 8009362:	431d      	orrs	r5, r3
 8009364:	9b01      	ldr	r3, [sp, #4]
 8009366:	0031      	movs	r1, r6
 8009368:	1b9b      	subs	r3, r3, r6
 800936a:	2602      	movs	r6, #2
 800936c:	0020      	movs	r0, r4
 800936e:	9301      	str	r3, [sp, #4]
 8009370:	f7ff fdf0 	bl	8008f54 <rshift>
 8009374:	9b02      	ldr	r3, [sp, #8]
 8009376:	685f      	ldr	r7, [r3, #4]
 8009378:	2d00      	cmp	r5, #0
 800937a:	d041      	beq.n	8009400 <__gethex+0x3d8>
 800937c:	9b02      	ldr	r3, [sp, #8]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	2b02      	cmp	r3, #2
 8009382:	d010      	beq.n	80093a6 <__gethex+0x37e>
 8009384:	2b03      	cmp	r3, #3
 8009386:	d012      	beq.n	80093ae <__gethex+0x386>
 8009388:	2b01      	cmp	r3, #1
 800938a:	d106      	bne.n	800939a <__gethex+0x372>
 800938c:	07aa      	lsls	r2, r5, #30
 800938e:	d504      	bpl.n	800939a <__gethex+0x372>
 8009390:	9a04      	ldr	r2, [sp, #16]
 8009392:	6810      	ldr	r0, [r2, #0]
 8009394:	4305      	orrs	r5, r0
 8009396:	421d      	tst	r5, r3
 8009398:	d10c      	bne.n	80093b4 <__gethex+0x38c>
 800939a:	2310      	movs	r3, #16
 800939c:	e02f      	b.n	80093fe <__gethex+0x3d6>
 800939e:	2501      	movs	r5, #1
 80093a0:	e7d4      	b.n	800934c <__gethex+0x324>
 80093a2:	2601      	movs	r6, #1
 80093a4:	e7e8      	b.n	8009378 <__gethex+0x350>
 80093a6:	2301      	movs	r3, #1
 80093a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80093aa:	1a9b      	subs	r3, r3, r2
 80093ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80093ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d0f2      	beq.n	800939a <__gethex+0x372>
 80093b4:	6923      	ldr	r3, [r4, #16]
 80093b6:	2000      	movs	r0, #0
 80093b8:	9303      	str	r3, [sp, #12]
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	9304      	str	r3, [sp, #16]
 80093be:	0023      	movs	r3, r4
 80093c0:	9a04      	ldr	r2, [sp, #16]
 80093c2:	3314      	adds	r3, #20
 80093c4:	1899      	adds	r1, r3, r2
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	1c55      	adds	r5, r2, #1
 80093ca:	d01e      	beq.n	800940a <__gethex+0x3e2>
 80093cc:	3201      	adds	r2, #1
 80093ce:	601a      	str	r2, [r3, #0]
 80093d0:	0023      	movs	r3, r4
 80093d2:	3314      	adds	r3, #20
 80093d4:	2e02      	cmp	r6, #2
 80093d6:	d140      	bne.n	800945a <__gethex+0x432>
 80093d8:	9a02      	ldr	r2, [sp, #8]
 80093da:	9901      	ldr	r1, [sp, #4]
 80093dc:	6812      	ldr	r2, [r2, #0]
 80093de:	3a01      	subs	r2, #1
 80093e0:	428a      	cmp	r2, r1
 80093e2:	d10b      	bne.n	80093fc <__gethex+0x3d4>
 80093e4:	114a      	asrs	r2, r1, #5
 80093e6:	211f      	movs	r1, #31
 80093e8:	9801      	ldr	r0, [sp, #4]
 80093ea:	0092      	lsls	r2, r2, #2
 80093ec:	4001      	ands	r1, r0
 80093ee:	2001      	movs	r0, #1
 80093f0:	0005      	movs	r5, r0
 80093f2:	408d      	lsls	r5, r1
 80093f4:	58d3      	ldr	r3, [r2, r3]
 80093f6:	422b      	tst	r3, r5
 80093f8:	d000      	beq.n	80093fc <__gethex+0x3d4>
 80093fa:	2601      	movs	r6, #1
 80093fc:	2320      	movs	r3, #32
 80093fe:	431e      	orrs	r6, r3
 8009400:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009402:	601c      	str	r4, [r3, #0]
 8009404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009406:	601f      	str	r7, [r3, #0]
 8009408:	e6a7      	b.n	800915a <__gethex+0x132>
 800940a:	c301      	stmia	r3!, {r0}
 800940c:	4299      	cmp	r1, r3
 800940e:	d8da      	bhi.n	80093c6 <__gethex+0x39e>
 8009410:	9b03      	ldr	r3, [sp, #12]
 8009412:	68a2      	ldr	r2, [r4, #8]
 8009414:	4293      	cmp	r3, r2
 8009416:	db17      	blt.n	8009448 <__gethex+0x420>
 8009418:	6863      	ldr	r3, [r4, #4]
 800941a:	9805      	ldr	r0, [sp, #20]
 800941c:	1c59      	adds	r1, r3, #1
 800941e:	f000 f93f 	bl	80096a0 <_Balloc>
 8009422:	1e05      	subs	r5, r0, #0
 8009424:	d103      	bne.n	800942e <__gethex+0x406>
 8009426:	0002      	movs	r2, r0
 8009428:	2184      	movs	r1, #132	; 0x84
 800942a:	4b1c      	ldr	r3, [pc, #112]	; (800949c <__gethex+0x474>)
 800942c:	e6b8      	b.n	80091a0 <__gethex+0x178>
 800942e:	0021      	movs	r1, r4
 8009430:	6923      	ldr	r3, [r4, #16]
 8009432:	310c      	adds	r1, #12
 8009434:	1c9a      	adds	r2, r3, #2
 8009436:	0092      	lsls	r2, r2, #2
 8009438:	300c      	adds	r0, #12
 800943a:	f7fd f985 	bl	8006748 <memcpy>
 800943e:	0021      	movs	r1, r4
 8009440:	9805      	ldr	r0, [sp, #20]
 8009442:	f000 f971 	bl	8009728 <_Bfree>
 8009446:	002c      	movs	r4, r5
 8009448:	6923      	ldr	r3, [r4, #16]
 800944a:	1c5a      	adds	r2, r3, #1
 800944c:	6122      	str	r2, [r4, #16]
 800944e:	2201      	movs	r2, #1
 8009450:	3304      	adds	r3, #4
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	18e3      	adds	r3, r4, r3
 8009456:	605a      	str	r2, [r3, #4]
 8009458:	e7ba      	b.n	80093d0 <__gethex+0x3a8>
 800945a:	6922      	ldr	r2, [r4, #16]
 800945c:	9903      	ldr	r1, [sp, #12]
 800945e:	428a      	cmp	r2, r1
 8009460:	dd09      	ble.n	8009476 <__gethex+0x44e>
 8009462:	2101      	movs	r1, #1
 8009464:	0020      	movs	r0, r4
 8009466:	f7ff fd75 	bl	8008f54 <rshift>
 800946a:	9b02      	ldr	r3, [sp, #8]
 800946c:	3701      	adds	r7, #1
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	42bb      	cmp	r3, r7
 8009472:	dac2      	bge.n	80093fa <__gethex+0x3d2>
 8009474:	e6dc      	b.n	8009230 <__gethex+0x208>
 8009476:	221f      	movs	r2, #31
 8009478:	9d01      	ldr	r5, [sp, #4]
 800947a:	9901      	ldr	r1, [sp, #4]
 800947c:	2601      	movs	r6, #1
 800947e:	4015      	ands	r5, r2
 8009480:	4211      	tst	r1, r2
 8009482:	d0bb      	beq.n	80093fc <__gethex+0x3d4>
 8009484:	9a04      	ldr	r2, [sp, #16]
 8009486:	189b      	adds	r3, r3, r2
 8009488:	3b04      	subs	r3, #4
 800948a:	6818      	ldr	r0, [r3, #0]
 800948c:	f000 fa00 	bl	8009890 <__hi0bits>
 8009490:	2320      	movs	r3, #32
 8009492:	1b5d      	subs	r5, r3, r5
 8009494:	42a8      	cmp	r0, r5
 8009496:	dbe4      	blt.n	8009462 <__gethex+0x43a>
 8009498:	e7b0      	b.n	80093fc <__gethex+0x3d4>
 800949a:	46c0      	nop			; (mov r8, r8)
 800949c:	0800b3a9 	.word	0x0800b3a9

080094a0 <L_shift>:
 80094a0:	2308      	movs	r3, #8
 80094a2:	b570      	push	{r4, r5, r6, lr}
 80094a4:	2520      	movs	r5, #32
 80094a6:	1a9a      	subs	r2, r3, r2
 80094a8:	0092      	lsls	r2, r2, #2
 80094aa:	1aad      	subs	r5, r5, r2
 80094ac:	6843      	ldr	r3, [r0, #4]
 80094ae:	6806      	ldr	r6, [r0, #0]
 80094b0:	001c      	movs	r4, r3
 80094b2:	40ac      	lsls	r4, r5
 80094b4:	40d3      	lsrs	r3, r2
 80094b6:	4334      	orrs	r4, r6
 80094b8:	6004      	str	r4, [r0, #0]
 80094ba:	6043      	str	r3, [r0, #4]
 80094bc:	3004      	adds	r0, #4
 80094be:	4288      	cmp	r0, r1
 80094c0:	d3f4      	bcc.n	80094ac <L_shift+0xc>
 80094c2:	bd70      	pop	{r4, r5, r6, pc}

080094c4 <__match>:
 80094c4:	b530      	push	{r4, r5, lr}
 80094c6:	6803      	ldr	r3, [r0, #0]
 80094c8:	780c      	ldrb	r4, [r1, #0]
 80094ca:	3301      	adds	r3, #1
 80094cc:	2c00      	cmp	r4, #0
 80094ce:	d102      	bne.n	80094d6 <__match+0x12>
 80094d0:	6003      	str	r3, [r0, #0]
 80094d2:	2001      	movs	r0, #1
 80094d4:	bd30      	pop	{r4, r5, pc}
 80094d6:	781a      	ldrb	r2, [r3, #0]
 80094d8:	0015      	movs	r5, r2
 80094da:	3d41      	subs	r5, #65	; 0x41
 80094dc:	2d19      	cmp	r5, #25
 80094de:	d800      	bhi.n	80094e2 <__match+0x1e>
 80094e0:	3220      	adds	r2, #32
 80094e2:	3101      	adds	r1, #1
 80094e4:	42a2      	cmp	r2, r4
 80094e6:	d0ef      	beq.n	80094c8 <__match+0x4>
 80094e8:	2000      	movs	r0, #0
 80094ea:	e7f3      	b.n	80094d4 <__match+0x10>

080094ec <__hexnan>:
 80094ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ee:	680b      	ldr	r3, [r1, #0]
 80094f0:	b08b      	sub	sp, #44	; 0x2c
 80094f2:	9201      	str	r2, [sp, #4]
 80094f4:	9901      	ldr	r1, [sp, #4]
 80094f6:	115a      	asrs	r2, r3, #5
 80094f8:	0092      	lsls	r2, r2, #2
 80094fa:	188a      	adds	r2, r1, r2
 80094fc:	9202      	str	r2, [sp, #8]
 80094fe:	0019      	movs	r1, r3
 8009500:	221f      	movs	r2, #31
 8009502:	4011      	ands	r1, r2
 8009504:	9008      	str	r0, [sp, #32]
 8009506:	9106      	str	r1, [sp, #24]
 8009508:	4213      	tst	r3, r2
 800950a:	d002      	beq.n	8009512 <__hexnan+0x26>
 800950c:	9b02      	ldr	r3, [sp, #8]
 800950e:	3304      	adds	r3, #4
 8009510:	9302      	str	r3, [sp, #8]
 8009512:	9b02      	ldr	r3, [sp, #8]
 8009514:	2500      	movs	r5, #0
 8009516:	1f1e      	subs	r6, r3, #4
 8009518:	0037      	movs	r7, r6
 800951a:	0034      	movs	r4, r6
 800951c:	9b08      	ldr	r3, [sp, #32]
 800951e:	6035      	str	r5, [r6, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	9507      	str	r5, [sp, #28]
 8009524:	9305      	str	r3, [sp, #20]
 8009526:	9503      	str	r5, [sp, #12]
 8009528:	9b05      	ldr	r3, [sp, #20]
 800952a:	3301      	adds	r3, #1
 800952c:	9309      	str	r3, [sp, #36]	; 0x24
 800952e:	9b05      	ldr	r3, [sp, #20]
 8009530:	785b      	ldrb	r3, [r3, #1]
 8009532:	9304      	str	r3, [sp, #16]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d028      	beq.n	800958a <__hexnan+0x9e>
 8009538:	9804      	ldr	r0, [sp, #16]
 800953a:	f7ff fd5f 	bl	8008ffc <__hexdig_fun>
 800953e:	2800      	cmp	r0, #0
 8009540:	d154      	bne.n	80095ec <__hexnan+0x100>
 8009542:	9b04      	ldr	r3, [sp, #16]
 8009544:	2b20      	cmp	r3, #32
 8009546:	d819      	bhi.n	800957c <__hexnan+0x90>
 8009548:	9b03      	ldr	r3, [sp, #12]
 800954a:	9a07      	ldr	r2, [sp, #28]
 800954c:	4293      	cmp	r3, r2
 800954e:	dd12      	ble.n	8009576 <__hexnan+0x8a>
 8009550:	42bc      	cmp	r4, r7
 8009552:	d206      	bcs.n	8009562 <__hexnan+0x76>
 8009554:	2d07      	cmp	r5, #7
 8009556:	dc04      	bgt.n	8009562 <__hexnan+0x76>
 8009558:	002a      	movs	r2, r5
 800955a:	0039      	movs	r1, r7
 800955c:	0020      	movs	r0, r4
 800955e:	f7ff ff9f 	bl	80094a0 <L_shift>
 8009562:	9b01      	ldr	r3, [sp, #4]
 8009564:	2508      	movs	r5, #8
 8009566:	429c      	cmp	r4, r3
 8009568:	d905      	bls.n	8009576 <__hexnan+0x8a>
 800956a:	1f27      	subs	r7, r4, #4
 800956c:	2500      	movs	r5, #0
 800956e:	003c      	movs	r4, r7
 8009570:	9b03      	ldr	r3, [sp, #12]
 8009572:	603d      	str	r5, [r7, #0]
 8009574:	9307      	str	r3, [sp, #28]
 8009576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009578:	9305      	str	r3, [sp, #20]
 800957a:	e7d5      	b.n	8009528 <__hexnan+0x3c>
 800957c:	9b04      	ldr	r3, [sp, #16]
 800957e:	2b29      	cmp	r3, #41	; 0x29
 8009580:	d159      	bne.n	8009636 <__hexnan+0x14a>
 8009582:	9b05      	ldr	r3, [sp, #20]
 8009584:	9a08      	ldr	r2, [sp, #32]
 8009586:	3302      	adds	r3, #2
 8009588:	6013      	str	r3, [r2, #0]
 800958a:	9b03      	ldr	r3, [sp, #12]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d052      	beq.n	8009636 <__hexnan+0x14a>
 8009590:	42bc      	cmp	r4, r7
 8009592:	d206      	bcs.n	80095a2 <__hexnan+0xb6>
 8009594:	2d07      	cmp	r5, #7
 8009596:	dc04      	bgt.n	80095a2 <__hexnan+0xb6>
 8009598:	002a      	movs	r2, r5
 800959a:	0039      	movs	r1, r7
 800959c:	0020      	movs	r0, r4
 800959e:	f7ff ff7f 	bl	80094a0 <L_shift>
 80095a2:	9b01      	ldr	r3, [sp, #4]
 80095a4:	429c      	cmp	r4, r3
 80095a6:	d935      	bls.n	8009614 <__hexnan+0x128>
 80095a8:	001a      	movs	r2, r3
 80095aa:	0023      	movs	r3, r4
 80095ac:	cb02      	ldmia	r3!, {r1}
 80095ae:	c202      	stmia	r2!, {r1}
 80095b0:	429e      	cmp	r6, r3
 80095b2:	d2fb      	bcs.n	80095ac <__hexnan+0xc0>
 80095b4:	9b02      	ldr	r3, [sp, #8]
 80095b6:	1c61      	adds	r1, r4, #1
 80095b8:	1eda      	subs	r2, r3, #3
 80095ba:	2304      	movs	r3, #4
 80095bc:	4291      	cmp	r1, r2
 80095be:	d805      	bhi.n	80095cc <__hexnan+0xe0>
 80095c0:	9b02      	ldr	r3, [sp, #8]
 80095c2:	3b04      	subs	r3, #4
 80095c4:	1b1b      	subs	r3, r3, r4
 80095c6:	089b      	lsrs	r3, r3, #2
 80095c8:	3301      	adds	r3, #1
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	9a01      	ldr	r2, [sp, #4]
 80095ce:	18d3      	adds	r3, r2, r3
 80095d0:	2200      	movs	r2, #0
 80095d2:	c304      	stmia	r3!, {r2}
 80095d4:	429e      	cmp	r6, r3
 80095d6:	d2fc      	bcs.n	80095d2 <__hexnan+0xe6>
 80095d8:	6833      	ldr	r3, [r6, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d104      	bne.n	80095e8 <__hexnan+0xfc>
 80095de:	9b01      	ldr	r3, [sp, #4]
 80095e0:	429e      	cmp	r6, r3
 80095e2:	d126      	bne.n	8009632 <__hexnan+0x146>
 80095e4:	2301      	movs	r3, #1
 80095e6:	6033      	str	r3, [r6, #0]
 80095e8:	2005      	movs	r0, #5
 80095ea:	e025      	b.n	8009638 <__hexnan+0x14c>
 80095ec:	9b03      	ldr	r3, [sp, #12]
 80095ee:	3501      	adds	r5, #1
 80095f0:	3301      	adds	r3, #1
 80095f2:	9303      	str	r3, [sp, #12]
 80095f4:	2d08      	cmp	r5, #8
 80095f6:	dd06      	ble.n	8009606 <__hexnan+0x11a>
 80095f8:	9b01      	ldr	r3, [sp, #4]
 80095fa:	429c      	cmp	r4, r3
 80095fc:	d9bb      	bls.n	8009576 <__hexnan+0x8a>
 80095fe:	2300      	movs	r3, #0
 8009600:	2501      	movs	r5, #1
 8009602:	3c04      	subs	r4, #4
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	220f      	movs	r2, #15
 8009608:	6823      	ldr	r3, [r4, #0]
 800960a:	4010      	ands	r0, r2
 800960c:	011b      	lsls	r3, r3, #4
 800960e:	4318      	orrs	r0, r3
 8009610:	6020      	str	r0, [r4, #0]
 8009612:	e7b0      	b.n	8009576 <__hexnan+0x8a>
 8009614:	9b06      	ldr	r3, [sp, #24]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d0de      	beq.n	80095d8 <__hexnan+0xec>
 800961a:	2120      	movs	r1, #32
 800961c:	9a06      	ldr	r2, [sp, #24]
 800961e:	9b02      	ldr	r3, [sp, #8]
 8009620:	1a89      	subs	r1, r1, r2
 8009622:	2201      	movs	r2, #1
 8009624:	4252      	negs	r2, r2
 8009626:	40ca      	lsrs	r2, r1
 8009628:	3b04      	subs	r3, #4
 800962a:	6819      	ldr	r1, [r3, #0]
 800962c:	400a      	ands	r2, r1
 800962e:	601a      	str	r2, [r3, #0]
 8009630:	e7d2      	b.n	80095d8 <__hexnan+0xec>
 8009632:	3e04      	subs	r6, #4
 8009634:	e7d0      	b.n	80095d8 <__hexnan+0xec>
 8009636:	2004      	movs	r0, #4
 8009638:	b00b      	add	sp, #44	; 0x2c
 800963a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800963c <_localeconv_r>:
 800963c:	4800      	ldr	r0, [pc, #0]	; (8009640 <_localeconv_r+0x4>)
 800963e:	4770      	bx	lr
 8009640:	20000164 	.word	0x20000164

08009644 <__ascii_mbtowc>:
 8009644:	b082      	sub	sp, #8
 8009646:	2900      	cmp	r1, #0
 8009648:	d100      	bne.n	800964c <__ascii_mbtowc+0x8>
 800964a:	a901      	add	r1, sp, #4
 800964c:	1e10      	subs	r0, r2, #0
 800964e:	d006      	beq.n	800965e <__ascii_mbtowc+0x1a>
 8009650:	2b00      	cmp	r3, #0
 8009652:	d006      	beq.n	8009662 <__ascii_mbtowc+0x1e>
 8009654:	7813      	ldrb	r3, [r2, #0]
 8009656:	600b      	str	r3, [r1, #0]
 8009658:	7810      	ldrb	r0, [r2, #0]
 800965a:	1e43      	subs	r3, r0, #1
 800965c:	4198      	sbcs	r0, r3
 800965e:	b002      	add	sp, #8
 8009660:	4770      	bx	lr
 8009662:	2002      	movs	r0, #2
 8009664:	4240      	negs	r0, r0
 8009666:	e7fa      	b.n	800965e <__ascii_mbtowc+0x1a>

08009668 <memchr>:
 8009668:	b2c9      	uxtb	r1, r1
 800966a:	1882      	adds	r2, r0, r2
 800966c:	4290      	cmp	r0, r2
 800966e:	d101      	bne.n	8009674 <memchr+0xc>
 8009670:	2000      	movs	r0, #0
 8009672:	4770      	bx	lr
 8009674:	7803      	ldrb	r3, [r0, #0]
 8009676:	428b      	cmp	r3, r1
 8009678:	d0fb      	beq.n	8009672 <memchr+0xa>
 800967a:	3001      	adds	r0, #1
 800967c:	e7f6      	b.n	800966c <memchr+0x4>
	...

08009680 <__malloc_lock>:
 8009680:	b510      	push	{r4, lr}
 8009682:	4802      	ldr	r0, [pc, #8]	; (800968c <__malloc_lock+0xc>)
 8009684:	f001 fa95 	bl	800abb2 <__retarget_lock_acquire_recursive>
 8009688:	bd10      	pop	{r4, pc}
 800968a:	46c0      	nop			; (mov r8, r8)
 800968c:	20000620 	.word	0x20000620

08009690 <__malloc_unlock>:
 8009690:	b510      	push	{r4, lr}
 8009692:	4802      	ldr	r0, [pc, #8]	; (800969c <__malloc_unlock+0xc>)
 8009694:	f001 fa8e 	bl	800abb4 <__retarget_lock_release_recursive>
 8009698:	bd10      	pop	{r4, pc}
 800969a:	46c0      	nop			; (mov r8, r8)
 800969c:	20000620 	.word	0x20000620

080096a0 <_Balloc>:
 80096a0:	b570      	push	{r4, r5, r6, lr}
 80096a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80096a4:	0006      	movs	r6, r0
 80096a6:	000c      	movs	r4, r1
 80096a8:	2d00      	cmp	r5, #0
 80096aa:	d10e      	bne.n	80096ca <_Balloc+0x2a>
 80096ac:	2010      	movs	r0, #16
 80096ae:	f7fd f837 	bl	8006720 <malloc>
 80096b2:	1e02      	subs	r2, r0, #0
 80096b4:	6270      	str	r0, [r6, #36]	; 0x24
 80096b6:	d104      	bne.n	80096c2 <_Balloc+0x22>
 80096b8:	2166      	movs	r1, #102	; 0x66
 80096ba:	4b19      	ldr	r3, [pc, #100]	; (8009720 <_Balloc+0x80>)
 80096bc:	4819      	ldr	r0, [pc, #100]	; (8009724 <_Balloc+0x84>)
 80096be:	f7fe fd75 	bl	80081ac <__assert_func>
 80096c2:	6045      	str	r5, [r0, #4]
 80096c4:	6085      	str	r5, [r0, #8]
 80096c6:	6005      	str	r5, [r0, #0]
 80096c8:	60c5      	str	r5, [r0, #12]
 80096ca:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80096cc:	68eb      	ldr	r3, [r5, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d013      	beq.n	80096fa <_Balloc+0x5a>
 80096d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80096d4:	00a2      	lsls	r2, r4, #2
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	189b      	adds	r3, r3, r2
 80096da:	6818      	ldr	r0, [r3, #0]
 80096dc:	2800      	cmp	r0, #0
 80096de:	d118      	bne.n	8009712 <_Balloc+0x72>
 80096e0:	2101      	movs	r1, #1
 80096e2:	000d      	movs	r5, r1
 80096e4:	40a5      	lsls	r5, r4
 80096e6:	1d6a      	adds	r2, r5, #5
 80096e8:	0030      	movs	r0, r6
 80096ea:	0092      	lsls	r2, r2, #2
 80096ec:	f000 fca1 	bl	800a032 <_calloc_r>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d00c      	beq.n	800970e <_Balloc+0x6e>
 80096f4:	6044      	str	r4, [r0, #4]
 80096f6:	6085      	str	r5, [r0, #8]
 80096f8:	e00d      	b.n	8009716 <_Balloc+0x76>
 80096fa:	2221      	movs	r2, #33	; 0x21
 80096fc:	2104      	movs	r1, #4
 80096fe:	0030      	movs	r0, r6
 8009700:	f000 fc97 	bl	800a032 <_calloc_r>
 8009704:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009706:	60e8      	str	r0, [r5, #12]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1e1      	bne.n	80096d2 <_Balloc+0x32>
 800970e:	2000      	movs	r0, #0
 8009710:	bd70      	pop	{r4, r5, r6, pc}
 8009712:	6802      	ldr	r2, [r0, #0]
 8009714:	601a      	str	r2, [r3, #0]
 8009716:	2300      	movs	r3, #0
 8009718:	6103      	str	r3, [r0, #16]
 800971a:	60c3      	str	r3, [r0, #12]
 800971c:	e7f8      	b.n	8009710 <_Balloc+0x70>
 800971e:	46c0      	nop			; (mov r8, r8)
 8009720:	0800b190 	.word	0x0800b190
 8009724:	0800b434 	.word	0x0800b434

08009728 <_Bfree>:
 8009728:	b570      	push	{r4, r5, r6, lr}
 800972a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800972c:	0005      	movs	r5, r0
 800972e:	000c      	movs	r4, r1
 8009730:	2e00      	cmp	r6, #0
 8009732:	d10e      	bne.n	8009752 <_Bfree+0x2a>
 8009734:	2010      	movs	r0, #16
 8009736:	f7fc fff3 	bl	8006720 <malloc>
 800973a:	1e02      	subs	r2, r0, #0
 800973c:	6268      	str	r0, [r5, #36]	; 0x24
 800973e:	d104      	bne.n	800974a <_Bfree+0x22>
 8009740:	218a      	movs	r1, #138	; 0x8a
 8009742:	4b09      	ldr	r3, [pc, #36]	; (8009768 <_Bfree+0x40>)
 8009744:	4809      	ldr	r0, [pc, #36]	; (800976c <_Bfree+0x44>)
 8009746:	f7fe fd31 	bl	80081ac <__assert_func>
 800974a:	6046      	str	r6, [r0, #4]
 800974c:	6086      	str	r6, [r0, #8]
 800974e:	6006      	str	r6, [r0, #0]
 8009750:	60c6      	str	r6, [r0, #12]
 8009752:	2c00      	cmp	r4, #0
 8009754:	d007      	beq.n	8009766 <_Bfree+0x3e>
 8009756:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009758:	6862      	ldr	r2, [r4, #4]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	0092      	lsls	r2, r2, #2
 800975e:	189b      	adds	r3, r3, r2
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	6022      	str	r2, [r4, #0]
 8009764:	601c      	str	r4, [r3, #0]
 8009766:	bd70      	pop	{r4, r5, r6, pc}
 8009768:	0800b190 	.word	0x0800b190
 800976c:	0800b434 	.word	0x0800b434

08009770 <__multadd>:
 8009770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009772:	000e      	movs	r6, r1
 8009774:	9001      	str	r0, [sp, #4]
 8009776:	000c      	movs	r4, r1
 8009778:	001d      	movs	r5, r3
 800977a:	2000      	movs	r0, #0
 800977c:	690f      	ldr	r7, [r1, #16]
 800977e:	3614      	adds	r6, #20
 8009780:	6833      	ldr	r3, [r6, #0]
 8009782:	3001      	adds	r0, #1
 8009784:	b299      	uxth	r1, r3
 8009786:	4351      	muls	r1, r2
 8009788:	0c1b      	lsrs	r3, r3, #16
 800978a:	4353      	muls	r3, r2
 800978c:	1949      	adds	r1, r1, r5
 800978e:	0c0d      	lsrs	r5, r1, #16
 8009790:	195b      	adds	r3, r3, r5
 8009792:	0c1d      	lsrs	r5, r3, #16
 8009794:	b289      	uxth	r1, r1
 8009796:	041b      	lsls	r3, r3, #16
 8009798:	185b      	adds	r3, r3, r1
 800979a:	c608      	stmia	r6!, {r3}
 800979c:	4287      	cmp	r7, r0
 800979e:	dcef      	bgt.n	8009780 <__multadd+0x10>
 80097a0:	2d00      	cmp	r5, #0
 80097a2:	d022      	beq.n	80097ea <__multadd+0x7a>
 80097a4:	68a3      	ldr	r3, [r4, #8]
 80097a6:	42bb      	cmp	r3, r7
 80097a8:	dc19      	bgt.n	80097de <__multadd+0x6e>
 80097aa:	6863      	ldr	r3, [r4, #4]
 80097ac:	9801      	ldr	r0, [sp, #4]
 80097ae:	1c59      	adds	r1, r3, #1
 80097b0:	f7ff ff76 	bl	80096a0 <_Balloc>
 80097b4:	1e06      	subs	r6, r0, #0
 80097b6:	d105      	bne.n	80097c4 <__multadd+0x54>
 80097b8:	0002      	movs	r2, r0
 80097ba:	21b5      	movs	r1, #181	; 0xb5
 80097bc:	4b0c      	ldr	r3, [pc, #48]	; (80097f0 <__multadd+0x80>)
 80097be:	480d      	ldr	r0, [pc, #52]	; (80097f4 <__multadd+0x84>)
 80097c0:	f7fe fcf4 	bl	80081ac <__assert_func>
 80097c4:	0021      	movs	r1, r4
 80097c6:	6923      	ldr	r3, [r4, #16]
 80097c8:	310c      	adds	r1, #12
 80097ca:	1c9a      	adds	r2, r3, #2
 80097cc:	0092      	lsls	r2, r2, #2
 80097ce:	300c      	adds	r0, #12
 80097d0:	f7fc ffba 	bl	8006748 <memcpy>
 80097d4:	0021      	movs	r1, r4
 80097d6:	9801      	ldr	r0, [sp, #4]
 80097d8:	f7ff ffa6 	bl	8009728 <_Bfree>
 80097dc:	0034      	movs	r4, r6
 80097de:	1d3b      	adds	r3, r7, #4
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	18e3      	adds	r3, r4, r3
 80097e4:	605d      	str	r5, [r3, #4]
 80097e6:	1c7b      	adds	r3, r7, #1
 80097e8:	6123      	str	r3, [r4, #16]
 80097ea:	0020      	movs	r0, r4
 80097ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097ee:	46c0      	nop			; (mov r8, r8)
 80097f0:	0800b3a9 	.word	0x0800b3a9
 80097f4:	0800b434 	.word	0x0800b434

080097f8 <__s2b>:
 80097f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097fa:	0006      	movs	r6, r0
 80097fc:	0018      	movs	r0, r3
 80097fe:	000c      	movs	r4, r1
 8009800:	3008      	adds	r0, #8
 8009802:	2109      	movs	r1, #9
 8009804:	9301      	str	r3, [sp, #4]
 8009806:	0015      	movs	r5, r2
 8009808:	f7f6 fd24 	bl	8000254 <__divsi3>
 800980c:	2301      	movs	r3, #1
 800980e:	2100      	movs	r1, #0
 8009810:	4283      	cmp	r3, r0
 8009812:	db0a      	blt.n	800982a <__s2b+0x32>
 8009814:	0030      	movs	r0, r6
 8009816:	f7ff ff43 	bl	80096a0 <_Balloc>
 800981a:	1e01      	subs	r1, r0, #0
 800981c:	d108      	bne.n	8009830 <__s2b+0x38>
 800981e:	0002      	movs	r2, r0
 8009820:	4b19      	ldr	r3, [pc, #100]	; (8009888 <__s2b+0x90>)
 8009822:	481a      	ldr	r0, [pc, #104]	; (800988c <__s2b+0x94>)
 8009824:	31ce      	adds	r1, #206	; 0xce
 8009826:	f7fe fcc1 	bl	80081ac <__assert_func>
 800982a:	005b      	lsls	r3, r3, #1
 800982c:	3101      	adds	r1, #1
 800982e:	e7ef      	b.n	8009810 <__s2b+0x18>
 8009830:	9b08      	ldr	r3, [sp, #32]
 8009832:	6143      	str	r3, [r0, #20]
 8009834:	2301      	movs	r3, #1
 8009836:	6103      	str	r3, [r0, #16]
 8009838:	2d09      	cmp	r5, #9
 800983a:	dd18      	ble.n	800986e <__s2b+0x76>
 800983c:	0023      	movs	r3, r4
 800983e:	3309      	adds	r3, #9
 8009840:	001f      	movs	r7, r3
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	1964      	adds	r4, r4, r5
 8009846:	783b      	ldrb	r3, [r7, #0]
 8009848:	220a      	movs	r2, #10
 800984a:	0030      	movs	r0, r6
 800984c:	3b30      	subs	r3, #48	; 0x30
 800984e:	f7ff ff8f 	bl	8009770 <__multadd>
 8009852:	3701      	adds	r7, #1
 8009854:	0001      	movs	r1, r0
 8009856:	42a7      	cmp	r7, r4
 8009858:	d1f5      	bne.n	8009846 <__s2b+0x4e>
 800985a:	002c      	movs	r4, r5
 800985c:	9b00      	ldr	r3, [sp, #0]
 800985e:	3c08      	subs	r4, #8
 8009860:	191c      	adds	r4, r3, r4
 8009862:	002f      	movs	r7, r5
 8009864:	9b01      	ldr	r3, [sp, #4]
 8009866:	429f      	cmp	r7, r3
 8009868:	db04      	blt.n	8009874 <__s2b+0x7c>
 800986a:	0008      	movs	r0, r1
 800986c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800986e:	2509      	movs	r5, #9
 8009870:	340a      	adds	r4, #10
 8009872:	e7f6      	b.n	8009862 <__s2b+0x6a>
 8009874:	1b63      	subs	r3, r4, r5
 8009876:	5ddb      	ldrb	r3, [r3, r7]
 8009878:	220a      	movs	r2, #10
 800987a:	0030      	movs	r0, r6
 800987c:	3b30      	subs	r3, #48	; 0x30
 800987e:	f7ff ff77 	bl	8009770 <__multadd>
 8009882:	3701      	adds	r7, #1
 8009884:	0001      	movs	r1, r0
 8009886:	e7ed      	b.n	8009864 <__s2b+0x6c>
 8009888:	0800b3a9 	.word	0x0800b3a9
 800988c:	0800b434 	.word	0x0800b434

08009890 <__hi0bits>:
 8009890:	0003      	movs	r3, r0
 8009892:	0c02      	lsrs	r2, r0, #16
 8009894:	2000      	movs	r0, #0
 8009896:	4282      	cmp	r2, r0
 8009898:	d101      	bne.n	800989e <__hi0bits+0xe>
 800989a:	041b      	lsls	r3, r3, #16
 800989c:	3010      	adds	r0, #16
 800989e:	0e1a      	lsrs	r2, r3, #24
 80098a0:	d101      	bne.n	80098a6 <__hi0bits+0x16>
 80098a2:	3008      	adds	r0, #8
 80098a4:	021b      	lsls	r3, r3, #8
 80098a6:	0f1a      	lsrs	r2, r3, #28
 80098a8:	d101      	bne.n	80098ae <__hi0bits+0x1e>
 80098aa:	3004      	adds	r0, #4
 80098ac:	011b      	lsls	r3, r3, #4
 80098ae:	0f9a      	lsrs	r2, r3, #30
 80098b0:	d101      	bne.n	80098b6 <__hi0bits+0x26>
 80098b2:	3002      	adds	r0, #2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	db03      	blt.n	80098c2 <__hi0bits+0x32>
 80098ba:	3001      	adds	r0, #1
 80098bc:	005b      	lsls	r3, r3, #1
 80098be:	d400      	bmi.n	80098c2 <__hi0bits+0x32>
 80098c0:	2020      	movs	r0, #32
 80098c2:	4770      	bx	lr

080098c4 <__lo0bits>:
 80098c4:	6803      	ldr	r3, [r0, #0]
 80098c6:	0002      	movs	r2, r0
 80098c8:	2107      	movs	r1, #7
 80098ca:	0018      	movs	r0, r3
 80098cc:	4008      	ands	r0, r1
 80098ce:	420b      	tst	r3, r1
 80098d0:	d00d      	beq.n	80098ee <__lo0bits+0x2a>
 80098d2:	3906      	subs	r1, #6
 80098d4:	2000      	movs	r0, #0
 80098d6:	420b      	tst	r3, r1
 80098d8:	d105      	bne.n	80098e6 <__lo0bits+0x22>
 80098da:	3002      	adds	r0, #2
 80098dc:	4203      	tst	r3, r0
 80098de:	d003      	beq.n	80098e8 <__lo0bits+0x24>
 80098e0:	40cb      	lsrs	r3, r1
 80098e2:	0008      	movs	r0, r1
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	4770      	bx	lr
 80098e8:	089b      	lsrs	r3, r3, #2
 80098ea:	6013      	str	r3, [r2, #0]
 80098ec:	e7fb      	b.n	80098e6 <__lo0bits+0x22>
 80098ee:	b299      	uxth	r1, r3
 80098f0:	2900      	cmp	r1, #0
 80098f2:	d101      	bne.n	80098f8 <__lo0bits+0x34>
 80098f4:	2010      	movs	r0, #16
 80098f6:	0c1b      	lsrs	r3, r3, #16
 80098f8:	b2d9      	uxtb	r1, r3
 80098fa:	2900      	cmp	r1, #0
 80098fc:	d101      	bne.n	8009902 <__lo0bits+0x3e>
 80098fe:	3008      	adds	r0, #8
 8009900:	0a1b      	lsrs	r3, r3, #8
 8009902:	0719      	lsls	r1, r3, #28
 8009904:	d101      	bne.n	800990a <__lo0bits+0x46>
 8009906:	3004      	adds	r0, #4
 8009908:	091b      	lsrs	r3, r3, #4
 800990a:	0799      	lsls	r1, r3, #30
 800990c:	d101      	bne.n	8009912 <__lo0bits+0x4e>
 800990e:	3002      	adds	r0, #2
 8009910:	089b      	lsrs	r3, r3, #2
 8009912:	07d9      	lsls	r1, r3, #31
 8009914:	d4e9      	bmi.n	80098ea <__lo0bits+0x26>
 8009916:	3001      	adds	r0, #1
 8009918:	085b      	lsrs	r3, r3, #1
 800991a:	d1e6      	bne.n	80098ea <__lo0bits+0x26>
 800991c:	2020      	movs	r0, #32
 800991e:	e7e2      	b.n	80098e6 <__lo0bits+0x22>

08009920 <__i2b>:
 8009920:	b510      	push	{r4, lr}
 8009922:	000c      	movs	r4, r1
 8009924:	2101      	movs	r1, #1
 8009926:	f7ff febb 	bl	80096a0 <_Balloc>
 800992a:	2800      	cmp	r0, #0
 800992c:	d106      	bne.n	800993c <__i2b+0x1c>
 800992e:	21a0      	movs	r1, #160	; 0xa0
 8009930:	0002      	movs	r2, r0
 8009932:	4b04      	ldr	r3, [pc, #16]	; (8009944 <__i2b+0x24>)
 8009934:	4804      	ldr	r0, [pc, #16]	; (8009948 <__i2b+0x28>)
 8009936:	0049      	lsls	r1, r1, #1
 8009938:	f7fe fc38 	bl	80081ac <__assert_func>
 800993c:	2301      	movs	r3, #1
 800993e:	6144      	str	r4, [r0, #20]
 8009940:	6103      	str	r3, [r0, #16]
 8009942:	bd10      	pop	{r4, pc}
 8009944:	0800b3a9 	.word	0x0800b3a9
 8009948:	0800b434 	.word	0x0800b434

0800994c <__multiply>:
 800994c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800994e:	690b      	ldr	r3, [r1, #16]
 8009950:	0014      	movs	r4, r2
 8009952:	6912      	ldr	r2, [r2, #16]
 8009954:	000d      	movs	r5, r1
 8009956:	b089      	sub	sp, #36	; 0x24
 8009958:	4293      	cmp	r3, r2
 800995a:	da01      	bge.n	8009960 <__multiply+0x14>
 800995c:	0025      	movs	r5, r4
 800995e:	000c      	movs	r4, r1
 8009960:	692f      	ldr	r7, [r5, #16]
 8009962:	6926      	ldr	r6, [r4, #16]
 8009964:	6869      	ldr	r1, [r5, #4]
 8009966:	19bb      	adds	r3, r7, r6
 8009968:	9302      	str	r3, [sp, #8]
 800996a:	68ab      	ldr	r3, [r5, #8]
 800996c:	19ba      	adds	r2, r7, r6
 800996e:	4293      	cmp	r3, r2
 8009970:	da00      	bge.n	8009974 <__multiply+0x28>
 8009972:	3101      	adds	r1, #1
 8009974:	f7ff fe94 	bl	80096a0 <_Balloc>
 8009978:	9001      	str	r0, [sp, #4]
 800997a:	2800      	cmp	r0, #0
 800997c:	d106      	bne.n	800998c <__multiply+0x40>
 800997e:	215e      	movs	r1, #94	; 0x5e
 8009980:	0002      	movs	r2, r0
 8009982:	4b48      	ldr	r3, [pc, #288]	; (8009aa4 <__multiply+0x158>)
 8009984:	4848      	ldr	r0, [pc, #288]	; (8009aa8 <__multiply+0x15c>)
 8009986:	31ff      	adds	r1, #255	; 0xff
 8009988:	f7fe fc10 	bl	80081ac <__assert_func>
 800998c:	9b01      	ldr	r3, [sp, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	3314      	adds	r3, #20
 8009992:	469c      	mov	ip, r3
 8009994:	19bb      	adds	r3, r7, r6
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	4463      	add	r3, ip
 800999a:	9303      	str	r3, [sp, #12]
 800999c:	4663      	mov	r3, ip
 800999e:	9903      	ldr	r1, [sp, #12]
 80099a0:	428b      	cmp	r3, r1
 80099a2:	d32c      	bcc.n	80099fe <__multiply+0xb2>
 80099a4:	002b      	movs	r3, r5
 80099a6:	0022      	movs	r2, r4
 80099a8:	3314      	adds	r3, #20
 80099aa:	00bf      	lsls	r7, r7, #2
 80099ac:	3214      	adds	r2, #20
 80099ae:	9306      	str	r3, [sp, #24]
 80099b0:	00b6      	lsls	r6, r6, #2
 80099b2:	19db      	adds	r3, r3, r7
 80099b4:	9304      	str	r3, [sp, #16]
 80099b6:	1993      	adds	r3, r2, r6
 80099b8:	9307      	str	r3, [sp, #28]
 80099ba:	2304      	movs	r3, #4
 80099bc:	9305      	str	r3, [sp, #20]
 80099be:	002b      	movs	r3, r5
 80099c0:	9904      	ldr	r1, [sp, #16]
 80099c2:	3315      	adds	r3, #21
 80099c4:	9200      	str	r2, [sp, #0]
 80099c6:	4299      	cmp	r1, r3
 80099c8:	d305      	bcc.n	80099d6 <__multiply+0x8a>
 80099ca:	1b4b      	subs	r3, r1, r5
 80099cc:	3b15      	subs	r3, #21
 80099ce:	089b      	lsrs	r3, r3, #2
 80099d0:	3301      	adds	r3, #1
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	9305      	str	r3, [sp, #20]
 80099d6:	9b07      	ldr	r3, [sp, #28]
 80099d8:	9a00      	ldr	r2, [sp, #0]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d311      	bcc.n	8009a02 <__multiply+0xb6>
 80099de:	9b02      	ldr	r3, [sp, #8]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	dd06      	ble.n	80099f2 <__multiply+0xa6>
 80099e4:	9b03      	ldr	r3, [sp, #12]
 80099e6:	3b04      	subs	r3, #4
 80099e8:	9303      	str	r3, [sp, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d053      	beq.n	8009a9a <__multiply+0x14e>
 80099f2:	9b01      	ldr	r3, [sp, #4]
 80099f4:	9a02      	ldr	r2, [sp, #8]
 80099f6:	0018      	movs	r0, r3
 80099f8:	611a      	str	r2, [r3, #16]
 80099fa:	b009      	add	sp, #36	; 0x24
 80099fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099fe:	c304      	stmia	r3!, {r2}
 8009a00:	e7cd      	b.n	800999e <__multiply+0x52>
 8009a02:	9b00      	ldr	r3, [sp, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	b298      	uxth	r0, r3
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d01b      	beq.n	8009a44 <__multiply+0xf8>
 8009a0c:	4667      	mov	r7, ip
 8009a0e:	2400      	movs	r4, #0
 8009a10:	9e06      	ldr	r6, [sp, #24]
 8009a12:	ce02      	ldmia	r6!, {r1}
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	b28b      	uxth	r3, r1
 8009a18:	4343      	muls	r3, r0
 8009a1a:	b292      	uxth	r2, r2
 8009a1c:	189b      	adds	r3, r3, r2
 8009a1e:	191b      	adds	r3, r3, r4
 8009a20:	0c0c      	lsrs	r4, r1, #16
 8009a22:	4344      	muls	r4, r0
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	0c11      	lsrs	r1, r2, #16
 8009a28:	1861      	adds	r1, r4, r1
 8009a2a:	0c1c      	lsrs	r4, r3, #16
 8009a2c:	1909      	adds	r1, r1, r4
 8009a2e:	0c0c      	lsrs	r4, r1, #16
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	0409      	lsls	r1, r1, #16
 8009a34:	430b      	orrs	r3, r1
 8009a36:	c708      	stmia	r7!, {r3}
 8009a38:	9b04      	ldr	r3, [sp, #16]
 8009a3a:	42b3      	cmp	r3, r6
 8009a3c:	d8e9      	bhi.n	8009a12 <__multiply+0xc6>
 8009a3e:	4663      	mov	r3, ip
 8009a40:	9a05      	ldr	r2, [sp, #20]
 8009a42:	509c      	str	r4, [r3, r2]
 8009a44:	9b00      	ldr	r3, [sp, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	0c1e      	lsrs	r6, r3, #16
 8009a4a:	d020      	beq.n	8009a8e <__multiply+0x142>
 8009a4c:	4663      	mov	r3, ip
 8009a4e:	002c      	movs	r4, r5
 8009a50:	4660      	mov	r0, ip
 8009a52:	2700      	movs	r7, #0
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3414      	adds	r4, #20
 8009a58:	6822      	ldr	r2, [r4, #0]
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	b291      	uxth	r1, r2
 8009a5e:	4371      	muls	r1, r6
 8009a60:	6802      	ldr	r2, [r0, #0]
 8009a62:	0c12      	lsrs	r2, r2, #16
 8009a64:	1889      	adds	r1, r1, r2
 8009a66:	19cf      	adds	r7, r1, r7
 8009a68:	0439      	lsls	r1, r7, #16
 8009a6a:	430b      	orrs	r3, r1
 8009a6c:	6003      	str	r3, [r0, #0]
 8009a6e:	cc02      	ldmia	r4!, {r1}
 8009a70:	6843      	ldr	r3, [r0, #4]
 8009a72:	0c09      	lsrs	r1, r1, #16
 8009a74:	4371      	muls	r1, r6
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	0c3f      	lsrs	r7, r7, #16
 8009a7a:	18cb      	adds	r3, r1, r3
 8009a7c:	9a04      	ldr	r2, [sp, #16]
 8009a7e:	19db      	adds	r3, r3, r7
 8009a80:	0c1f      	lsrs	r7, r3, #16
 8009a82:	3004      	adds	r0, #4
 8009a84:	42a2      	cmp	r2, r4
 8009a86:	d8e7      	bhi.n	8009a58 <__multiply+0x10c>
 8009a88:	4662      	mov	r2, ip
 8009a8a:	9905      	ldr	r1, [sp, #20]
 8009a8c:	5053      	str	r3, [r2, r1]
 8009a8e:	9b00      	ldr	r3, [sp, #0]
 8009a90:	3304      	adds	r3, #4
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	2304      	movs	r3, #4
 8009a96:	449c      	add	ip, r3
 8009a98:	e79d      	b.n	80099d6 <__multiply+0x8a>
 8009a9a:	9b02      	ldr	r3, [sp, #8]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	9302      	str	r3, [sp, #8]
 8009aa0:	e79d      	b.n	80099de <__multiply+0x92>
 8009aa2:	46c0      	nop			; (mov r8, r8)
 8009aa4:	0800b3a9 	.word	0x0800b3a9
 8009aa8:	0800b434 	.word	0x0800b434

08009aac <__pow5mult>:
 8009aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aae:	2303      	movs	r3, #3
 8009ab0:	0015      	movs	r5, r2
 8009ab2:	0007      	movs	r7, r0
 8009ab4:	000e      	movs	r6, r1
 8009ab6:	401a      	ands	r2, r3
 8009ab8:	421d      	tst	r5, r3
 8009aba:	d008      	beq.n	8009ace <__pow5mult+0x22>
 8009abc:	4925      	ldr	r1, [pc, #148]	; (8009b54 <__pow5mult+0xa8>)
 8009abe:	3a01      	subs	r2, #1
 8009ac0:	0092      	lsls	r2, r2, #2
 8009ac2:	5852      	ldr	r2, [r2, r1]
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	0031      	movs	r1, r6
 8009ac8:	f7ff fe52 	bl	8009770 <__multadd>
 8009acc:	0006      	movs	r6, r0
 8009ace:	10ad      	asrs	r5, r5, #2
 8009ad0:	d03d      	beq.n	8009b4e <__pow5mult+0xa2>
 8009ad2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009ad4:	2c00      	cmp	r4, #0
 8009ad6:	d10f      	bne.n	8009af8 <__pow5mult+0x4c>
 8009ad8:	2010      	movs	r0, #16
 8009ada:	f7fc fe21 	bl	8006720 <malloc>
 8009ade:	1e02      	subs	r2, r0, #0
 8009ae0:	6278      	str	r0, [r7, #36]	; 0x24
 8009ae2:	d105      	bne.n	8009af0 <__pow5mult+0x44>
 8009ae4:	21d7      	movs	r1, #215	; 0xd7
 8009ae6:	4b1c      	ldr	r3, [pc, #112]	; (8009b58 <__pow5mult+0xac>)
 8009ae8:	481c      	ldr	r0, [pc, #112]	; (8009b5c <__pow5mult+0xb0>)
 8009aea:	0049      	lsls	r1, r1, #1
 8009aec:	f7fe fb5e 	bl	80081ac <__assert_func>
 8009af0:	6044      	str	r4, [r0, #4]
 8009af2:	6084      	str	r4, [r0, #8]
 8009af4:	6004      	str	r4, [r0, #0]
 8009af6:	60c4      	str	r4, [r0, #12]
 8009af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afa:	689c      	ldr	r4, [r3, #8]
 8009afc:	9301      	str	r3, [sp, #4]
 8009afe:	2c00      	cmp	r4, #0
 8009b00:	d108      	bne.n	8009b14 <__pow5mult+0x68>
 8009b02:	0038      	movs	r0, r7
 8009b04:	4916      	ldr	r1, [pc, #88]	; (8009b60 <__pow5mult+0xb4>)
 8009b06:	f7ff ff0b 	bl	8009920 <__i2b>
 8009b0a:	9b01      	ldr	r3, [sp, #4]
 8009b0c:	0004      	movs	r4, r0
 8009b0e:	6098      	str	r0, [r3, #8]
 8009b10:	2300      	movs	r3, #0
 8009b12:	6003      	str	r3, [r0, #0]
 8009b14:	2301      	movs	r3, #1
 8009b16:	421d      	tst	r5, r3
 8009b18:	d00a      	beq.n	8009b30 <__pow5mult+0x84>
 8009b1a:	0031      	movs	r1, r6
 8009b1c:	0022      	movs	r2, r4
 8009b1e:	0038      	movs	r0, r7
 8009b20:	f7ff ff14 	bl	800994c <__multiply>
 8009b24:	0031      	movs	r1, r6
 8009b26:	9001      	str	r0, [sp, #4]
 8009b28:	0038      	movs	r0, r7
 8009b2a:	f7ff fdfd 	bl	8009728 <_Bfree>
 8009b2e:	9e01      	ldr	r6, [sp, #4]
 8009b30:	106d      	asrs	r5, r5, #1
 8009b32:	d00c      	beq.n	8009b4e <__pow5mult+0xa2>
 8009b34:	6820      	ldr	r0, [r4, #0]
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d107      	bne.n	8009b4a <__pow5mult+0x9e>
 8009b3a:	0022      	movs	r2, r4
 8009b3c:	0021      	movs	r1, r4
 8009b3e:	0038      	movs	r0, r7
 8009b40:	f7ff ff04 	bl	800994c <__multiply>
 8009b44:	2300      	movs	r3, #0
 8009b46:	6020      	str	r0, [r4, #0]
 8009b48:	6003      	str	r3, [r0, #0]
 8009b4a:	0004      	movs	r4, r0
 8009b4c:	e7e2      	b.n	8009b14 <__pow5mult+0x68>
 8009b4e:	0030      	movs	r0, r6
 8009b50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b52:	46c0      	nop			; (mov r8, r8)
 8009b54:	0800b580 	.word	0x0800b580
 8009b58:	0800b190 	.word	0x0800b190
 8009b5c:	0800b434 	.word	0x0800b434
 8009b60:	00000271 	.word	0x00000271

08009b64 <__lshift>:
 8009b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b66:	000c      	movs	r4, r1
 8009b68:	0017      	movs	r7, r2
 8009b6a:	6923      	ldr	r3, [r4, #16]
 8009b6c:	1155      	asrs	r5, r2, #5
 8009b6e:	b087      	sub	sp, #28
 8009b70:	18eb      	adds	r3, r5, r3
 8009b72:	9302      	str	r3, [sp, #8]
 8009b74:	3301      	adds	r3, #1
 8009b76:	9301      	str	r3, [sp, #4]
 8009b78:	6849      	ldr	r1, [r1, #4]
 8009b7a:	68a3      	ldr	r3, [r4, #8]
 8009b7c:	9004      	str	r0, [sp, #16]
 8009b7e:	9a01      	ldr	r2, [sp, #4]
 8009b80:	4293      	cmp	r3, r2
 8009b82:	db10      	blt.n	8009ba6 <__lshift+0x42>
 8009b84:	9804      	ldr	r0, [sp, #16]
 8009b86:	f7ff fd8b 	bl	80096a0 <_Balloc>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	0002      	movs	r2, r0
 8009b8e:	0006      	movs	r6, r0
 8009b90:	0019      	movs	r1, r3
 8009b92:	3214      	adds	r2, #20
 8009b94:	4298      	cmp	r0, r3
 8009b96:	d10c      	bne.n	8009bb2 <__lshift+0x4e>
 8009b98:	21da      	movs	r1, #218	; 0xda
 8009b9a:	0002      	movs	r2, r0
 8009b9c:	4b26      	ldr	r3, [pc, #152]	; (8009c38 <__lshift+0xd4>)
 8009b9e:	4827      	ldr	r0, [pc, #156]	; (8009c3c <__lshift+0xd8>)
 8009ba0:	31ff      	adds	r1, #255	; 0xff
 8009ba2:	f7fe fb03 	bl	80081ac <__assert_func>
 8009ba6:	3101      	adds	r1, #1
 8009ba8:	005b      	lsls	r3, r3, #1
 8009baa:	e7e8      	b.n	8009b7e <__lshift+0x1a>
 8009bac:	0098      	lsls	r0, r3, #2
 8009bae:	5011      	str	r1, [r2, r0]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	42ab      	cmp	r3, r5
 8009bb4:	dbfa      	blt.n	8009bac <__lshift+0x48>
 8009bb6:	43eb      	mvns	r3, r5
 8009bb8:	17db      	asrs	r3, r3, #31
 8009bba:	401d      	ands	r5, r3
 8009bbc:	211f      	movs	r1, #31
 8009bbe:	0023      	movs	r3, r4
 8009bc0:	0038      	movs	r0, r7
 8009bc2:	00ad      	lsls	r5, r5, #2
 8009bc4:	1955      	adds	r5, r2, r5
 8009bc6:	6922      	ldr	r2, [r4, #16]
 8009bc8:	3314      	adds	r3, #20
 8009bca:	0092      	lsls	r2, r2, #2
 8009bcc:	4008      	ands	r0, r1
 8009bce:	4684      	mov	ip, r0
 8009bd0:	189a      	adds	r2, r3, r2
 8009bd2:	420f      	tst	r7, r1
 8009bd4:	d02a      	beq.n	8009c2c <__lshift+0xc8>
 8009bd6:	3101      	adds	r1, #1
 8009bd8:	1a09      	subs	r1, r1, r0
 8009bda:	9105      	str	r1, [sp, #20]
 8009bdc:	2100      	movs	r1, #0
 8009bde:	9503      	str	r5, [sp, #12]
 8009be0:	4667      	mov	r7, ip
 8009be2:	6818      	ldr	r0, [r3, #0]
 8009be4:	40b8      	lsls	r0, r7
 8009be6:	4301      	orrs	r1, r0
 8009be8:	9803      	ldr	r0, [sp, #12]
 8009bea:	c002      	stmia	r0!, {r1}
 8009bec:	cb02      	ldmia	r3!, {r1}
 8009bee:	9003      	str	r0, [sp, #12]
 8009bf0:	9805      	ldr	r0, [sp, #20]
 8009bf2:	40c1      	lsrs	r1, r0
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d8f3      	bhi.n	8009be0 <__lshift+0x7c>
 8009bf8:	0020      	movs	r0, r4
 8009bfa:	3015      	adds	r0, #21
 8009bfc:	2304      	movs	r3, #4
 8009bfe:	4282      	cmp	r2, r0
 8009c00:	d304      	bcc.n	8009c0c <__lshift+0xa8>
 8009c02:	1b13      	subs	r3, r2, r4
 8009c04:	3b15      	subs	r3, #21
 8009c06:	089b      	lsrs	r3, r3, #2
 8009c08:	3301      	adds	r3, #1
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	50e9      	str	r1, [r5, r3]
 8009c0e:	2900      	cmp	r1, #0
 8009c10:	d002      	beq.n	8009c18 <__lshift+0xb4>
 8009c12:	9b02      	ldr	r3, [sp, #8]
 8009c14:	3302      	adds	r3, #2
 8009c16:	9301      	str	r3, [sp, #4]
 8009c18:	9b01      	ldr	r3, [sp, #4]
 8009c1a:	9804      	ldr	r0, [sp, #16]
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	0021      	movs	r1, r4
 8009c20:	6133      	str	r3, [r6, #16]
 8009c22:	f7ff fd81 	bl	8009728 <_Bfree>
 8009c26:	0030      	movs	r0, r6
 8009c28:	b007      	add	sp, #28
 8009c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c2c:	cb02      	ldmia	r3!, {r1}
 8009c2e:	c502      	stmia	r5!, {r1}
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d8fb      	bhi.n	8009c2c <__lshift+0xc8>
 8009c34:	e7f0      	b.n	8009c18 <__lshift+0xb4>
 8009c36:	46c0      	nop			; (mov r8, r8)
 8009c38:	0800b3a9 	.word	0x0800b3a9
 8009c3c:	0800b434 	.word	0x0800b434

08009c40 <__mcmp>:
 8009c40:	6902      	ldr	r2, [r0, #16]
 8009c42:	690b      	ldr	r3, [r1, #16]
 8009c44:	b530      	push	{r4, r5, lr}
 8009c46:	0004      	movs	r4, r0
 8009c48:	1ad0      	subs	r0, r2, r3
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d10d      	bne.n	8009c6a <__mcmp+0x2a>
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	3414      	adds	r4, #20
 8009c52:	3114      	adds	r1, #20
 8009c54:	18e2      	adds	r2, r4, r3
 8009c56:	18c9      	adds	r1, r1, r3
 8009c58:	3a04      	subs	r2, #4
 8009c5a:	3904      	subs	r1, #4
 8009c5c:	6815      	ldr	r5, [r2, #0]
 8009c5e:	680b      	ldr	r3, [r1, #0]
 8009c60:	429d      	cmp	r5, r3
 8009c62:	d003      	beq.n	8009c6c <__mcmp+0x2c>
 8009c64:	2001      	movs	r0, #1
 8009c66:	429d      	cmp	r5, r3
 8009c68:	d303      	bcc.n	8009c72 <__mcmp+0x32>
 8009c6a:	bd30      	pop	{r4, r5, pc}
 8009c6c:	4294      	cmp	r4, r2
 8009c6e:	d3f3      	bcc.n	8009c58 <__mcmp+0x18>
 8009c70:	e7fb      	b.n	8009c6a <__mcmp+0x2a>
 8009c72:	4240      	negs	r0, r0
 8009c74:	e7f9      	b.n	8009c6a <__mcmp+0x2a>
	...

08009c78 <__mdiff>:
 8009c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c7a:	000e      	movs	r6, r1
 8009c7c:	0007      	movs	r7, r0
 8009c7e:	0011      	movs	r1, r2
 8009c80:	0030      	movs	r0, r6
 8009c82:	b087      	sub	sp, #28
 8009c84:	0014      	movs	r4, r2
 8009c86:	f7ff ffdb 	bl	8009c40 <__mcmp>
 8009c8a:	1e05      	subs	r5, r0, #0
 8009c8c:	d110      	bne.n	8009cb0 <__mdiff+0x38>
 8009c8e:	0001      	movs	r1, r0
 8009c90:	0038      	movs	r0, r7
 8009c92:	f7ff fd05 	bl	80096a0 <_Balloc>
 8009c96:	1e02      	subs	r2, r0, #0
 8009c98:	d104      	bne.n	8009ca4 <__mdiff+0x2c>
 8009c9a:	4b40      	ldr	r3, [pc, #256]	; (8009d9c <__mdiff+0x124>)
 8009c9c:	4940      	ldr	r1, [pc, #256]	; (8009da0 <__mdiff+0x128>)
 8009c9e:	4841      	ldr	r0, [pc, #260]	; (8009da4 <__mdiff+0x12c>)
 8009ca0:	f7fe fa84 	bl	80081ac <__assert_func>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	6145      	str	r5, [r0, #20]
 8009ca8:	6103      	str	r3, [r0, #16]
 8009caa:	0010      	movs	r0, r2
 8009cac:	b007      	add	sp, #28
 8009cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	9301      	str	r3, [sp, #4]
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	db04      	blt.n	8009cc2 <__mdiff+0x4a>
 8009cb8:	0023      	movs	r3, r4
 8009cba:	0034      	movs	r4, r6
 8009cbc:	001e      	movs	r6, r3
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	9301      	str	r3, [sp, #4]
 8009cc2:	0038      	movs	r0, r7
 8009cc4:	6861      	ldr	r1, [r4, #4]
 8009cc6:	f7ff fceb 	bl	80096a0 <_Balloc>
 8009cca:	1e02      	subs	r2, r0, #0
 8009ccc:	d103      	bne.n	8009cd6 <__mdiff+0x5e>
 8009cce:	2190      	movs	r1, #144	; 0x90
 8009cd0:	4b32      	ldr	r3, [pc, #200]	; (8009d9c <__mdiff+0x124>)
 8009cd2:	0089      	lsls	r1, r1, #2
 8009cd4:	e7e3      	b.n	8009c9e <__mdiff+0x26>
 8009cd6:	9b01      	ldr	r3, [sp, #4]
 8009cd8:	2700      	movs	r7, #0
 8009cda:	60c3      	str	r3, [r0, #12]
 8009cdc:	6920      	ldr	r0, [r4, #16]
 8009cde:	3414      	adds	r4, #20
 8009ce0:	9401      	str	r4, [sp, #4]
 8009ce2:	9b01      	ldr	r3, [sp, #4]
 8009ce4:	0084      	lsls	r4, r0, #2
 8009ce6:	191b      	adds	r3, r3, r4
 8009ce8:	0034      	movs	r4, r6
 8009cea:	9302      	str	r3, [sp, #8]
 8009cec:	6933      	ldr	r3, [r6, #16]
 8009cee:	3414      	adds	r4, #20
 8009cf0:	0099      	lsls	r1, r3, #2
 8009cf2:	1863      	adds	r3, r4, r1
 8009cf4:	9303      	str	r3, [sp, #12]
 8009cf6:	0013      	movs	r3, r2
 8009cf8:	3314      	adds	r3, #20
 8009cfa:	469c      	mov	ip, r3
 8009cfc:	9305      	str	r3, [sp, #20]
 8009cfe:	9b01      	ldr	r3, [sp, #4]
 8009d00:	9304      	str	r3, [sp, #16]
 8009d02:	9b04      	ldr	r3, [sp, #16]
 8009d04:	cc02      	ldmia	r4!, {r1}
 8009d06:	cb20      	ldmia	r3!, {r5}
 8009d08:	9304      	str	r3, [sp, #16]
 8009d0a:	b2ab      	uxth	r3, r5
 8009d0c:	19df      	adds	r7, r3, r7
 8009d0e:	b28b      	uxth	r3, r1
 8009d10:	1afb      	subs	r3, r7, r3
 8009d12:	0c09      	lsrs	r1, r1, #16
 8009d14:	0c2d      	lsrs	r5, r5, #16
 8009d16:	1a6d      	subs	r5, r5, r1
 8009d18:	1419      	asrs	r1, r3, #16
 8009d1a:	186d      	adds	r5, r5, r1
 8009d1c:	4661      	mov	r1, ip
 8009d1e:	142f      	asrs	r7, r5, #16
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	042d      	lsls	r5, r5, #16
 8009d24:	432b      	orrs	r3, r5
 8009d26:	c108      	stmia	r1!, {r3}
 8009d28:	9b03      	ldr	r3, [sp, #12]
 8009d2a:	468c      	mov	ip, r1
 8009d2c:	42a3      	cmp	r3, r4
 8009d2e:	d8e8      	bhi.n	8009d02 <__mdiff+0x8a>
 8009d30:	0031      	movs	r1, r6
 8009d32:	9c03      	ldr	r4, [sp, #12]
 8009d34:	3115      	adds	r1, #21
 8009d36:	2304      	movs	r3, #4
 8009d38:	428c      	cmp	r4, r1
 8009d3a:	d304      	bcc.n	8009d46 <__mdiff+0xce>
 8009d3c:	1ba3      	subs	r3, r4, r6
 8009d3e:	3b15      	subs	r3, #21
 8009d40:	089b      	lsrs	r3, r3, #2
 8009d42:	3301      	adds	r3, #1
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	9901      	ldr	r1, [sp, #4]
 8009d48:	18cc      	adds	r4, r1, r3
 8009d4a:	9905      	ldr	r1, [sp, #20]
 8009d4c:	0026      	movs	r6, r4
 8009d4e:	18cb      	adds	r3, r1, r3
 8009d50:	469c      	mov	ip, r3
 8009d52:	9902      	ldr	r1, [sp, #8]
 8009d54:	428e      	cmp	r6, r1
 8009d56:	d310      	bcc.n	8009d7a <__mdiff+0x102>
 8009d58:	9e02      	ldr	r6, [sp, #8]
 8009d5a:	1ee1      	subs	r1, r4, #3
 8009d5c:	2500      	movs	r5, #0
 8009d5e:	428e      	cmp	r6, r1
 8009d60:	d304      	bcc.n	8009d6c <__mdiff+0xf4>
 8009d62:	0031      	movs	r1, r6
 8009d64:	3103      	adds	r1, #3
 8009d66:	1b0c      	subs	r4, r1, r4
 8009d68:	08a4      	lsrs	r4, r4, #2
 8009d6a:	00a5      	lsls	r5, r4, #2
 8009d6c:	195b      	adds	r3, r3, r5
 8009d6e:	3b04      	subs	r3, #4
 8009d70:	6819      	ldr	r1, [r3, #0]
 8009d72:	2900      	cmp	r1, #0
 8009d74:	d00f      	beq.n	8009d96 <__mdiff+0x11e>
 8009d76:	6110      	str	r0, [r2, #16]
 8009d78:	e797      	b.n	8009caa <__mdiff+0x32>
 8009d7a:	ce02      	ldmia	r6!, {r1}
 8009d7c:	b28d      	uxth	r5, r1
 8009d7e:	19ed      	adds	r5, r5, r7
 8009d80:	0c0f      	lsrs	r7, r1, #16
 8009d82:	1429      	asrs	r1, r5, #16
 8009d84:	1879      	adds	r1, r7, r1
 8009d86:	140f      	asrs	r7, r1, #16
 8009d88:	b2ad      	uxth	r5, r5
 8009d8a:	0409      	lsls	r1, r1, #16
 8009d8c:	430d      	orrs	r5, r1
 8009d8e:	4661      	mov	r1, ip
 8009d90:	c120      	stmia	r1!, {r5}
 8009d92:	468c      	mov	ip, r1
 8009d94:	e7dd      	b.n	8009d52 <__mdiff+0xda>
 8009d96:	3801      	subs	r0, #1
 8009d98:	e7e9      	b.n	8009d6e <__mdiff+0xf6>
 8009d9a:	46c0      	nop			; (mov r8, r8)
 8009d9c:	0800b3a9 	.word	0x0800b3a9
 8009da0:	00000232 	.word	0x00000232
 8009da4:	0800b434 	.word	0x0800b434

08009da8 <__ulp>:
 8009da8:	4b0f      	ldr	r3, [pc, #60]	; (8009de8 <__ulp+0x40>)
 8009daa:	4019      	ands	r1, r3
 8009dac:	4b0f      	ldr	r3, [pc, #60]	; (8009dec <__ulp+0x44>)
 8009dae:	18c9      	adds	r1, r1, r3
 8009db0:	2900      	cmp	r1, #0
 8009db2:	dd04      	ble.n	8009dbe <__ulp+0x16>
 8009db4:	2200      	movs	r2, #0
 8009db6:	000b      	movs	r3, r1
 8009db8:	0010      	movs	r0, r2
 8009dba:	0019      	movs	r1, r3
 8009dbc:	4770      	bx	lr
 8009dbe:	4249      	negs	r1, r1
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	1509      	asrs	r1, r1, #20
 8009dc6:	2913      	cmp	r1, #19
 8009dc8:	dc04      	bgt.n	8009dd4 <__ulp+0x2c>
 8009dca:	2080      	movs	r0, #128	; 0x80
 8009dcc:	0300      	lsls	r0, r0, #12
 8009dce:	4108      	asrs	r0, r1
 8009dd0:	0003      	movs	r3, r0
 8009dd2:	e7f1      	b.n	8009db8 <__ulp+0x10>
 8009dd4:	3914      	subs	r1, #20
 8009dd6:	2001      	movs	r0, #1
 8009dd8:	291e      	cmp	r1, #30
 8009dda:	dc02      	bgt.n	8009de2 <__ulp+0x3a>
 8009ddc:	2080      	movs	r0, #128	; 0x80
 8009dde:	0600      	lsls	r0, r0, #24
 8009de0:	40c8      	lsrs	r0, r1
 8009de2:	0002      	movs	r2, r0
 8009de4:	e7e8      	b.n	8009db8 <__ulp+0x10>
 8009de6:	46c0      	nop			; (mov r8, r8)
 8009de8:	7ff00000 	.word	0x7ff00000
 8009dec:	fcc00000 	.word	0xfcc00000

08009df0 <__b2d>:
 8009df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009df2:	0006      	movs	r6, r0
 8009df4:	6903      	ldr	r3, [r0, #16]
 8009df6:	3614      	adds	r6, #20
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	18f3      	adds	r3, r6, r3
 8009dfc:	1f1d      	subs	r5, r3, #4
 8009dfe:	682c      	ldr	r4, [r5, #0]
 8009e00:	000f      	movs	r7, r1
 8009e02:	0020      	movs	r0, r4
 8009e04:	9301      	str	r3, [sp, #4]
 8009e06:	f7ff fd43 	bl	8009890 <__hi0bits>
 8009e0a:	2320      	movs	r3, #32
 8009e0c:	1a1b      	subs	r3, r3, r0
 8009e0e:	491f      	ldr	r1, [pc, #124]	; (8009e8c <__b2d+0x9c>)
 8009e10:	603b      	str	r3, [r7, #0]
 8009e12:	280a      	cmp	r0, #10
 8009e14:	dc16      	bgt.n	8009e44 <__b2d+0x54>
 8009e16:	230b      	movs	r3, #11
 8009e18:	0027      	movs	r7, r4
 8009e1a:	1a1b      	subs	r3, r3, r0
 8009e1c:	40df      	lsrs	r7, r3
 8009e1e:	4339      	orrs	r1, r7
 8009e20:	469c      	mov	ip, r3
 8009e22:	000b      	movs	r3, r1
 8009e24:	2100      	movs	r1, #0
 8009e26:	42ae      	cmp	r6, r5
 8009e28:	d202      	bcs.n	8009e30 <__b2d+0x40>
 8009e2a:	9901      	ldr	r1, [sp, #4]
 8009e2c:	3908      	subs	r1, #8
 8009e2e:	6809      	ldr	r1, [r1, #0]
 8009e30:	3015      	adds	r0, #21
 8009e32:	4084      	lsls	r4, r0
 8009e34:	4660      	mov	r0, ip
 8009e36:	40c1      	lsrs	r1, r0
 8009e38:	430c      	orrs	r4, r1
 8009e3a:	0022      	movs	r2, r4
 8009e3c:	0010      	movs	r0, r2
 8009e3e:	0019      	movs	r1, r3
 8009e40:	b003      	add	sp, #12
 8009e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e44:	2700      	movs	r7, #0
 8009e46:	42ae      	cmp	r6, r5
 8009e48:	d202      	bcs.n	8009e50 <__b2d+0x60>
 8009e4a:	9d01      	ldr	r5, [sp, #4]
 8009e4c:	3d08      	subs	r5, #8
 8009e4e:	682f      	ldr	r7, [r5, #0]
 8009e50:	230b      	movs	r3, #11
 8009e52:	425b      	negs	r3, r3
 8009e54:	469c      	mov	ip, r3
 8009e56:	4484      	add	ip, r0
 8009e58:	280b      	cmp	r0, #11
 8009e5a:	d013      	beq.n	8009e84 <__b2d+0x94>
 8009e5c:	4663      	mov	r3, ip
 8009e5e:	2020      	movs	r0, #32
 8009e60:	409c      	lsls	r4, r3
 8009e62:	1ac0      	subs	r0, r0, r3
 8009e64:	003b      	movs	r3, r7
 8009e66:	40c3      	lsrs	r3, r0
 8009e68:	431c      	orrs	r4, r3
 8009e6a:	4321      	orrs	r1, r4
 8009e6c:	000b      	movs	r3, r1
 8009e6e:	2100      	movs	r1, #0
 8009e70:	42b5      	cmp	r5, r6
 8009e72:	d901      	bls.n	8009e78 <__b2d+0x88>
 8009e74:	3d04      	subs	r5, #4
 8009e76:	6829      	ldr	r1, [r5, #0]
 8009e78:	4664      	mov	r4, ip
 8009e7a:	40c1      	lsrs	r1, r0
 8009e7c:	40a7      	lsls	r7, r4
 8009e7e:	430f      	orrs	r7, r1
 8009e80:	003a      	movs	r2, r7
 8009e82:	e7db      	b.n	8009e3c <__b2d+0x4c>
 8009e84:	4321      	orrs	r1, r4
 8009e86:	000b      	movs	r3, r1
 8009e88:	e7fa      	b.n	8009e80 <__b2d+0x90>
 8009e8a:	46c0      	nop			; (mov r8, r8)
 8009e8c:	3ff00000 	.word	0x3ff00000

08009e90 <__d2b>:
 8009e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e92:	2101      	movs	r1, #1
 8009e94:	0014      	movs	r4, r2
 8009e96:	001e      	movs	r6, r3
 8009e98:	9f08      	ldr	r7, [sp, #32]
 8009e9a:	f7ff fc01 	bl	80096a0 <_Balloc>
 8009e9e:	1e05      	subs	r5, r0, #0
 8009ea0:	d105      	bne.n	8009eae <__d2b+0x1e>
 8009ea2:	0002      	movs	r2, r0
 8009ea4:	4b26      	ldr	r3, [pc, #152]	; (8009f40 <__d2b+0xb0>)
 8009ea6:	4927      	ldr	r1, [pc, #156]	; (8009f44 <__d2b+0xb4>)
 8009ea8:	4827      	ldr	r0, [pc, #156]	; (8009f48 <__d2b+0xb8>)
 8009eaa:	f7fe f97f 	bl	80081ac <__assert_func>
 8009eae:	0333      	lsls	r3, r6, #12
 8009eb0:	0076      	lsls	r6, r6, #1
 8009eb2:	0b1b      	lsrs	r3, r3, #12
 8009eb4:	0d76      	lsrs	r6, r6, #21
 8009eb6:	d124      	bne.n	8009f02 <__d2b+0x72>
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	2c00      	cmp	r4, #0
 8009ebc:	d027      	beq.n	8009f0e <__d2b+0x7e>
 8009ebe:	4668      	mov	r0, sp
 8009ec0:	9400      	str	r4, [sp, #0]
 8009ec2:	f7ff fcff 	bl	80098c4 <__lo0bits>
 8009ec6:	9c00      	ldr	r4, [sp, #0]
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d01e      	beq.n	8009f0a <__d2b+0x7a>
 8009ecc:	9b01      	ldr	r3, [sp, #4]
 8009ece:	2120      	movs	r1, #32
 8009ed0:	001a      	movs	r2, r3
 8009ed2:	1a09      	subs	r1, r1, r0
 8009ed4:	408a      	lsls	r2, r1
 8009ed6:	40c3      	lsrs	r3, r0
 8009ed8:	4322      	orrs	r2, r4
 8009eda:	616a      	str	r2, [r5, #20]
 8009edc:	9301      	str	r3, [sp, #4]
 8009ede:	9c01      	ldr	r4, [sp, #4]
 8009ee0:	61ac      	str	r4, [r5, #24]
 8009ee2:	1e63      	subs	r3, r4, #1
 8009ee4:	419c      	sbcs	r4, r3
 8009ee6:	3401      	adds	r4, #1
 8009ee8:	612c      	str	r4, [r5, #16]
 8009eea:	2e00      	cmp	r6, #0
 8009eec:	d018      	beq.n	8009f20 <__d2b+0x90>
 8009eee:	4b17      	ldr	r3, [pc, #92]	; (8009f4c <__d2b+0xbc>)
 8009ef0:	18f6      	adds	r6, r6, r3
 8009ef2:	2335      	movs	r3, #53	; 0x35
 8009ef4:	1836      	adds	r6, r6, r0
 8009ef6:	1a18      	subs	r0, r3, r0
 8009ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009efa:	603e      	str	r6, [r7, #0]
 8009efc:	6018      	str	r0, [r3, #0]
 8009efe:	0028      	movs	r0, r5
 8009f00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f02:	2280      	movs	r2, #128	; 0x80
 8009f04:	0352      	lsls	r2, r2, #13
 8009f06:	4313      	orrs	r3, r2
 8009f08:	e7d6      	b.n	8009eb8 <__d2b+0x28>
 8009f0a:	616c      	str	r4, [r5, #20]
 8009f0c:	e7e7      	b.n	8009ede <__d2b+0x4e>
 8009f0e:	a801      	add	r0, sp, #4
 8009f10:	f7ff fcd8 	bl	80098c4 <__lo0bits>
 8009f14:	2401      	movs	r4, #1
 8009f16:	9b01      	ldr	r3, [sp, #4]
 8009f18:	612c      	str	r4, [r5, #16]
 8009f1a:	616b      	str	r3, [r5, #20]
 8009f1c:	3020      	adds	r0, #32
 8009f1e:	e7e4      	b.n	8009eea <__d2b+0x5a>
 8009f20:	4b0b      	ldr	r3, [pc, #44]	; (8009f50 <__d2b+0xc0>)
 8009f22:	18c0      	adds	r0, r0, r3
 8009f24:	4b0b      	ldr	r3, [pc, #44]	; (8009f54 <__d2b+0xc4>)
 8009f26:	6038      	str	r0, [r7, #0]
 8009f28:	18e3      	adds	r3, r4, r3
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	18eb      	adds	r3, r5, r3
 8009f2e:	6958      	ldr	r0, [r3, #20]
 8009f30:	f7ff fcae 	bl	8009890 <__hi0bits>
 8009f34:	0164      	lsls	r4, r4, #5
 8009f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f38:	1a24      	subs	r4, r4, r0
 8009f3a:	601c      	str	r4, [r3, #0]
 8009f3c:	e7df      	b.n	8009efe <__d2b+0x6e>
 8009f3e:	46c0      	nop			; (mov r8, r8)
 8009f40:	0800b3a9 	.word	0x0800b3a9
 8009f44:	0000030a 	.word	0x0000030a
 8009f48:	0800b434 	.word	0x0800b434
 8009f4c:	fffffbcd 	.word	0xfffffbcd
 8009f50:	fffffbce 	.word	0xfffffbce
 8009f54:	3fffffff 	.word	0x3fffffff

08009f58 <__ratio>:
 8009f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f5a:	b087      	sub	sp, #28
 8009f5c:	000f      	movs	r7, r1
 8009f5e:	a904      	add	r1, sp, #16
 8009f60:	0006      	movs	r6, r0
 8009f62:	f7ff ff45 	bl	8009df0 <__b2d>
 8009f66:	9000      	str	r0, [sp, #0]
 8009f68:	9101      	str	r1, [sp, #4]
 8009f6a:	9c00      	ldr	r4, [sp, #0]
 8009f6c:	9d01      	ldr	r5, [sp, #4]
 8009f6e:	0038      	movs	r0, r7
 8009f70:	a905      	add	r1, sp, #20
 8009f72:	f7ff ff3d 	bl	8009df0 <__b2d>
 8009f76:	9002      	str	r0, [sp, #8]
 8009f78:	9103      	str	r1, [sp, #12]
 8009f7a:	9a02      	ldr	r2, [sp, #8]
 8009f7c:	9b03      	ldr	r3, [sp, #12]
 8009f7e:	6931      	ldr	r1, [r6, #16]
 8009f80:	6938      	ldr	r0, [r7, #16]
 8009f82:	9e05      	ldr	r6, [sp, #20]
 8009f84:	1a08      	subs	r0, r1, r0
 8009f86:	9904      	ldr	r1, [sp, #16]
 8009f88:	0140      	lsls	r0, r0, #5
 8009f8a:	1b89      	subs	r1, r1, r6
 8009f8c:	1841      	adds	r1, r0, r1
 8009f8e:	0508      	lsls	r0, r1, #20
 8009f90:	2900      	cmp	r1, #0
 8009f92:	dd07      	ble.n	8009fa4 <__ratio+0x4c>
 8009f94:	9901      	ldr	r1, [sp, #4]
 8009f96:	1845      	adds	r5, r0, r1
 8009f98:	0020      	movs	r0, r4
 8009f9a:	0029      	movs	r1, r5
 8009f9c:	f7f7 fa34 	bl	8001408 <__aeabi_ddiv>
 8009fa0:	b007      	add	sp, #28
 8009fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fa4:	9903      	ldr	r1, [sp, #12]
 8009fa6:	1a0b      	subs	r3, r1, r0
 8009fa8:	e7f6      	b.n	8009f98 <__ratio+0x40>

08009faa <__copybits>:
 8009faa:	b570      	push	{r4, r5, r6, lr}
 8009fac:	0014      	movs	r4, r2
 8009fae:	0005      	movs	r5, r0
 8009fb0:	3901      	subs	r1, #1
 8009fb2:	6913      	ldr	r3, [r2, #16]
 8009fb4:	1149      	asrs	r1, r1, #5
 8009fb6:	3101      	adds	r1, #1
 8009fb8:	0089      	lsls	r1, r1, #2
 8009fba:	3414      	adds	r4, #20
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	1841      	adds	r1, r0, r1
 8009fc0:	18e3      	adds	r3, r4, r3
 8009fc2:	42a3      	cmp	r3, r4
 8009fc4:	d80d      	bhi.n	8009fe2 <__copybits+0x38>
 8009fc6:	0014      	movs	r4, r2
 8009fc8:	3411      	adds	r4, #17
 8009fca:	2500      	movs	r5, #0
 8009fcc:	429c      	cmp	r4, r3
 8009fce:	d803      	bhi.n	8009fd8 <__copybits+0x2e>
 8009fd0:	1a9b      	subs	r3, r3, r2
 8009fd2:	3b11      	subs	r3, #17
 8009fd4:	089b      	lsrs	r3, r3, #2
 8009fd6:	009d      	lsls	r5, r3, #2
 8009fd8:	2300      	movs	r3, #0
 8009fda:	1940      	adds	r0, r0, r5
 8009fdc:	4281      	cmp	r1, r0
 8009fde:	d803      	bhi.n	8009fe8 <__copybits+0x3e>
 8009fe0:	bd70      	pop	{r4, r5, r6, pc}
 8009fe2:	cc40      	ldmia	r4!, {r6}
 8009fe4:	c540      	stmia	r5!, {r6}
 8009fe6:	e7ec      	b.n	8009fc2 <__copybits+0x18>
 8009fe8:	c008      	stmia	r0!, {r3}
 8009fea:	e7f7      	b.n	8009fdc <__copybits+0x32>

08009fec <__any_on>:
 8009fec:	0002      	movs	r2, r0
 8009fee:	6900      	ldr	r0, [r0, #16]
 8009ff0:	b510      	push	{r4, lr}
 8009ff2:	3214      	adds	r2, #20
 8009ff4:	114b      	asrs	r3, r1, #5
 8009ff6:	4298      	cmp	r0, r3
 8009ff8:	db13      	blt.n	800a022 <__any_on+0x36>
 8009ffa:	dd0c      	ble.n	800a016 <__any_on+0x2a>
 8009ffc:	241f      	movs	r4, #31
 8009ffe:	0008      	movs	r0, r1
 800a000:	4020      	ands	r0, r4
 800a002:	4221      	tst	r1, r4
 800a004:	d007      	beq.n	800a016 <__any_on+0x2a>
 800a006:	0099      	lsls	r1, r3, #2
 800a008:	588c      	ldr	r4, [r1, r2]
 800a00a:	0021      	movs	r1, r4
 800a00c:	40c1      	lsrs	r1, r0
 800a00e:	4081      	lsls	r1, r0
 800a010:	2001      	movs	r0, #1
 800a012:	428c      	cmp	r4, r1
 800a014:	d104      	bne.n	800a020 <__any_on+0x34>
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	18d3      	adds	r3, r2, r3
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d803      	bhi.n	800a026 <__any_on+0x3a>
 800a01e:	2000      	movs	r0, #0
 800a020:	bd10      	pop	{r4, pc}
 800a022:	0003      	movs	r3, r0
 800a024:	e7f7      	b.n	800a016 <__any_on+0x2a>
 800a026:	3b04      	subs	r3, #4
 800a028:	6819      	ldr	r1, [r3, #0]
 800a02a:	2900      	cmp	r1, #0
 800a02c:	d0f5      	beq.n	800a01a <__any_on+0x2e>
 800a02e:	2001      	movs	r0, #1
 800a030:	e7f6      	b.n	800a020 <__any_on+0x34>

0800a032 <_calloc_r>:
 800a032:	b570      	push	{r4, r5, r6, lr}
 800a034:	0c13      	lsrs	r3, r2, #16
 800a036:	0c0d      	lsrs	r5, r1, #16
 800a038:	d11e      	bne.n	800a078 <_calloc_r+0x46>
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10c      	bne.n	800a058 <_calloc_r+0x26>
 800a03e:	b289      	uxth	r1, r1
 800a040:	b294      	uxth	r4, r2
 800a042:	434c      	muls	r4, r1
 800a044:	0021      	movs	r1, r4
 800a046:	f7fc fbfd 	bl	8006844 <_malloc_r>
 800a04a:	1e05      	subs	r5, r0, #0
 800a04c:	d01b      	beq.n	800a086 <_calloc_r+0x54>
 800a04e:	0022      	movs	r2, r4
 800a050:	2100      	movs	r1, #0
 800a052:	f7fc fb82 	bl	800675a <memset>
 800a056:	e016      	b.n	800a086 <_calloc_r+0x54>
 800a058:	1c1d      	adds	r5, r3, #0
 800a05a:	1c0b      	adds	r3, r1, #0
 800a05c:	b292      	uxth	r2, r2
 800a05e:	b289      	uxth	r1, r1
 800a060:	b29c      	uxth	r4, r3
 800a062:	4351      	muls	r1, r2
 800a064:	b2ab      	uxth	r3, r5
 800a066:	4363      	muls	r3, r4
 800a068:	0c0c      	lsrs	r4, r1, #16
 800a06a:	191c      	adds	r4, r3, r4
 800a06c:	0c22      	lsrs	r2, r4, #16
 800a06e:	d107      	bne.n	800a080 <_calloc_r+0x4e>
 800a070:	0424      	lsls	r4, r4, #16
 800a072:	b289      	uxth	r1, r1
 800a074:	430c      	orrs	r4, r1
 800a076:	e7e5      	b.n	800a044 <_calloc_r+0x12>
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d101      	bne.n	800a080 <_calloc_r+0x4e>
 800a07c:	1c13      	adds	r3, r2, #0
 800a07e:	e7ed      	b.n	800a05c <_calloc_r+0x2a>
 800a080:	230c      	movs	r3, #12
 800a082:	2500      	movs	r5, #0
 800a084:	6003      	str	r3, [r0, #0]
 800a086:	0028      	movs	r0, r5
 800a088:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a08c <__ssputs_r>:
 800a08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a08e:	688e      	ldr	r6, [r1, #8]
 800a090:	b085      	sub	sp, #20
 800a092:	0007      	movs	r7, r0
 800a094:	000c      	movs	r4, r1
 800a096:	9203      	str	r2, [sp, #12]
 800a098:	9301      	str	r3, [sp, #4]
 800a09a:	429e      	cmp	r6, r3
 800a09c:	d83c      	bhi.n	800a118 <__ssputs_r+0x8c>
 800a09e:	2390      	movs	r3, #144	; 0x90
 800a0a0:	898a      	ldrh	r2, [r1, #12]
 800a0a2:	00db      	lsls	r3, r3, #3
 800a0a4:	421a      	tst	r2, r3
 800a0a6:	d034      	beq.n	800a112 <__ssputs_r+0x86>
 800a0a8:	6909      	ldr	r1, [r1, #16]
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	6960      	ldr	r0, [r4, #20]
 800a0ae:	1a5b      	subs	r3, r3, r1
 800a0b0:	9302      	str	r3, [sp, #8]
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	4343      	muls	r3, r0
 800a0b6:	0fdd      	lsrs	r5, r3, #31
 800a0b8:	18ed      	adds	r5, r5, r3
 800a0ba:	9b01      	ldr	r3, [sp, #4]
 800a0bc:	9802      	ldr	r0, [sp, #8]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	181b      	adds	r3, r3, r0
 800a0c2:	106d      	asrs	r5, r5, #1
 800a0c4:	42ab      	cmp	r3, r5
 800a0c6:	d900      	bls.n	800a0ca <__ssputs_r+0x3e>
 800a0c8:	001d      	movs	r5, r3
 800a0ca:	0553      	lsls	r3, r2, #21
 800a0cc:	d532      	bpl.n	800a134 <__ssputs_r+0xa8>
 800a0ce:	0029      	movs	r1, r5
 800a0d0:	0038      	movs	r0, r7
 800a0d2:	f7fc fbb7 	bl	8006844 <_malloc_r>
 800a0d6:	1e06      	subs	r6, r0, #0
 800a0d8:	d109      	bne.n	800a0ee <__ssputs_r+0x62>
 800a0da:	230c      	movs	r3, #12
 800a0dc:	603b      	str	r3, [r7, #0]
 800a0de:	2340      	movs	r3, #64	; 0x40
 800a0e0:	2001      	movs	r0, #1
 800a0e2:	89a2      	ldrh	r2, [r4, #12]
 800a0e4:	4240      	negs	r0, r0
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	81a3      	strh	r3, [r4, #12]
 800a0ea:	b005      	add	sp, #20
 800a0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ee:	9a02      	ldr	r2, [sp, #8]
 800a0f0:	6921      	ldr	r1, [r4, #16]
 800a0f2:	f7fc fb29 	bl	8006748 <memcpy>
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	4a14      	ldr	r2, [pc, #80]	; (800a14c <__ssputs_r+0xc0>)
 800a0fa:	401a      	ands	r2, r3
 800a0fc:	2380      	movs	r3, #128	; 0x80
 800a0fe:	4313      	orrs	r3, r2
 800a100:	81a3      	strh	r3, [r4, #12]
 800a102:	9b02      	ldr	r3, [sp, #8]
 800a104:	6126      	str	r6, [r4, #16]
 800a106:	18f6      	adds	r6, r6, r3
 800a108:	6026      	str	r6, [r4, #0]
 800a10a:	6165      	str	r5, [r4, #20]
 800a10c:	9e01      	ldr	r6, [sp, #4]
 800a10e:	1aed      	subs	r5, r5, r3
 800a110:	60a5      	str	r5, [r4, #8]
 800a112:	9b01      	ldr	r3, [sp, #4]
 800a114:	429e      	cmp	r6, r3
 800a116:	d900      	bls.n	800a11a <__ssputs_r+0x8e>
 800a118:	9e01      	ldr	r6, [sp, #4]
 800a11a:	0032      	movs	r2, r6
 800a11c:	9903      	ldr	r1, [sp, #12]
 800a11e:	6820      	ldr	r0, [r4, #0]
 800a120:	f000 fdb6 	bl	800ac90 <memmove>
 800a124:	68a3      	ldr	r3, [r4, #8]
 800a126:	2000      	movs	r0, #0
 800a128:	1b9b      	subs	r3, r3, r6
 800a12a:	60a3      	str	r3, [r4, #8]
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	199e      	adds	r6, r3, r6
 800a130:	6026      	str	r6, [r4, #0]
 800a132:	e7da      	b.n	800a0ea <__ssputs_r+0x5e>
 800a134:	002a      	movs	r2, r5
 800a136:	0038      	movs	r0, r7
 800a138:	f000 fdbd 	bl	800acb6 <_realloc_r>
 800a13c:	1e06      	subs	r6, r0, #0
 800a13e:	d1e0      	bne.n	800a102 <__ssputs_r+0x76>
 800a140:	0038      	movs	r0, r7
 800a142:	6921      	ldr	r1, [r4, #16]
 800a144:	f7fc fb12 	bl	800676c <_free_r>
 800a148:	e7c7      	b.n	800a0da <__ssputs_r+0x4e>
 800a14a:	46c0      	nop			; (mov r8, r8)
 800a14c:	fffffb7f 	.word	0xfffffb7f

0800a150 <_svfiprintf_r>:
 800a150:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a152:	b0a1      	sub	sp, #132	; 0x84
 800a154:	9003      	str	r0, [sp, #12]
 800a156:	001d      	movs	r5, r3
 800a158:	898b      	ldrh	r3, [r1, #12]
 800a15a:	000f      	movs	r7, r1
 800a15c:	0016      	movs	r6, r2
 800a15e:	061b      	lsls	r3, r3, #24
 800a160:	d511      	bpl.n	800a186 <_svfiprintf_r+0x36>
 800a162:	690b      	ldr	r3, [r1, #16]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d10e      	bne.n	800a186 <_svfiprintf_r+0x36>
 800a168:	2140      	movs	r1, #64	; 0x40
 800a16a:	f7fc fb6b 	bl	8006844 <_malloc_r>
 800a16e:	6038      	str	r0, [r7, #0]
 800a170:	6138      	str	r0, [r7, #16]
 800a172:	2800      	cmp	r0, #0
 800a174:	d105      	bne.n	800a182 <_svfiprintf_r+0x32>
 800a176:	230c      	movs	r3, #12
 800a178:	9a03      	ldr	r2, [sp, #12]
 800a17a:	3801      	subs	r0, #1
 800a17c:	6013      	str	r3, [r2, #0]
 800a17e:	b021      	add	sp, #132	; 0x84
 800a180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a182:	2340      	movs	r3, #64	; 0x40
 800a184:	617b      	str	r3, [r7, #20]
 800a186:	2300      	movs	r3, #0
 800a188:	ac08      	add	r4, sp, #32
 800a18a:	6163      	str	r3, [r4, #20]
 800a18c:	3320      	adds	r3, #32
 800a18e:	7663      	strb	r3, [r4, #25]
 800a190:	3310      	adds	r3, #16
 800a192:	76a3      	strb	r3, [r4, #26]
 800a194:	9507      	str	r5, [sp, #28]
 800a196:	0035      	movs	r5, r6
 800a198:	782b      	ldrb	r3, [r5, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d001      	beq.n	800a1a2 <_svfiprintf_r+0x52>
 800a19e:	2b25      	cmp	r3, #37	; 0x25
 800a1a0:	d147      	bne.n	800a232 <_svfiprintf_r+0xe2>
 800a1a2:	1bab      	subs	r3, r5, r6
 800a1a4:	9305      	str	r3, [sp, #20]
 800a1a6:	42b5      	cmp	r5, r6
 800a1a8:	d00c      	beq.n	800a1c4 <_svfiprintf_r+0x74>
 800a1aa:	0032      	movs	r2, r6
 800a1ac:	0039      	movs	r1, r7
 800a1ae:	9803      	ldr	r0, [sp, #12]
 800a1b0:	f7ff ff6c 	bl	800a08c <__ssputs_r>
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	d100      	bne.n	800a1ba <_svfiprintf_r+0x6a>
 800a1b8:	e0ae      	b.n	800a318 <_svfiprintf_r+0x1c8>
 800a1ba:	6962      	ldr	r2, [r4, #20]
 800a1bc:	9b05      	ldr	r3, [sp, #20]
 800a1be:	4694      	mov	ip, r2
 800a1c0:	4463      	add	r3, ip
 800a1c2:	6163      	str	r3, [r4, #20]
 800a1c4:	782b      	ldrb	r3, [r5, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d100      	bne.n	800a1cc <_svfiprintf_r+0x7c>
 800a1ca:	e0a5      	b.n	800a318 <_svfiprintf_r+0x1c8>
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	4252      	negs	r2, r2
 800a1d2:	6062      	str	r2, [r4, #4]
 800a1d4:	a904      	add	r1, sp, #16
 800a1d6:	3254      	adds	r2, #84	; 0x54
 800a1d8:	1852      	adds	r2, r2, r1
 800a1da:	1c6e      	adds	r6, r5, #1
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	60e3      	str	r3, [r4, #12]
 800a1e0:	60a3      	str	r3, [r4, #8]
 800a1e2:	7013      	strb	r3, [r2, #0]
 800a1e4:	65a3      	str	r3, [r4, #88]	; 0x58
 800a1e6:	2205      	movs	r2, #5
 800a1e8:	7831      	ldrb	r1, [r6, #0]
 800a1ea:	4854      	ldr	r0, [pc, #336]	; (800a33c <_svfiprintf_r+0x1ec>)
 800a1ec:	f7ff fa3c 	bl	8009668 <memchr>
 800a1f0:	1c75      	adds	r5, r6, #1
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	d11f      	bne.n	800a236 <_svfiprintf_r+0xe6>
 800a1f6:	6822      	ldr	r2, [r4, #0]
 800a1f8:	06d3      	lsls	r3, r2, #27
 800a1fa:	d504      	bpl.n	800a206 <_svfiprintf_r+0xb6>
 800a1fc:	2353      	movs	r3, #83	; 0x53
 800a1fe:	a904      	add	r1, sp, #16
 800a200:	185b      	adds	r3, r3, r1
 800a202:	2120      	movs	r1, #32
 800a204:	7019      	strb	r1, [r3, #0]
 800a206:	0713      	lsls	r3, r2, #28
 800a208:	d504      	bpl.n	800a214 <_svfiprintf_r+0xc4>
 800a20a:	2353      	movs	r3, #83	; 0x53
 800a20c:	a904      	add	r1, sp, #16
 800a20e:	185b      	adds	r3, r3, r1
 800a210:	212b      	movs	r1, #43	; 0x2b
 800a212:	7019      	strb	r1, [r3, #0]
 800a214:	7833      	ldrb	r3, [r6, #0]
 800a216:	2b2a      	cmp	r3, #42	; 0x2a
 800a218:	d016      	beq.n	800a248 <_svfiprintf_r+0xf8>
 800a21a:	0035      	movs	r5, r6
 800a21c:	2100      	movs	r1, #0
 800a21e:	200a      	movs	r0, #10
 800a220:	68e3      	ldr	r3, [r4, #12]
 800a222:	782a      	ldrb	r2, [r5, #0]
 800a224:	1c6e      	adds	r6, r5, #1
 800a226:	3a30      	subs	r2, #48	; 0x30
 800a228:	2a09      	cmp	r2, #9
 800a22a:	d94e      	bls.n	800a2ca <_svfiprintf_r+0x17a>
 800a22c:	2900      	cmp	r1, #0
 800a22e:	d111      	bne.n	800a254 <_svfiprintf_r+0x104>
 800a230:	e017      	b.n	800a262 <_svfiprintf_r+0x112>
 800a232:	3501      	adds	r5, #1
 800a234:	e7b0      	b.n	800a198 <_svfiprintf_r+0x48>
 800a236:	4b41      	ldr	r3, [pc, #260]	; (800a33c <_svfiprintf_r+0x1ec>)
 800a238:	6822      	ldr	r2, [r4, #0]
 800a23a:	1ac0      	subs	r0, r0, r3
 800a23c:	2301      	movs	r3, #1
 800a23e:	4083      	lsls	r3, r0
 800a240:	4313      	orrs	r3, r2
 800a242:	002e      	movs	r6, r5
 800a244:	6023      	str	r3, [r4, #0]
 800a246:	e7ce      	b.n	800a1e6 <_svfiprintf_r+0x96>
 800a248:	9b07      	ldr	r3, [sp, #28]
 800a24a:	1d19      	adds	r1, r3, #4
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	9107      	str	r1, [sp, #28]
 800a250:	2b00      	cmp	r3, #0
 800a252:	db01      	blt.n	800a258 <_svfiprintf_r+0x108>
 800a254:	930b      	str	r3, [sp, #44]	; 0x2c
 800a256:	e004      	b.n	800a262 <_svfiprintf_r+0x112>
 800a258:	425b      	negs	r3, r3
 800a25a:	60e3      	str	r3, [r4, #12]
 800a25c:	2302      	movs	r3, #2
 800a25e:	4313      	orrs	r3, r2
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	782b      	ldrb	r3, [r5, #0]
 800a264:	2b2e      	cmp	r3, #46	; 0x2e
 800a266:	d10a      	bne.n	800a27e <_svfiprintf_r+0x12e>
 800a268:	786b      	ldrb	r3, [r5, #1]
 800a26a:	2b2a      	cmp	r3, #42	; 0x2a
 800a26c:	d135      	bne.n	800a2da <_svfiprintf_r+0x18a>
 800a26e:	9b07      	ldr	r3, [sp, #28]
 800a270:	3502      	adds	r5, #2
 800a272:	1d1a      	adds	r2, r3, #4
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	9207      	str	r2, [sp, #28]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	db2b      	blt.n	800a2d4 <_svfiprintf_r+0x184>
 800a27c:	9309      	str	r3, [sp, #36]	; 0x24
 800a27e:	4e30      	ldr	r6, [pc, #192]	; (800a340 <_svfiprintf_r+0x1f0>)
 800a280:	2203      	movs	r2, #3
 800a282:	0030      	movs	r0, r6
 800a284:	7829      	ldrb	r1, [r5, #0]
 800a286:	f7ff f9ef 	bl	8009668 <memchr>
 800a28a:	2800      	cmp	r0, #0
 800a28c:	d006      	beq.n	800a29c <_svfiprintf_r+0x14c>
 800a28e:	2340      	movs	r3, #64	; 0x40
 800a290:	1b80      	subs	r0, r0, r6
 800a292:	4083      	lsls	r3, r0
 800a294:	6822      	ldr	r2, [r4, #0]
 800a296:	3501      	adds	r5, #1
 800a298:	4313      	orrs	r3, r2
 800a29a:	6023      	str	r3, [r4, #0]
 800a29c:	7829      	ldrb	r1, [r5, #0]
 800a29e:	2206      	movs	r2, #6
 800a2a0:	4828      	ldr	r0, [pc, #160]	; (800a344 <_svfiprintf_r+0x1f4>)
 800a2a2:	1c6e      	adds	r6, r5, #1
 800a2a4:	7621      	strb	r1, [r4, #24]
 800a2a6:	f7ff f9df 	bl	8009668 <memchr>
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d03c      	beq.n	800a328 <_svfiprintf_r+0x1d8>
 800a2ae:	4b26      	ldr	r3, [pc, #152]	; (800a348 <_svfiprintf_r+0x1f8>)
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d125      	bne.n	800a300 <_svfiprintf_r+0x1b0>
 800a2b4:	2207      	movs	r2, #7
 800a2b6:	9b07      	ldr	r3, [sp, #28]
 800a2b8:	3307      	adds	r3, #7
 800a2ba:	4393      	bics	r3, r2
 800a2bc:	3308      	adds	r3, #8
 800a2be:	9307      	str	r3, [sp, #28]
 800a2c0:	6963      	ldr	r3, [r4, #20]
 800a2c2:	9a04      	ldr	r2, [sp, #16]
 800a2c4:	189b      	adds	r3, r3, r2
 800a2c6:	6163      	str	r3, [r4, #20]
 800a2c8:	e765      	b.n	800a196 <_svfiprintf_r+0x46>
 800a2ca:	4343      	muls	r3, r0
 800a2cc:	0035      	movs	r5, r6
 800a2ce:	2101      	movs	r1, #1
 800a2d0:	189b      	adds	r3, r3, r2
 800a2d2:	e7a6      	b.n	800a222 <_svfiprintf_r+0xd2>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	425b      	negs	r3, r3
 800a2d8:	e7d0      	b.n	800a27c <_svfiprintf_r+0x12c>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	200a      	movs	r0, #10
 800a2de:	001a      	movs	r2, r3
 800a2e0:	3501      	adds	r5, #1
 800a2e2:	6063      	str	r3, [r4, #4]
 800a2e4:	7829      	ldrb	r1, [r5, #0]
 800a2e6:	1c6e      	adds	r6, r5, #1
 800a2e8:	3930      	subs	r1, #48	; 0x30
 800a2ea:	2909      	cmp	r1, #9
 800a2ec:	d903      	bls.n	800a2f6 <_svfiprintf_r+0x1a6>
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d0c5      	beq.n	800a27e <_svfiprintf_r+0x12e>
 800a2f2:	9209      	str	r2, [sp, #36]	; 0x24
 800a2f4:	e7c3      	b.n	800a27e <_svfiprintf_r+0x12e>
 800a2f6:	4342      	muls	r2, r0
 800a2f8:	0035      	movs	r5, r6
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	1852      	adds	r2, r2, r1
 800a2fe:	e7f1      	b.n	800a2e4 <_svfiprintf_r+0x194>
 800a300:	ab07      	add	r3, sp, #28
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	003a      	movs	r2, r7
 800a306:	0021      	movs	r1, r4
 800a308:	4b10      	ldr	r3, [pc, #64]	; (800a34c <_svfiprintf_r+0x1fc>)
 800a30a:	9803      	ldr	r0, [sp, #12]
 800a30c:	f7fc fbba 	bl	8006a84 <_printf_float>
 800a310:	9004      	str	r0, [sp, #16]
 800a312:	9b04      	ldr	r3, [sp, #16]
 800a314:	3301      	adds	r3, #1
 800a316:	d1d3      	bne.n	800a2c0 <_svfiprintf_r+0x170>
 800a318:	89bb      	ldrh	r3, [r7, #12]
 800a31a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a31c:	065b      	lsls	r3, r3, #25
 800a31e:	d400      	bmi.n	800a322 <_svfiprintf_r+0x1d2>
 800a320:	e72d      	b.n	800a17e <_svfiprintf_r+0x2e>
 800a322:	2001      	movs	r0, #1
 800a324:	4240      	negs	r0, r0
 800a326:	e72a      	b.n	800a17e <_svfiprintf_r+0x2e>
 800a328:	ab07      	add	r3, sp, #28
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	003a      	movs	r2, r7
 800a32e:	0021      	movs	r1, r4
 800a330:	4b06      	ldr	r3, [pc, #24]	; (800a34c <_svfiprintf_r+0x1fc>)
 800a332:	9803      	ldr	r0, [sp, #12]
 800a334:	f7fc fe58 	bl	8006fe8 <_printf_i>
 800a338:	e7ea      	b.n	800a310 <_svfiprintf_r+0x1c0>
 800a33a:	46c0      	nop			; (mov r8, r8)
 800a33c:	0800b58c 	.word	0x0800b58c
 800a340:	0800b592 	.word	0x0800b592
 800a344:	0800b596 	.word	0x0800b596
 800a348:	08006a85 	.word	0x08006a85
 800a34c:	0800a08d 	.word	0x0800a08d

0800a350 <__sfputc_r>:
 800a350:	6893      	ldr	r3, [r2, #8]
 800a352:	b510      	push	{r4, lr}
 800a354:	3b01      	subs	r3, #1
 800a356:	6093      	str	r3, [r2, #8]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	da04      	bge.n	800a366 <__sfputc_r+0x16>
 800a35c:	6994      	ldr	r4, [r2, #24]
 800a35e:	42a3      	cmp	r3, r4
 800a360:	db07      	blt.n	800a372 <__sfputc_r+0x22>
 800a362:	290a      	cmp	r1, #10
 800a364:	d005      	beq.n	800a372 <__sfputc_r+0x22>
 800a366:	6813      	ldr	r3, [r2, #0]
 800a368:	1c58      	adds	r0, r3, #1
 800a36a:	6010      	str	r0, [r2, #0]
 800a36c:	7019      	strb	r1, [r3, #0]
 800a36e:	0008      	movs	r0, r1
 800a370:	bd10      	pop	{r4, pc}
 800a372:	f000 f96b 	bl	800a64c <__swbuf_r>
 800a376:	0001      	movs	r1, r0
 800a378:	e7f9      	b.n	800a36e <__sfputc_r+0x1e>

0800a37a <__sfputs_r>:
 800a37a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37c:	0006      	movs	r6, r0
 800a37e:	000f      	movs	r7, r1
 800a380:	0014      	movs	r4, r2
 800a382:	18d5      	adds	r5, r2, r3
 800a384:	42ac      	cmp	r4, r5
 800a386:	d101      	bne.n	800a38c <__sfputs_r+0x12>
 800a388:	2000      	movs	r0, #0
 800a38a:	e007      	b.n	800a39c <__sfputs_r+0x22>
 800a38c:	7821      	ldrb	r1, [r4, #0]
 800a38e:	003a      	movs	r2, r7
 800a390:	0030      	movs	r0, r6
 800a392:	f7ff ffdd 	bl	800a350 <__sfputc_r>
 800a396:	3401      	adds	r4, #1
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d1f3      	bne.n	800a384 <__sfputs_r+0xa>
 800a39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3a0 <_vfiprintf_r>:
 800a3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3a2:	b0a1      	sub	sp, #132	; 0x84
 800a3a4:	0006      	movs	r6, r0
 800a3a6:	000c      	movs	r4, r1
 800a3a8:	001f      	movs	r7, r3
 800a3aa:	9203      	str	r2, [sp, #12]
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	d004      	beq.n	800a3ba <_vfiprintf_r+0x1a>
 800a3b0:	6983      	ldr	r3, [r0, #24]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d101      	bne.n	800a3ba <_vfiprintf_r+0x1a>
 800a3b6:	f000 fb5b 	bl	800aa70 <__sinit>
 800a3ba:	4b8e      	ldr	r3, [pc, #568]	; (800a5f4 <_vfiprintf_r+0x254>)
 800a3bc:	429c      	cmp	r4, r3
 800a3be:	d11c      	bne.n	800a3fa <_vfiprintf_r+0x5a>
 800a3c0:	6874      	ldr	r4, [r6, #4]
 800a3c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3c4:	07db      	lsls	r3, r3, #31
 800a3c6:	d405      	bmi.n	800a3d4 <_vfiprintf_r+0x34>
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	059b      	lsls	r3, r3, #22
 800a3cc:	d402      	bmi.n	800a3d4 <_vfiprintf_r+0x34>
 800a3ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3d0:	f000 fbef 	bl	800abb2 <__retarget_lock_acquire_recursive>
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	071b      	lsls	r3, r3, #28
 800a3d8:	d502      	bpl.n	800a3e0 <_vfiprintf_r+0x40>
 800a3da:	6923      	ldr	r3, [r4, #16]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d11d      	bne.n	800a41c <_vfiprintf_r+0x7c>
 800a3e0:	0021      	movs	r1, r4
 800a3e2:	0030      	movs	r0, r6
 800a3e4:	f000 f996 	bl	800a714 <__swsetup_r>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	d017      	beq.n	800a41c <_vfiprintf_r+0x7c>
 800a3ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3ee:	07db      	lsls	r3, r3, #31
 800a3f0:	d50d      	bpl.n	800a40e <_vfiprintf_r+0x6e>
 800a3f2:	2001      	movs	r0, #1
 800a3f4:	4240      	negs	r0, r0
 800a3f6:	b021      	add	sp, #132	; 0x84
 800a3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3fa:	4b7f      	ldr	r3, [pc, #508]	; (800a5f8 <_vfiprintf_r+0x258>)
 800a3fc:	429c      	cmp	r4, r3
 800a3fe:	d101      	bne.n	800a404 <_vfiprintf_r+0x64>
 800a400:	68b4      	ldr	r4, [r6, #8]
 800a402:	e7de      	b.n	800a3c2 <_vfiprintf_r+0x22>
 800a404:	4b7d      	ldr	r3, [pc, #500]	; (800a5fc <_vfiprintf_r+0x25c>)
 800a406:	429c      	cmp	r4, r3
 800a408:	d1db      	bne.n	800a3c2 <_vfiprintf_r+0x22>
 800a40a:	68f4      	ldr	r4, [r6, #12]
 800a40c:	e7d9      	b.n	800a3c2 <_vfiprintf_r+0x22>
 800a40e:	89a3      	ldrh	r3, [r4, #12]
 800a410:	059b      	lsls	r3, r3, #22
 800a412:	d4ee      	bmi.n	800a3f2 <_vfiprintf_r+0x52>
 800a414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a416:	f000 fbcd 	bl	800abb4 <__retarget_lock_release_recursive>
 800a41a:	e7ea      	b.n	800a3f2 <_vfiprintf_r+0x52>
 800a41c:	2300      	movs	r3, #0
 800a41e:	ad08      	add	r5, sp, #32
 800a420:	616b      	str	r3, [r5, #20]
 800a422:	3320      	adds	r3, #32
 800a424:	766b      	strb	r3, [r5, #25]
 800a426:	3310      	adds	r3, #16
 800a428:	76ab      	strb	r3, [r5, #26]
 800a42a:	9707      	str	r7, [sp, #28]
 800a42c:	9f03      	ldr	r7, [sp, #12]
 800a42e:	783b      	ldrb	r3, [r7, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d001      	beq.n	800a438 <_vfiprintf_r+0x98>
 800a434:	2b25      	cmp	r3, #37	; 0x25
 800a436:	d14e      	bne.n	800a4d6 <_vfiprintf_r+0x136>
 800a438:	9b03      	ldr	r3, [sp, #12]
 800a43a:	1afb      	subs	r3, r7, r3
 800a43c:	9305      	str	r3, [sp, #20]
 800a43e:	9b03      	ldr	r3, [sp, #12]
 800a440:	429f      	cmp	r7, r3
 800a442:	d00d      	beq.n	800a460 <_vfiprintf_r+0xc0>
 800a444:	9b05      	ldr	r3, [sp, #20]
 800a446:	0021      	movs	r1, r4
 800a448:	0030      	movs	r0, r6
 800a44a:	9a03      	ldr	r2, [sp, #12]
 800a44c:	f7ff ff95 	bl	800a37a <__sfputs_r>
 800a450:	1c43      	adds	r3, r0, #1
 800a452:	d100      	bne.n	800a456 <_vfiprintf_r+0xb6>
 800a454:	e0b5      	b.n	800a5c2 <_vfiprintf_r+0x222>
 800a456:	696a      	ldr	r2, [r5, #20]
 800a458:	9b05      	ldr	r3, [sp, #20]
 800a45a:	4694      	mov	ip, r2
 800a45c:	4463      	add	r3, ip
 800a45e:	616b      	str	r3, [r5, #20]
 800a460:	783b      	ldrb	r3, [r7, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d100      	bne.n	800a468 <_vfiprintf_r+0xc8>
 800a466:	e0ac      	b.n	800a5c2 <_vfiprintf_r+0x222>
 800a468:	2201      	movs	r2, #1
 800a46a:	1c7b      	adds	r3, r7, #1
 800a46c:	9303      	str	r3, [sp, #12]
 800a46e:	2300      	movs	r3, #0
 800a470:	4252      	negs	r2, r2
 800a472:	606a      	str	r2, [r5, #4]
 800a474:	a904      	add	r1, sp, #16
 800a476:	3254      	adds	r2, #84	; 0x54
 800a478:	1852      	adds	r2, r2, r1
 800a47a:	602b      	str	r3, [r5, #0]
 800a47c:	60eb      	str	r3, [r5, #12]
 800a47e:	60ab      	str	r3, [r5, #8]
 800a480:	7013      	strb	r3, [r2, #0]
 800a482:	65ab      	str	r3, [r5, #88]	; 0x58
 800a484:	9b03      	ldr	r3, [sp, #12]
 800a486:	2205      	movs	r2, #5
 800a488:	7819      	ldrb	r1, [r3, #0]
 800a48a:	485d      	ldr	r0, [pc, #372]	; (800a600 <_vfiprintf_r+0x260>)
 800a48c:	f7ff f8ec 	bl	8009668 <memchr>
 800a490:	9b03      	ldr	r3, [sp, #12]
 800a492:	1c5f      	adds	r7, r3, #1
 800a494:	2800      	cmp	r0, #0
 800a496:	d120      	bne.n	800a4da <_vfiprintf_r+0x13a>
 800a498:	682a      	ldr	r2, [r5, #0]
 800a49a:	06d3      	lsls	r3, r2, #27
 800a49c:	d504      	bpl.n	800a4a8 <_vfiprintf_r+0x108>
 800a49e:	2353      	movs	r3, #83	; 0x53
 800a4a0:	a904      	add	r1, sp, #16
 800a4a2:	185b      	adds	r3, r3, r1
 800a4a4:	2120      	movs	r1, #32
 800a4a6:	7019      	strb	r1, [r3, #0]
 800a4a8:	0713      	lsls	r3, r2, #28
 800a4aa:	d504      	bpl.n	800a4b6 <_vfiprintf_r+0x116>
 800a4ac:	2353      	movs	r3, #83	; 0x53
 800a4ae:	a904      	add	r1, sp, #16
 800a4b0:	185b      	adds	r3, r3, r1
 800a4b2:	212b      	movs	r1, #43	; 0x2b
 800a4b4:	7019      	strb	r1, [r3, #0]
 800a4b6:	9b03      	ldr	r3, [sp, #12]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a4bc:	d016      	beq.n	800a4ec <_vfiprintf_r+0x14c>
 800a4be:	2100      	movs	r1, #0
 800a4c0:	68eb      	ldr	r3, [r5, #12]
 800a4c2:	9f03      	ldr	r7, [sp, #12]
 800a4c4:	783a      	ldrb	r2, [r7, #0]
 800a4c6:	1c78      	adds	r0, r7, #1
 800a4c8:	3a30      	subs	r2, #48	; 0x30
 800a4ca:	4684      	mov	ip, r0
 800a4cc:	2a09      	cmp	r2, #9
 800a4ce:	d94f      	bls.n	800a570 <_vfiprintf_r+0x1d0>
 800a4d0:	2900      	cmp	r1, #0
 800a4d2:	d111      	bne.n	800a4f8 <_vfiprintf_r+0x158>
 800a4d4:	e017      	b.n	800a506 <_vfiprintf_r+0x166>
 800a4d6:	3701      	adds	r7, #1
 800a4d8:	e7a9      	b.n	800a42e <_vfiprintf_r+0x8e>
 800a4da:	4b49      	ldr	r3, [pc, #292]	; (800a600 <_vfiprintf_r+0x260>)
 800a4dc:	682a      	ldr	r2, [r5, #0]
 800a4de:	1ac0      	subs	r0, r0, r3
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	4083      	lsls	r3, r0
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	602b      	str	r3, [r5, #0]
 800a4e8:	9703      	str	r7, [sp, #12]
 800a4ea:	e7cb      	b.n	800a484 <_vfiprintf_r+0xe4>
 800a4ec:	9b07      	ldr	r3, [sp, #28]
 800a4ee:	1d19      	adds	r1, r3, #4
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	9107      	str	r1, [sp, #28]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	db01      	blt.n	800a4fc <_vfiprintf_r+0x15c>
 800a4f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4fa:	e004      	b.n	800a506 <_vfiprintf_r+0x166>
 800a4fc:	425b      	negs	r3, r3
 800a4fe:	60eb      	str	r3, [r5, #12]
 800a500:	2302      	movs	r3, #2
 800a502:	4313      	orrs	r3, r2
 800a504:	602b      	str	r3, [r5, #0]
 800a506:	783b      	ldrb	r3, [r7, #0]
 800a508:	2b2e      	cmp	r3, #46	; 0x2e
 800a50a:	d10a      	bne.n	800a522 <_vfiprintf_r+0x182>
 800a50c:	787b      	ldrb	r3, [r7, #1]
 800a50e:	2b2a      	cmp	r3, #42	; 0x2a
 800a510:	d137      	bne.n	800a582 <_vfiprintf_r+0x1e2>
 800a512:	9b07      	ldr	r3, [sp, #28]
 800a514:	3702      	adds	r7, #2
 800a516:	1d1a      	adds	r2, r3, #4
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	9207      	str	r2, [sp, #28]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	db2d      	blt.n	800a57c <_vfiprintf_r+0x1dc>
 800a520:	9309      	str	r3, [sp, #36]	; 0x24
 800a522:	2203      	movs	r2, #3
 800a524:	7839      	ldrb	r1, [r7, #0]
 800a526:	4837      	ldr	r0, [pc, #220]	; (800a604 <_vfiprintf_r+0x264>)
 800a528:	f7ff f89e 	bl	8009668 <memchr>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d007      	beq.n	800a540 <_vfiprintf_r+0x1a0>
 800a530:	4b34      	ldr	r3, [pc, #208]	; (800a604 <_vfiprintf_r+0x264>)
 800a532:	682a      	ldr	r2, [r5, #0]
 800a534:	1ac0      	subs	r0, r0, r3
 800a536:	2340      	movs	r3, #64	; 0x40
 800a538:	4083      	lsls	r3, r0
 800a53a:	4313      	orrs	r3, r2
 800a53c:	3701      	adds	r7, #1
 800a53e:	602b      	str	r3, [r5, #0]
 800a540:	7839      	ldrb	r1, [r7, #0]
 800a542:	1c7b      	adds	r3, r7, #1
 800a544:	2206      	movs	r2, #6
 800a546:	4830      	ldr	r0, [pc, #192]	; (800a608 <_vfiprintf_r+0x268>)
 800a548:	9303      	str	r3, [sp, #12]
 800a54a:	7629      	strb	r1, [r5, #24]
 800a54c:	f7ff f88c 	bl	8009668 <memchr>
 800a550:	2800      	cmp	r0, #0
 800a552:	d045      	beq.n	800a5e0 <_vfiprintf_r+0x240>
 800a554:	4b2d      	ldr	r3, [pc, #180]	; (800a60c <_vfiprintf_r+0x26c>)
 800a556:	2b00      	cmp	r3, #0
 800a558:	d127      	bne.n	800a5aa <_vfiprintf_r+0x20a>
 800a55a:	2207      	movs	r2, #7
 800a55c:	9b07      	ldr	r3, [sp, #28]
 800a55e:	3307      	adds	r3, #7
 800a560:	4393      	bics	r3, r2
 800a562:	3308      	adds	r3, #8
 800a564:	9307      	str	r3, [sp, #28]
 800a566:	696b      	ldr	r3, [r5, #20]
 800a568:	9a04      	ldr	r2, [sp, #16]
 800a56a:	189b      	adds	r3, r3, r2
 800a56c:	616b      	str	r3, [r5, #20]
 800a56e:	e75d      	b.n	800a42c <_vfiprintf_r+0x8c>
 800a570:	210a      	movs	r1, #10
 800a572:	434b      	muls	r3, r1
 800a574:	4667      	mov	r7, ip
 800a576:	189b      	adds	r3, r3, r2
 800a578:	3909      	subs	r1, #9
 800a57a:	e7a3      	b.n	800a4c4 <_vfiprintf_r+0x124>
 800a57c:	2301      	movs	r3, #1
 800a57e:	425b      	negs	r3, r3
 800a580:	e7ce      	b.n	800a520 <_vfiprintf_r+0x180>
 800a582:	2300      	movs	r3, #0
 800a584:	001a      	movs	r2, r3
 800a586:	3701      	adds	r7, #1
 800a588:	606b      	str	r3, [r5, #4]
 800a58a:	7839      	ldrb	r1, [r7, #0]
 800a58c:	1c78      	adds	r0, r7, #1
 800a58e:	3930      	subs	r1, #48	; 0x30
 800a590:	4684      	mov	ip, r0
 800a592:	2909      	cmp	r1, #9
 800a594:	d903      	bls.n	800a59e <_vfiprintf_r+0x1fe>
 800a596:	2b00      	cmp	r3, #0
 800a598:	d0c3      	beq.n	800a522 <_vfiprintf_r+0x182>
 800a59a:	9209      	str	r2, [sp, #36]	; 0x24
 800a59c:	e7c1      	b.n	800a522 <_vfiprintf_r+0x182>
 800a59e:	230a      	movs	r3, #10
 800a5a0:	435a      	muls	r2, r3
 800a5a2:	4667      	mov	r7, ip
 800a5a4:	1852      	adds	r2, r2, r1
 800a5a6:	3b09      	subs	r3, #9
 800a5a8:	e7ef      	b.n	800a58a <_vfiprintf_r+0x1ea>
 800a5aa:	ab07      	add	r3, sp, #28
 800a5ac:	9300      	str	r3, [sp, #0]
 800a5ae:	0022      	movs	r2, r4
 800a5b0:	0029      	movs	r1, r5
 800a5b2:	0030      	movs	r0, r6
 800a5b4:	4b16      	ldr	r3, [pc, #88]	; (800a610 <_vfiprintf_r+0x270>)
 800a5b6:	f7fc fa65 	bl	8006a84 <_printf_float>
 800a5ba:	9004      	str	r0, [sp, #16]
 800a5bc:	9b04      	ldr	r3, [sp, #16]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	d1d1      	bne.n	800a566 <_vfiprintf_r+0x1c6>
 800a5c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5c4:	07db      	lsls	r3, r3, #31
 800a5c6:	d405      	bmi.n	800a5d4 <_vfiprintf_r+0x234>
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	059b      	lsls	r3, r3, #22
 800a5cc:	d402      	bmi.n	800a5d4 <_vfiprintf_r+0x234>
 800a5ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5d0:	f000 faf0 	bl	800abb4 <__retarget_lock_release_recursive>
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	065b      	lsls	r3, r3, #25
 800a5d8:	d500      	bpl.n	800a5dc <_vfiprintf_r+0x23c>
 800a5da:	e70a      	b.n	800a3f2 <_vfiprintf_r+0x52>
 800a5dc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a5de:	e70a      	b.n	800a3f6 <_vfiprintf_r+0x56>
 800a5e0:	ab07      	add	r3, sp, #28
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	0022      	movs	r2, r4
 800a5e6:	0029      	movs	r1, r5
 800a5e8:	0030      	movs	r0, r6
 800a5ea:	4b09      	ldr	r3, [pc, #36]	; (800a610 <_vfiprintf_r+0x270>)
 800a5ec:	f7fc fcfc 	bl	8006fe8 <_printf_i>
 800a5f0:	e7e3      	b.n	800a5ba <_vfiprintf_r+0x21a>
 800a5f2:	46c0      	nop			; (mov r8, r8)
 800a5f4:	0800b5c0 	.word	0x0800b5c0
 800a5f8:	0800b5e0 	.word	0x0800b5e0
 800a5fc:	0800b5a0 	.word	0x0800b5a0
 800a600:	0800b58c 	.word	0x0800b58c
 800a604:	0800b592 	.word	0x0800b592
 800a608:	0800b596 	.word	0x0800b596
 800a60c:	08006a85 	.word	0x08006a85
 800a610:	0800a37b 	.word	0x0800a37b

0800a614 <nan>:
 800a614:	2000      	movs	r0, #0
 800a616:	4901      	ldr	r1, [pc, #4]	; (800a61c <nan+0x8>)
 800a618:	4770      	bx	lr
 800a61a:	46c0      	nop			; (mov r8, r8)
 800a61c:	7ff80000 	.word	0x7ff80000

0800a620 <nanf>:
 800a620:	4800      	ldr	r0, [pc, #0]	; (800a624 <nanf+0x4>)
 800a622:	4770      	bx	lr
 800a624:	7fc00000 	.word	0x7fc00000

0800a628 <strncmp>:
 800a628:	b530      	push	{r4, r5, lr}
 800a62a:	0005      	movs	r5, r0
 800a62c:	1e10      	subs	r0, r2, #0
 800a62e:	d008      	beq.n	800a642 <strncmp+0x1a>
 800a630:	2400      	movs	r4, #0
 800a632:	3a01      	subs	r2, #1
 800a634:	5d2b      	ldrb	r3, [r5, r4]
 800a636:	5d08      	ldrb	r0, [r1, r4]
 800a638:	4283      	cmp	r3, r0
 800a63a:	d101      	bne.n	800a640 <strncmp+0x18>
 800a63c:	4294      	cmp	r4, r2
 800a63e:	d101      	bne.n	800a644 <strncmp+0x1c>
 800a640:	1a18      	subs	r0, r3, r0
 800a642:	bd30      	pop	{r4, r5, pc}
 800a644:	3401      	adds	r4, #1
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1f4      	bne.n	800a634 <strncmp+0xc>
 800a64a:	e7f9      	b.n	800a640 <strncmp+0x18>

0800a64c <__swbuf_r>:
 800a64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64e:	0005      	movs	r5, r0
 800a650:	000e      	movs	r6, r1
 800a652:	0014      	movs	r4, r2
 800a654:	2800      	cmp	r0, #0
 800a656:	d004      	beq.n	800a662 <__swbuf_r+0x16>
 800a658:	6983      	ldr	r3, [r0, #24]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <__swbuf_r+0x16>
 800a65e:	f000 fa07 	bl	800aa70 <__sinit>
 800a662:	4b22      	ldr	r3, [pc, #136]	; (800a6ec <__swbuf_r+0xa0>)
 800a664:	429c      	cmp	r4, r3
 800a666:	d12e      	bne.n	800a6c6 <__swbuf_r+0x7a>
 800a668:	686c      	ldr	r4, [r5, #4]
 800a66a:	69a3      	ldr	r3, [r4, #24]
 800a66c:	60a3      	str	r3, [r4, #8]
 800a66e:	89a3      	ldrh	r3, [r4, #12]
 800a670:	071b      	lsls	r3, r3, #28
 800a672:	d532      	bpl.n	800a6da <__swbuf_r+0x8e>
 800a674:	6923      	ldr	r3, [r4, #16]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d02f      	beq.n	800a6da <__swbuf_r+0x8e>
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	6922      	ldr	r2, [r4, #16]
 800a67e:	b2f7      	uxtb	r7, r6
 800a680:	1a98      	subs	r0, r3, r2
 800a682:	6963      	ldr	r3, [r4, #20]
 800a684:	b2f6      	uxtb	r6, r6
 800a686:	4283      	cmp	r3, r0
 800a688:	dc05      	bgt.n	800a696 <__swbuf_r+0x4a>
 800a68a:	0021      	movs	r1, r4
 800a68c:	0028      	movs	r0, r5
 800a68e:	f000 f94d 	bl	800a92c <_fflush_r>
 800a692:	2800      	cmp	r0, #0
 800a694:	d127      	bne.n	800a6e6 <__swbuf_r+0x9a>
 800a696:	68a3      	ldr	r3, [r4, #8]
 800a698:	3001      	adds	r0, #1
 800a69a:	3b01      	subs	r3, #1
 800a69c:	60a3      	str	r3, [r4, #8]
 800a69e:	6823      	ldr	r3, [r4, #0]
 800a6a0:	1c5a      	adds	r2, r3, #1
 800a6a2:	6022      	str	r2, [r4, #0]
 800a6a4:	701f      	strb	r7, [r3, #0]
 800a6a6:	6963      	ldr	r3, [r4, #20]
 800a6a8:	4283      	cmp	r3, r0
 800a6aa:	d004      	beq.n	800a6b6 <__swbuf_r+0x6a>
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	07db      	lsls	r3, r3, #31
 800a6b0:	d507      	bpl.n	800a6c2 <__swbuf_r+0x76>
 800a6b2:	2e0a      	cmp	r6, #10
 800a6b4:	d105      	bne.n	800a6c2 <__swbuf_r+0x76>
 800a6b6:	0021      	movs	r1, r4
 800a6b8:	0028      	movs	r0, r5
 800a6ba:	f000 f937 	bl	800a92c <_fflush_r>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d111      	bne.n	800a6e6 <__swbuf_r+0x9a>
 800a6c2:	0030      	movs	r0, r6
 800a6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6c6:	4b0a      	ldr	r3, [pc, #40]	; (800a6f0 <__swbuf_r+0xa4>)
 800a6c8:	429c      	cmp	r4, r3
 800a6ca:	d101      	bne.n	800a6d0 <__swbuf_r+0x84>
 800a6cc:	68ac      	ldr	r4, [r5, #8]
 800a6ce:	e7cc      	b.n	800a66a <__swbuf_r+0x1e>
 800a6d0:	4b08      	ldr	r3, [pc, #32]	; (800a6f4 <__swbuf_r+0xa8>)
 800a6d2:	429c      	cmp	r4, r3
 800a6d4:	d1c9      	bne.n	800a66a <__swbuf_r+0x1e>
 800a6d6:	68ec      	ldr	r4, [r5, #12]
 800a6d8:	e7c7      	b.n	800a66a <__swbuf_r+0x1e>
 800a6da:	0021      	movs	r1, r4
 800a6dc:	0028      	movs	r0, r5
 800a6de:	f000 f819 	bl	800a714 <__swsetup_r>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d0c9      	beq.n	800a67a <__swbuf_r+0x2e>
 800a6e6:	2601      	movs	r6, #1
 800a6e8:	4276      	negs	r6, r6
 800a6ea:	e7ea      	b.n	800a6c2 <__swbuf_r+0x76>
 800a6ec:	0800b5c0 	.word	0x0800b5c0
 800a6f0:	0800b5e0 	.word	0x0800b5e0
 800a6f4:	0800b5a0 	.word	0x0800b5a0

0800a6f8 <__ascii_wctomb>:
 800a6f8:	0003      	movs	r3, r0
 800a6fa:	1e08      	subs	r0, r1, #0
 800a6fc:	d005      	beq.n	800a70a <__ascii_wctomb+0x12>
 800a6fe:	2aff      	cmp	r2, #255	; 0xff
 800a700:	d904      	bls.n	800a70c <__ascii_wctomb+0x14>
 800a702:	228a      	movs	r2, #138	; 0x8a
 800a704:	2001      	movs	r0, #1
 800a706:	601a      	str	r2, [r3, #0]
 800a708:	4240      	negs	r0, r0
 800a70a:	4770      	bx	lr
 800a70c:	2001      	movs	r0, #1
 800a70e:	700a      	strb	r2, [r1, #0]
 800a710:	e7fb      	b.n	800a70a <__ascii_wctomb+0x12>
	...

0800a714 <__swsetup_r>:
 800a714:	4b37      	ldr	r3, [pc, #220]	; (800a7f4 <__swsetup_r+0xe0>)
 800a716:	b570      	push	{r4, r5, r6, lr}
 800a718:	681d      	ldr	r5, [r3, #0]
 800a71a:	0006      	movs	r6, r0
 800a71c:	000c      	movs	r4, r1
 800a71e:	2d00      	cmp	r5, #0
 800a720:	d005      	beq.n	800a72e <__swsetup_r+0x1a>
 800a722:	69ab      	ldr	r3, [r5, #24]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d102      	bne.n	800a72e <__swsetup_r+0x1a>
 800a728:	0028      	movs	r0, r5
 800a72a:	f000 f9a1 	bl	800aa70 <__sinit>
 800a72e:	4b32      	ldr	r3, [pc, #200]	; (800a7f8 <__swsetup_r+0xe4>)
 800a730:	429c      	cmp	r4, r3
 800a732:	d10f      	bne.n	800a754 <__swsetup_r+0x40>
 800a734:	686c      	ldr	r4, [r5, #4]
 800a736:	230c      	movs	r3, #12
 800a738:	5ee2      	ldrsh	r2, [r4, r3]
 800a73a:	b293      	uxth	r3, r2
 800a73c:	0711      	lsls	r1, r2, #28
 800a73e:	d42d      	bmi.n	800a79c <__swsetup_r+0x88>
 800a740:	06d9      	lsls	r1, r3, #27
 800a742:	d411      	bmi.n	800a768 <__swsetup_r+0x54>
 800a744:	2309      	movs	r3, #9
 800a746:	2001      	movs	r0, #1
 800a748:	6033      	str	r3, [r6, #0]
 800a74a:	3337      	adds	r3, #55	; 0x37
 800a74c:	4313      	orrs	r3, r2
 800a74e:	81a3      	strh	r3, [r4, #12]
 800a750:	4240      	negs	r0, r0
 800a752:	bd70      	pop	{r4, r5, r6, pc}
 800a754:	4b29      	ldr	r3, [pc, #164]	; (800a7fc <__swsetup_r+0xe8>)
 800a756:	429c      	cmp	r4, r3
 800a758:	d101      	bne.n	800a75e <__swsetup_r+0x4a>
 800a75a:	68ac      	ldr	r4, [r5, #8]
 800a75c:	e7eb      	b.n	800a736 <__swsetup_r+0x22>
 800a75e:	4b28      	ldr	r3, [pc, #160]	; (800a800 <__swsetup_r+0xec>)
 800a760:	429c      	cmp	r4, r3
 800a762:	d1e8      	bne.n	800a736 <__swsetup_r+0x22>
 800a764:	68ec      	ldr	r4, [r5, #12]
 800a766:	e7e6      	b.n	800a736 <__swsetup_r+0x22>
 800a768:	075b      	lsls	r3, r3, #29
 800a76a:	d513      	bpl.n	800a794 <__swsetup_r+0x80>
 800a76c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a76e:	2900      	cmp	r1, #0
 800a770:	d008      	beq.n	800a784 <__swsetup_r+0x70>
 800a772:	0023      	movs	r3, r4
 800a774:	3344      	adds	r3, #68	; 0x44
 800a776:	4299      	cmp	r1, r3
 800a778:	d002      	beq.n	800a780 <__swsetup_r+0x6c>
 800a77a:	0030      	movs	r0, r6
 800a77c:	f7fb fff6 	bl	800676c <_free_r>
 800a780:	2300      	movs	r3, #0
 800a782:	6363      	str	r3, [r4, #52]	; 0x34
 800a784:	2224      	movs	r2, #36	; 0x24
 800a786:	89a3      	ldrh	r3, [r4, #12]
 800a788:	4393      	bics	r3, r2
 800a78a:	81a3      	strh	r3, [r4, #12]
 800a78c:	2300      	movs	r3, #0
 800a78e:	6063      	str	r3, [r4, #4]
 800a790:	6923      	ldr	r3, [r4, #16]
 800a792:	6023      	str	r3, [r4, #0]
 800a794:	2308      	movs	r3, #8
 800a796:	89a2      	ldrh	r2, [r4, #12]
 800a798:	4313      	orrs	r3, r2
 800a79a:	81a3      	strh	r3, [r4, #12]
 800a79c:	6923      	ldr	r3, [r4, #16]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10b      	bne.n	800a7ba <__swsetup_r+0xa6>
 800a7a2:	21a0      	movs	r1, #160	; 0xa0
 800a7a4:	2280      	movs	r2, #128	; 0x80
 800a7a6:	89a3      	ldrh	r3, [r4, #12]
 800a7a8:	0089      	lsls	r1, r1, #2
 800a7aa:	0092      	lsls	r2, r2, #2
 800a7ac:	400b      	ands	r3, r1
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d003      	beq.n	800a7ba <__swsetup_r+0xa6>
 800a7b2:	0021      	movs	r1, r4
 800a7b4:	0030      	movs	r0, r6
 800a7b6:	f000 fa27 	bl	800ac08 <__smakebuf_r>
 800a7ba:	220c      	movs	r2, #12
 800a7bc:	5ea3      	ldrsh	r3, [r4, r2]
 800a7be:	2001      	movs	r0, #1
 800a7c0:	001a      	movs	r2, r3
 800a7c2:	b299      	uxth	r1, r3
 800a7c4:	4002      	ands	r2, r0
 800a7c6:	4203      	tst	r3, r0
 800a7c8:	d00f      	beq.n	800a7ea <__swsetup_r+0xd6>
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	60a2      	str	r2, [r4, #8]
 800a7ce:	6962      	ldr	r2, [r4, #20]
 800a7d0:	4252      	negs	r2, r2
 800a7d2:	61a2      	str	r2, [r4, #24]
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	6922      	ldr	r2, [r4, #16]
 800a7d8:	4282      	cmp	r2, r0
 800a7da:	d1ba      	bne.n	800a752 <__swsetup_r+0x3e>
 800a7dc:	060a      	lsls	r2, r1, #24
 800a7de:	d5b8      	bpl.n	800a752 <__swsetup_r+0x3e>
 800a7e0:	2240      	movs	r2, #64	; 0x40
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	81a3      	strh	r3, [r4, #12]
 800a7e6:	3801      	subs	r0, #1
 800a7e8:	e7b3      	b.n	800a752 <__swsetup_r+0x3e>
 800a7ea:	0788      	lsls	r0, r1, #30
 800a7ec:	d400      	bmi.n	800a7f0 <__swsetup_r+0xdc>
 800a7ee:	6962      	ldr	r2, [r4, #20]
 800a7f0:	60a2      	str	r2, [r4, #8]
 800a7f2:	e7ef      	b.n	800a7d4 <__swsetup_r+0xc0>
 800a7f4:	2000000c 	.word	0x2000000c
 800a7f8:	0800b5c0 	.word	0x0800b5c0
 800a7fc:	0800b5e0 	.word	0x0800b5e0
 800a800:	0800b5a0 	.word	0x0800b5a0

0800a804 <abort>:
 800a804:	2006      	movs	r0, #6
 800a806:	b510      	push	{r4, lr}
 800a808:	f000 faae 	bl	800ad68 <raise>
 800a80c:	2001      	movs	r0, #1
 800a80e:	f7f9 faa1 	bl	8003d54 <_exit>
	...

0800a814 <__sflush_r>:
 800a814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a816:	898b      	ldrh	r3, [r1, #12]
 800a818:	0005      	movs	r5, r0
 800a81a:	000c      	movs	r4, r1
 800a81c:	071a      	lsls	r2, r3, #28
 800a81e:	d45f      	bmi.n	800a8e0 <__sflush_r+0xcc>
 800a820:	684a      	ldr	r2, [r1, #4]
 800a822:	2a00      	cmp	r2, #0
 800a824:	dc04      	bgt.n	800a830 <__sflush_r+0x1c>
 800a826:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a828:	2a00      	cmp	r2, #0
 800a82a:	dc01      	bgt.n	800a830 <__sflush_r+0x1c>
 800a82c:	2000      	movs	r0, #0
 800a82e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a830:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a832:	2f00      	cmp	r7, #0
 800a834:	d0fa      	beq.n	800a82c <__sflush_r+0x18>
 800a836:	2200      	movs	r2, #0
 800a838:	2180      	movs	r1, #128	; 0x80
 800a83a:	682e      	ldr	r6, [r5, #0]
 800a83c:	602a      	str	r2, [r5, #0]
 800a83e:	001a      	movs	r2, r3
 800a840:	0149      	lsls	r1, r1, #5
 800a842:	400a      	ands	r2, r1
 800a844:	420b      	tst	r3, r1
 800a846:	d034      	beq.n	800a8b2 <__sflush_r+0x9e>
 800a848:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a84a:	89a3      	ldrh	r3, [r4, #12]
 800a84c:	075b      	lsls	r3, r3, #29
 800a84e:	d506      	bpl.n	800a85e <__sflush_r+0x4a>
 800a850:	6863      	ldr	r3, [r4, #4]
 800a852:	1ac0      	subs	r0, r0, r3
 800a854:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a856:	2b00      	cmp	r3, #0
 800a858:	d001      	beq.n	800a85e <__sflush_r+0x4a>
 800a85a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a85c:	1ac0      	subs	r0, r0, r3
 800a85e:	0002      	movs	r2, r0
 800a860:	6a21      	ldr	r1, [r4, #32]
 800a862:	2300      	movs	r3, #0
 800a864:	0028      	movs	r0, r5
 800a866:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a868:	47b8      	blx	r7
 800a86a:	89a1      	ldrh	r1, [r4, #12]
 800a86c:	1c43      	adds	r3, r0, #1
 800a86e:	d106      	bne.n	800a87e <__sflush_r+0x6a>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	2b1d      	cmp	r3, #29
 800a874:	d831      	bhi.n	800a8da <__sflush_r+0xc6>
 800a876:	4a2c      	ldr	r2, [pc, #176]	; (800a928 <__sflush_r+0x114>)
 800a878:	40da      	lsrs	r2, r3
 800a87a:	07d3      	lsls	r3, r2, #31
 800a87c:	d52d      	bpl.n	800a8da <__sflush_r+0xc6>
 800a87e:	2300      	movs	r3, #0
 800a880:	6063      	str	r3, [r4, #4]
 800a882:	6923      	ldr	r3, [r4, #16]
 800a884:	6023      	str	r3, [r4, #0]
 800a886:	04cb      	lsls	r3, r1, #19
 800a888:	d505      	bpl.n	800a896 <__sflush_r+0x82>
 800a88a:	1c43      	adds	r3, r0, #1
 800a88c:	d102      	bne.n	800a894 <__sflush_r+0x80>
 800a88e:	682b      	ldr	r3, [r5, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d100      	bne.n	800a896 <__sflush_r+0x82>
 800a894:	6560      	str	r0, [r4, #84]	; 0x54
 800a896:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a898:	602e      	str	r6, [r5, #0]
 800a89a:	2900      	cmp	r1, #0
 800a89c:	d0c6      	beq.n	800a82c <__sflush_r+0x18>
 800a89e:	0023      	movs	r3, r4
 800a8a0:	3344      	adds	r3, #68	; 0x44
 800a8a2:	4299      	cmp	r1, r3
 800a8a4:	d002      	beq.n	800a8ac <__sflush_r+0x98>
 800a8a6:	0028      	movs	r0, r5
 800a8a8:	f7fb ff60 	bl	800676c <_free_r>
 800a8ac:	2000      	movs	r0, #0
 800a8ae:	6360      	str	r0, [r4, #52]	; 0x34
 800a8b0:	e7bd      	b.n	800a82e <__sflush_r+0x1a>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	0028      	movs	r0, r5
 800a8b6:	6a21      	ldr	r1, [r4, #32]
 800a8b8:	47b8      	blx	r7
 800a8ba:	1c43      	adds	r3, r0, #1
 800a8bc:	d1c5      	bne.n	800a84a <__sflush_r+0x36>
 800a8be:	682b      	ldr	r3, [r5, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d0c2      	beq.n	800a84a <__sflush_r+0x36>
 800a8c4:	2b1d      	cmp	r3, #29
 800a8c6:	d001      	beq.n	800a8cc <__sflush_r+0xb8>
 800a8c8:	2b16      	cmp	r3, #22
 800a8ca:	d101      	bne.n	800a8d0 <__sflush_r+0xbc>
 800a8cc:	602e      	str	r6, [r5, #0]
 800a8ce:	e7ad      	b.n	800a82c <__sflush_r+0x18>
 800a8d0:	2340      	movs	r3, #64	; 0x40
 800a8d2:	89a2      	ldrh	r2, [r4, #12]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	81a3      	strh	r3, [r4, #12]
 800a8d8:	e7a9      	b.n	800a82e <__sflush_r+0x1a>
 800a8da:	2340      	movs	r3, #64	; 0x40
 800a8dc:	430b      	orrs	r3, r1
 800a8de:	e7fa      	b.n	800a8d6 <__sflush_r+0xc2>
 800a8e0:	690f      	ldr	r7, [r1, #16]
 800a8e2:	2f00      	cmp	r7, #0
 800a8e4:	d0a2      	beq.n	800a82c <__sflush_r+0x18>
 800a8e6:	680a      	ldr	r2, [r1, #0]
 800a8e8:	600f      	str	r7, [r1, #0]
 800a8ea:	1bd2      	subs	r2, r2, r7
 800a8ec:	9201      	str	r2, [sp, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	079b      	lsls	r3, r3, #30
 800a8f2:	d100      	bne.n	800a8f6 <__sflush_r+0xe2>
 800a8f4:	694a      	ldr	r2, [r1, #20]
 800a8f6:	60a2      	str	r2, [r4, #8]
 800a8f8:	9b01      	ldr	r3, [sp, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	dc00      	bgt.n	800a900 <__sflush_r+0xec>
 800a8fe:	e795      	b.n	800a82c <__sflush_r+0x18>
 800a900:	003a      	movs	r2, r7
 800a902:	0028      	movs	r0, r5
 800a904:	9b01      	ldr	r3, [sp, #4]
 800a906:	6a21      	ldr	r1, [r4, #32]
 800a908:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a90a:	47b0      	blx	r6
 800a90c:	2800      	cmp	r0, #0
 800a90e:	dc06      	bgt.n	800a91e <__sflush_r+0x10a>
 800a910:	2340      	movs	r3, #64	; 0x40
 800a912:	2001      	movs	r0, #1
 800a914:	89a2      	ldrh	r2, [r4, #12]
 800a916:	4240      	negs	r0, r0
 800a918:	4313      	orrs	r3, r2
 800a91a:	81a3      	strh	r3, [r4, #12]
 800a91c:	e787      	b.n	800a82e <__sflush_r+0x1a>
 800a91e:	9b01      	ldr	r3, [sp, #4]
 800a920:	183f      	adds	r7, r7, r0
 800a922:	1a1b      	subs	r3, r3, r0
 800a924:	9301      	str	r3, [sp, #4]
 800a926:	e7e7      	b.n	800a8f8 <__sflush_r+0xe4>
 800a928:	20400001 	.word	0x20400001

0800a92c <_fflush_r>:
 800a92c:	690b      	ldr	r3, [r1, #16]
 800a92e:	b570      	push	{r4, r5, r6, lr}
 800a930:	0005      	movs	r5, r0
 800a932:	000c      	movs	r4, r1
 800a934:	2b00      	cmp	r3, #0
 800a936:	d102      	bne.n	800a93e <_fflush_r+0x12>
 800a938:	2500      	movs	r5, #0
 800a93a:	0028      	movs	r0, r5
 800a93c:	bd70      	pop	{r4, r5, r6, pc}
 800a93e:	2800      	cmp	r0, #0
 800a940:	d004      	beq.n	800a94c <_fflush_r+0x20>
 800a942:	6983      	ldr	r3, [r0, #24]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d101      	bne.n	800a94c <_fflush_r+0x20>
 800a948:	f000 f892 	bl	800aa70 <__sinit>
 800a94c:	4b14      	ldr	r3, [pc, #80]	; (800a9a0 <_fflush_r+0x74>)
 800a94e:	429c      	cmp	r4, r3
 800a950:	d11b      	bne.n	800a98a <_fflush_r+0x5e>
 800a952:	686c      	ldr	r4, [r5, #4]
 800a954:	220c      	movs	r2, #12
 800a956:	5ea3      	ldrsh	r3, [r4, r2]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d0ed      	beq.n	800a938 <_fflush_r+0xc>
 800a95c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a95e:	07d2      	lsls	r2, r2, #31
 800a960:	d404      	bmi.n	800a96c <_fflush_r+0x40>
 800a962:	059b      	lsls	r3, r3, #22
 800a964:	d402      	bmi.n	800a96c <_fflush_r+0x40>
 800a966:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a968:	f000 f923 	bl	800abb2 <__retarget_lock_acquire_recursive>
 800a96c:	0028      	movs	r0, r5
 800a96e:	0021      	movs	r1, r4
 800a970:	f7ff ff50 	bl	800a814 <__sflush_r>
 800a974:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a976:	0005      	movs	r5, r0
 800a978:	07db      	lsls	r3, r3, #31
 800a97a:	d4de      	bmi.n	800a93a <_fflush_r+0xe>
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	059b      	lsls	r3, r3, #22
 800a980:	d4db      	bmi.n	800a93a <_fflush_r+0xe>
 800a982:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a984:	f000 f916 	bl	800abb4 <__retarget_lock_release_recursive>
 800a988:	e7d7      	b.n	800a93a <_fflush_r+0xe>
 800a98a:	4b06      	ldr	r3, [pc, #24]	; (800a9a4 <_fflush_r+0x78>)
 800a98c:	429c      	cmp	r4, r3
 800a98e:	d101      	bne.n	800a994 <_fflush_r+0x68>
 800a990:	68ac      	ldr	r4, [r5, #8]
 800a992:	e7df      	b.n	800a954 <_fflush_r+0x28>
 800a994:	4b04      	ldr	r3, [pc, #16]	; (800a9a8 <_fflush_r+0x7c>)
 800a996:	429c      	cmp	r4, r3
 800a998:	d1dc      	bne.n	800a954 <_fflush_r+0x28>
 800a99a:	68ec      	ldr	r4, [r5, #12]
 800a99c:	e7da      	b.n	800a954 <_fflush_r+0x28>
 800a99e:	46c0      	nop			; (mov r8, r8)
 800a9a0:	0800b5c0 	.word	0x0800b5c0
 800a9a4:	0800b5e0 	.word	0x0800b5e0
 800a9a8:	0800b5a0 	.word	0x0800b5a0

0800a9ac <std>:
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	b510      	push	{r4, lr}
 800a9b0:	0004      	movs	r4, r0
 800a9b2:	6003      	str	r3, [r0, #0]
 800a9b4:	6043      	str	r3, [r0, #4]
 800a9b6:	6083      	str	r3, [r0, #8]
 800a9b8:	8181      	strh	r1, [r0, #12]
 800a9ba:	6643      	str	r3, [r0, #100]	; 0x64
 800a9bc:	0019      	movs	r1, r3
 800a9be:	81c2      	strh	r2, [r0, #14]
 800a9c0:	6103      	str	r3, [r0, #16]
 800a9c2:	6143      	str	r3, [r0, #20]
 800a9c4:	6183      	str	r3, [r0, #24]
 800a9c6:	2208      	movs	r2, #8
 800a9c8:	305c      	adds	r0, #92	; 0x5c
 800a9ca:	f7fb fec6 	bl	800675a <memset>
 800a9ce:	4b05      	ldr	r3, [pc, #20]	; (800a9e4 <std+0x38>)
 800a9d0:	6224      	str	r4, [r4, #32]
 800a9d2:	6263      	str	r3, [r4, #36]	; 0x24
 800a9d4:	4b04      	ldr	r3, [pc, #16]	; (800a9e8 <std+0x3c>)
 800a9d6:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9d8:	4b04      	ldr	r3, [pc, #16]	; (800a9ec <std+0x40>)
 800a9da:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9dc:	4b04      	ldr	r3, [pc, #16]	; (800a9f0 <std+0x44>)
 800a9de:	6323      	str	r3, [r4, #48]	; 0x30
 800a9e0:	bd10      	pop	{r4, pc}
 800a9e2:	46c0      	nop			; (mov r8, r8)
 800a9e4:	0800ada9 	.word	0x0800ada9
 800a9e8:	0800add1 	.word	0x0800add1
 800a9ec:	0800ae09 	.word	0x0800ae09
 800a9f0:	0800ae35 	.word	0x0800ae35

0800a9f4 <_cleanup_r>:
 800a9f4:	b510      	push	{r4, lr}
 800a9f6:	4902      	ldr	r1, [pc, #8]	; (800aa00 <_cleanup_r+0xc>)
 800a9f8:	f000 f8ba 	bl	800ab70 <_fwalk_reent>
 800a9fc:	bd10      	pop	{r4, pc}
 800a9fe:	46c0      	nop			; (mov r8, r8)
 800aa00:	0800a92d 	.word	0x0800a92d

0800aa04 <__sfmoreglue>:
 800aa04:	b570      	push	{r4, r5, r6, lr}
 800aa06:	2568      	movs	r5, #104	; 0x68
 800aa08:	1e4a      	subs	r2, r1, #1
 800aa0a:	4355      	muls	r5, r2
 800aa0c:	000e      	movs	r6, r1
 800aa0e:	0029      	movs	r1, r5
 800aa10:	3174      	adds	r1, #116	; 0x74
 800aa12:	f7fb ff17 	bl	8006844 <_malloc_r>
 800aa16:	1e04      	subs	r4, r0, #0
 800aa18:	d008      	beq.n	800aa2c <__sfmoreglue+0x28>
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	002a      	movs	r2, r5
 800aa1e:	6001      	str	r1, [r0, #0]
 800aa20:	6046      	str	r6, [r0, #4]
 800aa22:	300c      	adds	r0, #12
 800aa24:	60a0      	str	r0, [r4, #8]
 800aa26:	3268      	adds	r2, #104	; 0x68
 800aa28:	f7fb fe97 	bl	800675a <memset>
 800aa2c:	0020      	movs	r0, r4
 800aa2e:	bd70      	pop	{r4, r5, r6, pc}

0800aa30 <__sfp_lock_acquire>:
 800aa30:	b510      	push	{r4, lr}
 800aa32:	4802      	ldr	r0, [pc, #8]	; (800aa3c <__sfp_lock_acquire+0xc>)
 800aa34:	f000 f8bd 	bl	800abb2 <__retarget_lock_acquire_recursive>
 800aa38:	bd10      	pop	{r4, pc}
 800aa3a:	46c0      	nop			; (mov r8, r8)
 800aa3c:	20000621 	.word	0x20000621

0800aa40 <__sfp_lock_release>:
 800aa40:	b510      	push	{r4, lr}
 800aa42:	4802      	ldr	r0, [pc, #8]	; (800aa4c <__sfp_lock_release+0xc>)
 800aa44:	f000 f8b6 	bl	800abb4 <__retarget_lock_release_recursive>
 800aa48:	bd10      	pop	{r4, pc}
 800aa4a:	46c0      	nop			; (mov r8, r8)
 800aa4c:	20000621 	.word	0x20000621

0800aa50 <__sinit_lock_acquire>:
 800aa50:	b510      	push	{r4, lr}
 800aa52:	4802      	ldr	r0, [pc, #8]	; (800aa5c <__sinit_lock_acquire+0xc>)
 800aa54:	f000 f8ad 	bl	800abb2 <__retarget_lock_acquire_recursive>
 800aa58:	bd10      	pop	{r4, pc}
 800aa5a:	46c0      	nop			; (mov r8, r8)
 800aa5c:	20000622 	.word	0x20000622

0800aa60 <__sinit_lock_release>:
 800aa60:	b510      	push	{r4, lr}
 800aa62:	4802      	ldr	r0, [pc, #8]	; (800aa6c <__sinit_lock_release+0xc>)
 800aa64:	f000 f8a6 	bl	800abb4 <__retarget_lock_release_recursive>
 800aa68:	bd10      	pop	{r4, pc}
 800aa6a:	46c0      	nop			; (mov r8, r8)
 800aa6c:	20000622 	.word	0x20000622

0800aa70 <__sinit>:
 800aa70:	b513      	push	{r0, r1, r4, lr}
 800aa72:	0004      	movs	r4, r0
 800aa74:	f7ff ffec 	bl	800aa50 <__sinit_lock_acquire>
 800aa78:	69a3      	ldr	r3, [r4, #24]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d002      	beq.n	800aa84 <__sinit+0x14>
 800aa7e:	f7ff ffef 	bl	800aa60 <__sinit_lock_release>
 800aa82:	bd13      	pop	{r0, r1, r4, pc}
 800aa84:	64a3      	str	r3, [r4, #72]	; 0x48
 800aa86:	64e3      	str	r3, [r4, #76]	; 0x4c
 800aa88:	6523      	str	r3, [r4, #80]	; 0x50
 800aa8a:	4b13      	ldr	r3, [pc, #76]	; (800aad8 <__sinit+0x68>)
 800aa8c:	4a13      	ldr	r2, [pc, #76]	; (800aadc <__sinit+0x6c>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa92:	9301      	str	r3, [sp, #4]
 800aa94:	42a3      	cmp	r3, r4
 800aa96:	d101      	bne.n	800aa9c <__sinit+0x2c>
 800aa98:	2301      	movs	r3, #1
 800aa9a:	61a3      	str	r3, [r4, #24]
 800aa9c:	0020      	movs	r0, r4
 800aa9e:	f000 f81f 	bl	800aae0 <__sfp>
 800aaa2:	6060      	str	r0, [r4, #4]
 800aaa4:	0020      	movs	r0, r4
 800aaa6:	f000 f81b 	bl	800aae0 <__sfp>
 800aaaa:	60a0      	str	r0, [r4, #8]
 800aaac:	0020      	movs	r0, r4
 800aaae:	f000 f817 	bl	800aae0 <__sfp>
 800aab2:	2200      	movs	r2, #0
 800aab4:	2104      	movs	r1, #4
 800aab6:	60e0      	str	r0, [r4, #12]
 800aab8:	6860      	ldr	r0, [r4, #4]
 800aaba:	f7ff ff77 	bl	800a9ac <std>
 800aabe:	2201      	movs	r2, #1
 800aac0:	2109      	movs	r1, #9
 800aac2:	68a0      	ldr	r0, [r4, #8]
 800aac4:	f7ff ff72 	bl	800a9ac <std>
 800aac8:	2202      	movs	r2, #2
 800aaca:	2112      	movs	r1, #18
 800aacc:	68e0      	ldr	r0, [r4, #12]
 800aace:	f7ff ff6d 	bl	800a9ac <std>
 800aad2:	2301      	movs	r3, #1
 800aad4:	61a3      	str	r3, [r4, #24]
 800aad6:	e7d2      	b.n	800aa7e <__sinit+0xe>
 800aad8:	0800b108 	.word	0x0800b108
 800aadc:	0800a9f5 	.word	0x0800a9f5

0800aae0 <__sfp>:
 800aae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae2:	0007      	movs	r7, r0
 800aae4:	f7ff ffa4 	bl	800aa30 <__sfp_lock_acquire>
 800aae8:	4b1f      	ldr	r3, [pc, #124]	; (800ab68 <__sfp+0x88>)
 800aaea:	681e      	ldr	r6, [r3, #0]
 800aaec:	69b3      	ldr	r3, [r6, #24]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d102      	bne.n	800aaf8 <__sfp+0x18>
 800aaf2:	0030      	movs	r0, r6
 800aaf4:	f7ff ffbc 	bl	800aa70 <__sinit>
 800aaf8:	3648      	adds	r6, #72	; 0x48
 800aafa:	68b4      	ldr	r4, [r6, #8]
 800aafc:	6873      	ldr	r3, [r6, #4]
 800aafe:	3b01      	subs	r3, #1
 800ab00:	d504      	bpl.n	800ab0c <__sfp+0x2c>
 800ab02:	6833      	ldr	r3, [r6, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d022      	beq.n	800ab4e <__sfp+0x6e>
 800ab08:	6836      	ldr	r6, [r6, #0]
 800ab0a:	e7f6      	b.n	800aafa <__sfp+0x1a>
 800ab0c:	220c      	movs	r2, #12
 800ab0e:	5ea5      	ldrsh	r5, [r4, r2]
 800ab10:	2d00      	cmp	r5, #0
 800ab12:	d11a      	bne.n	800ab4a <__sfp+0x6a>
 800ab14:	0020      	movs	r0, r4
 800ab16:	4b15      	ldr	r3, [pc, #84]	; (800ab6c <__sfp+0x8c>)
 800ab18:	3058      	adds	r0, #88	; 0x58
 800ab1a:	60e3      	str	r3, [r4, #12]
 800ab1c:	6665      	str	r5, [r4, #100]	; 0x64
 800ab1e:	f000 f847 	bl	800abb0 <__retarget_lock_init_recursive>
 800ab22:	f7ff ff8d 	bl	800aa40 <__sfp_lock_release>
 800ab26:	0020      	movs	r0, r4
 800ab28:	2208      	movs	r2, #8
 800ab2a:	0029      	movs	r1, r5
 800ab2c:	6025      	str	r5, [r4, #0]
 800ab2e:	60a5      	str	r5, [r4, #8]
 800ab30:	6065      	str	r5, [r4, #4]
 800ab32:	6125      	str	r5, [r4, #16]
 800ab34:	6165      	str	r5, [r4, #20]
 800ab36:	61a5      	str	r5, [r4, #24]
 800ab38:	305c      	adds	r0, #92	; 0x5c
 800ab3a:	f7fb fe0e 	bl	800675a <memset>
 800ab3e:	6365      	str	r5, [r4, #52]	; 0x34
 800ab40:	63a5      	str	r5, [r4, #56]	; 0x38
 800ab42:	64a5      	str	r5, [r4, #72]	; 0x48
 800ab44:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ab46:	0020      	movs	r0, r4
 800ab48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab4a:	3468      	adds	r4, #104	; 0x68
 800ab4c:	e7d7      	b.n	800aafe <__sfp+0x1e>
 800ab4e:	2104      	movs	r1, #4
 800ab50:	0038      	movs	r0, r7
 800ab52:	f7ff ff57 	bl	800aa04 <__sfmoreglue>
 800ab56:	1e04      	subs	r4, r0, #0
 800ab58:	6030      	str	r0, [r6, #0]
 800ab5a:	d1d5      	bne.n	800ab08 <__sfp+0x28>
 800ab5c:	f7ff ff70 	bl	800aa40 <__sfp_lock_release>
 800ab60:	230c      	movs	r3, #12
 800ab62:	603b      	str	r3, [r7, #0]
 800ab64:	e7ef      	b.n	800ab46 <__sfp+0x66>
 800ab66:	46c0      	nop			; (mov r8, r8)
 800ab68:	0800b108 	.word	0x0800b108
 800ab6c:	ffff0001 	.word	0xffff0001

0800ab70 <_fwalk_reent>:
 800ab70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab72:	0004      	movs	r4, r0
 800ab74:	0006      	movs	r6, r0
 800ab76:	2700      	movs	r7, #0
 800ab78:	9101      	str	r1, [sp, #4]
 800ab7a:	3448      	adds	r4, #72	; 0x48
 800ab7c:	6863      	ldr	r3, [r4, #4]
 800ab7e:	68a5      	ldr	r5, [r4, #8]
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	9b00      	ldr	r3, [sp, #0]
 800ab84:	3b01      	subs	r3, #1
 800ab86:	9300      	str	r3, [sp, #0]
 800ab88:	d504      	bpl.n	800ab94 <_fwalk_reent+0x24>
 800ab8a:	6824      	ldr	r4, [r4, #0]
 800ab8c:	2c00      	cmp	r4, #0
 800ab8e:	d1f5      	bne.n	800ab7c <_fwalk_reent+0xc>
 800ab90:	0038      	movs	r0, r7
 800ab92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab94:	89ab      	ldrh	r3, [r5, #12]
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d908      	bls.n	800abac <_fwalk_reent+0x3c>
 800ab9a:	220e      	movs	r2, #14
 800ab9c:	5eab      	ldrsh	r3, [r5, r2]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	d004      	beq.n	800abac <_fwalk_reent+0x3c>
 800aba2:	0029      	movs	r1, r5
 800aba4:	0030      	movs	r0, r6
 800aba6:	9b01      	ldr	r3, [sp, #4]
 800aba8:	4798      	blx	r3
 800abaa:	4307      	orrs	r7, r0
 800abac:	3568      	adds	r5, #104	; 0x68
 800abae:	e7e8      	b.n	800ab82 <_fwalk_reent+0x12>

0800abb0 <__retarget_lock_init_recursive>:
 800abb0:	4770      	bx	lr

0800abb2 <__retarget_lock_acquire_recursive>:
 800abb2:	4770      	bx	lr

0800abb4 <__retarget_lock_release_recursive>:
 800abb4:	4770      	bx	lr
	...

0800abb8 <__swhatbuf_r>:
 800abb8:	b570      	push	{r4, r5, r6, lr}
 800abba:	000e      	movs	r6, r1
 800abbc:	001d      	movs	r5, r3
 800abbe:	230e      	movs	r3, #14
 800abc0:	5ec9      	ldrsh	r1, [r1, r3]
 800abc2:	0014      	movs	r4, r2
 800abc4:	b096      	sub	sp, #88	; 0x58
 800abc6:	2900      	cmp	r1, #0
 800abc8:	da08      	bge.n	800abdc <__swhatbuf_r+0x24>
 800abca:	220c      	movs	r2, #12
 800abcc:	5eb3      	ldrsh	r3, [r6, r2]
 800abce:	2200      	movs	r2, #0
 800abd0:	602a      	str	r2, [r5, #0]
 800abd2:	061b      	lsls	r3, r3, #24
 800abd4:	d411      	bmi.n	800abfa <__swhatbuf_r+0x42>
 800abd6:	2380      	movs	r3, #128	; 0x80
 800abd8:	00db      	lsls	r3, r3, #3
 800abda:	e00f      	b.n	800abfc <__swhatbuf_r+0x44>
 800abdc:	466a      	mov	r2, sp
 800abde:	f000 f955 	bl	800ae8c <_fstat_r>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	dbf1      	blt.n	800abca <__swhatbuf_r+0x12>
 800abe6:	23f0      	movs	r3, #240	; 0xf0
 800abe8:	9901      	ldr	r1, [sp, #4]
 800abea:	021b      	lsls	r3, r3, #8
 800abec:	4019      	ands	r1, r3
 800abee:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <__swhatbuf_r+0x4c>)
 800abf0:	18c9      	adds	r1, r1, r3
 800abf2:	424b      	negs	r3, r1
 800abf4:	4159      	adcs	r1, r3
 800abf6:	6029      	str	r1, [r5, #0]
 800abf8:	e7ed      	b.n	800abd6 <__swhatbuf_r+0x1e>
 800abfa:	2340      	movs	r3, #64	; 0x40
 800abfc:	2000      	movs	r0, #0
 800abfe:	6023      	str	r3, [r4, #0]
 800ac00:	b016      	add	sp, #88	; 0x58
 800ac02:	bd70      	pop	{r4, r5, r6, pc}
 800ac04:	ffffe000 	.word	0xffffe000

0800ac08 <__smakebuf_r>:
 800ac08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac0a:	2602      	movs	r6, #2
 800ac0c:	898b      	ldrh	r3, [r1, #12]
 800ac0e:	0005      	movs	r5, r0
 800ac10:	000c      	movs	r4, r1
 800ac12:	4233      	tst	r3, r6
 800ac14:	d006      	beq.n	800ac24 <__smakebuf_r+0x1c>
 800ac16:	0023      	movs	r3, r4
 800ac18:	3347      	adds	r3, #71	; 0x47
 800ac1a:	6023      	str	r3, [r4, #0]
 800ac1c:	6123      	str	r3, [r4, #16]
 800ac1e:	2301      	movs	r3, #1
 800ac20:	6163      	str	r3, [r4, #20]
 800ac22:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ac24:	466a      	mov	r2, sp
 800ac26:	ab01      	add	r3, sp, #4
 800ac28:	f7ff ffc6 	bl	800abb8 <__swhatbuf_r>
 800ac2c:	9900      	ldr	r1, [sp, #0]
 800ac2e:	0007      	movs	r7, r0
 800ac30:	0028      	movs	r0, r5
 800ac32:	f7fb fe07 	bl	8006844 <_malloc_r>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d108      	bne.n	800ac4c <__smakebuf_r+0x44>
 800ac3a:	220c      	movs	r2, #12
 800ac3c:	5ea3      	ldrsh	r3, [r4, r2]
 800ac3e:	059a      	lsls	r2, r3, #22
 800ac40:	d4ef      	bmi.n	800ac22 <__smakebuf_r+0x1a>
 800ac42:	2203      	movs	r2, #3
 800ac44:	4393      	bics	r3, r2
 800ac46:	431e      	orrs	r6, r3
 800ac48:	81a6      	strh	r6, [r4, #12]
 800ac4a:	e7e4      	b.n	800ac16 <__smakebuf_r+0xe>
 800ac4c:	4b0f      	ldr	r3, [pc, #60]	; (800ac8c <__smakebuf_r+0x84>)
 800ac4e:	62ab      	str	r3, [r5, #40]	; 0x28
 800ac50:	2380      	movs	r3, #128	; 0x80
 800ac52:	89a2      	ldrh	r2, [r4, #12]
 800ac54:	6020      	str	r0, [r4, #0]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	81a3      	strh	r3, [r4, #12]
 800ac5a:	9b00      	ldr	r3, [sp, #0]
 800ac5c:	6120      	str	r0, [r4, #16]
 800ac5e:	6163      	str	r3, [r4, #20]
 800ac60:	9b01      	ldr	r3, [sp, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00d      	beq.n	800ac82 <__smakebuf_r+0x7a>
 800ac66:	0028      	movs	r0, r5
 800ac68:	230e      	movs	r3, #14
 800ac6a:	5ee1      	ldrsh	r1, [r4, r3]
 800ac6c:	f000 f920 	bl	800aeb0 <_isatty_r>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d006      	beq.n	800ac82 <__smakebuf_r+0x7a>
 800ac74:	2203      	movs	r2, #3
 800ac76:	89a3      	ldrh	r3, [r4, #12]
 800ac78:	4393      	bics	r3, r2
 800ac7a:	001a      	movs	r2, r3
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	81a3      	strh	r3, [r4, #12]
 800ac82:	89a0      	ldrh	r0, [r4, #12]
 800ac84:	4307      	orrs	r7, r0
 800ac86:	81a7      	strh	r7, [r4, #12]
 800ac88:	e7cb      	b.n	800ac22 <__smakebuf_r+0x1a>
 800ac8a:	46c0      	nop			; (mov r8, r8)
 800ac8c:	0800a9f5 	.word	0x0800a9f5

0800ac90 <memmove>:
 800ac90:	b510      	push	{r4, lr}
 800ac92:	4288      	cmp	r0, r1
 800ac94:	d902      	bls.n	800ac9c <memmove+0xc>
 800ac96:	188b      	adds	r3, r1, r2
 800ac98:	4298      	cmp	r0, r3
 800ac9a:	d303      	bcc.n	800aca4 <memmove+0x14>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	e007      	b.n	800acb0 <memmove+0x20>
 800aca0:	5c8b      	ldrb	r3, [r1, r2]
 800aca2:	5483      	strb	r3, [r0, r2]
 800aca4:	3a01      	subs	r2, #1
 800aca6:	d2fb      	bcs.n	800aca0 <memmove+0x10>
 800aca8:	bd10      	pop	{r4, pc}
 800acaa:	5ccc      	ldrb	r4, [r1, r3]
 800acac:	54c4      	strb	r4, [r0, r3]
 800acae:	3301      	adds	r3, #1
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d1fa      	bne.n	800acaa <memmove+0x1a>
 800acb4:	e7f8      	b.n	800aca8 <memmove+0x18>

0800acb6 <_realloc_r>:
 800acb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acb8:	0007      	movs	r7, r0
 800acba:	000e      	movs	r6, r1
 800acbc:	0014      	movs	r4, r2
 800acbe:	2900      	cmp	r1, #0
 800acc0:	d105      	bne.n	800acce <_realloc_r+0x18>
 800acc2:	0011      	movs	r1, r2
 800acc4:	f7fb fdbe 	bl	8006844 <_malloc_r>
 800acc8:	0005      	movs	r5, r0
 800acca:	0028      	movs	r0, r5
 800accc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800acce:	2a00      	cmp	r2, #0
 800acd0:	d103      	bne.n	800acda <_realloc_r+0x24>
 800acd2:	f7fb fd4b 	bl	800676c <_free_r>
 800acd6:	0025      	movs	r5, r4
 800acd8:	e7f7      	b.n	800acca <_realloc_r+0x14>
 800acda:	f000 f90f 	bl	800aefc <_malloc_usable_size_r>
 800acde:	9001      	str	r0, [sp, #4]
 800ace0:	4284      	cmp	r4, r0
 800ace2:	d803      	bhi.n	800acec <_realloc_r+0x36>
 800ace4:	0035      	movs	r5, r6
 800ace6:	0843      	lsrs	r3, r0, #1
 800ace8:	42a3      	cmp	r3, r4
 800acea:	d3ee      	bcc.n	800acca <_realloc_r+0x14>
 800acec:	0021      	movs	r1, r4
 800acee:	0038      	movs	r0, r7
 800acf0:	f7fb fda8 	bl	8006844 <_malloc_r>
 800acf4:	1e05      	subs	r5, r0, #0
 800acf6:	d0e8      	beq.n	800acca <_realloc_r+0x14>
 800acf8:	9b01      	ldr	r3, [sp, #4]
 800acfa:	0022      	movs	r2, r4
 800acfc:	429c      	cmp	r4, r3
 800acfe:	d900      	bls.n	800ad02 <_realloc_r+0x4c>
 800ad00:	001a      	movs	r2, r3
 800ad02:	0031      	movs	r1, r6
 800ad04:	0028      	movs	r0, r5
 800ad06:	f7fb fd1f 	bl	8006748 <memcpy>
 800ad0a:	0031      	movs	r1, r6
 800ad0c:	0038      	movs	r0, r7
 800ad0e:	f7fb fd2d 	bl	800676c <_free_r>
 800ad12:	e7da      	b.n	800acca <_realloc_r+0x14>

0800ad14 <_raise_r>:
 800ad14:	b570      	push	{r4, r5, r6, lr}
 800ad16:	0004      	movs	r4, r0
 800ad18:	000d      	movs	r5, r1
 800ad1a:	291f      	cmp	r1, #31
 800ad1c:	d904      	bls.n	800ad28 <_raise_r+0x14>
 800ad1e:	2316      	movs	r3, #22
 800ad20:	6003      	str	r3, [r0, #0]
 800ad22:	2001      	movs	r0, #1
 800ad24:	4240      	negs	r0, r0
 800ad26:	bd70      	pop	{r4, r5, r6, pc}
 800ad28:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d004      	beq.n	800ad38 <_raise_r+0x24>
 800ad2e:	008a      	lsls	r2, r1, #2
 800ad30:	189b      	adds	r3, r3, r2
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	2a00      	cmp	r2, #0
 800ad36:	d108      	bne.n	800ad4a <_raise_r+0x36>
 800ad38:	0020      	movs	r0, r4
 800ad3a:	f000 f831 	bl	800ada0 <_getpid_r>
 800ad3e:	002a      	movs	r2, r5
 800ad40:	0001      	movs	r1, r0
 800ad42:	0020      	movs	r0, r4
 800ad44:	f000 f81a 	bl	800ad7c <_kill_r>
 800ad48:	e7ed      	b.n	800ad26 <_raise_r+0x12>
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	2a01      	cmp	r2, #1
 800ad4e:	d0ea      	beq.n	800ad26 <_raise_r+0x12>
 800ad50:	1c51      	adds	r1, r2, #1
 800ad52:	d103      	bne.n	800ad5c <_raise_r+0x48>
 800ad54:	2316      	movs	r3, #22
 800ad56:	3001      	adds	r0, #1
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	e7e4      	b.n	800ad26 <_raise_r+0x12>
 800ad5c:	2400      	movs	r4, #0
 800ad5e:	0028      	movs	r0, r5
 800ad60:	601c      	str	r4, [r3, #0]
 800ad62:	4790      	blx	r2
 800ad64:	0020      	movs	r0, r4
 800ad66:	e7de      	b.n	800ad26 <_raise_r+0x12>

0800ad68 <raise>:
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	4b03      	ldr	r3, [pc, #12]	; (800ad78 <raise+0x10>)
 800ad6c:	0001      	movs	r1, r0
 800ad6e:	6818      	ldr	r0, [r3, #0]
 800ad70:	f7ff ffd0 	bl	800ad14 <_raise_r>
 800ad74:	bd10      	pop	{r4, pc}
 800ad76:	46c0      	nop			; (mov r8, r8)
 800ad78:	2000000c 	.word	0x2000000c

0800ad7c <_kill_r>:
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	b570      	push	{r4, r5, r6, lr}
 800ad80:	4d06      	ldr	r5, [pc, #24]	; (800ad9c <_kill_r+0x20>)
 800ad82:	0004      	movs	r4, r0
 800ad84:	0008      	movs	r0, r1
 800ad86:	0011      	movs	r1, r2
 800ad88:	602b      	str	r3, [r5, #0]
 800ad8a:	f7f8 ffd3 	bl	8003d34 <_kill>
 800ad8e:	1c43      	adds	r3, r0, #1
 800ad90:	d103      	bne.n	800ad9a <_kill_r+0x1e>
 800ad92:	682b      	ldr	r3, [r5, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d000      	beq.n	800ad9a <_kill_r+0x1e>
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	bd70      	pop	{r4, r5, r6, pc}
 800ad9c:	2000061c 	.word	0x2000061c

0800ada0 <_getpid_r>:
 800ada0:	b510      	push	{r4, lr}
 800ada2:	f7f8 ffc1 	bl	8003d28 <_getpid>
 800ada6:	bd10      	pop	{r4, pc}

0800ada8 <__sread>:
 800ada8:	b570      	push	{r4, r5, r6, lr}
 800adaa:	000c      	movs	r4, r1
 800adac:	250e      	movs	r5, #14
 800adae:	5f49      	ldrsh	r1, [r1, r5]
 800adb0:	f000 f8ac 	bl	800af0c <_read_r>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	db03      	blt.n	800adc0 <__sread+0x18>
 800adb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800adba:	181b      	adds	r3, r3, r0
 800adbc:	6563      	str	r3, [r4, #84]	; 0x54
 800adbe:	bd70      	pop	{r4, r5, r6, pc}
 800adc0:	89a3      	ldrh	r3, [r4, #12]
 800adc2:	4a02      	ldr	r2, [pc, #8]	; (800adcc <__sread+0x24>)
 800adc4:	4013      	ands	r3, r2
 800adc6:	81a3      	strh	r3, [r4, #12]
 800adc8:	e7f9      	b.n	800adbe <__sread+0x16>
 800adca:	46c0      	nop			; (mov r8, r8)
 800adcc:	ffffefff 	.word	0xffffefff

0800add0 <__swrite>:
 800add0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add2:	001f      	movs	r7, r3
 800add4:	898b      	ldrh	r3, [r1, #12]
 800add6:	0005      	movs	r5, r0
 800add8:	000c      	movs	r4, r1
 800adda:	0016      	movs	r6, r2
 800addc:	05db      	lsls	r3, r3, #23
 800adde:	d505      	bpl.n	800adec <__swrite+0x1c>
 800ade0:	230e      	movs	r3, #14
 800ade2:	5ec9      	ldrsh	r1, [r1, r3]
 800ade4:	2200      	movs	r2, #0
 800ade6:	2302      	movs	r3, #2
 800ade8:	f000 f874 	bl	800aed4 <_lseek_r>
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	4a05      	ldr	r2, [pc, #20]	; (800ae04 <__swrite+0x34>)
 800adf0:	0028      	movs	r0, r5
 800adf2:	4013      	ands	r3, r2
 800adf4:	81a3      	strh	r3, [r4, #12]
 800adf6:	0032      	movs	r2, r6
 800adf8:	230e      	movs	r3, #14
 800adfa:	5ee1      	ldrsh	r1, [r4, r3]
 800adfc:	003b      	movs	r3, r7
 800adfe:	f000 f81f 	bl	800ae40 <_write_r>
 800ae02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae04:	ffffefff 	.word	0xffffefff

0800ae08 <__sseek>:
 800ae08:	b570      	push	{r4, r5, r6, lr}
 800ae0a:	000c      	movs	r4, r1
 800ae0c:	250e      	movs	r5, #14
 800ae0e:	5f49      	ldrsh	r1, [r1, r5]
 800ae10:	f000 f860 	bl	800aed4 <_lseek_r>
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	1c42      	adds	r2, r0, #1
 800ae18:	d103      	bne.n	800ae22 <__sseek+0x1a>
 800ae1a:	4a05      	ldr	r2, [pc, #20]	; (800ae30 <__sseek+0x28>)
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	81a3      	strh	r3, [r4, #12]
 800ae20:	bd70      	pop	{r4, r5, r6, pc}
 800ae22:	2280      	movs	r2, #128	; 0x80
 800ae24:	0152      	lsls	r2, r2, #5
 800ae26:	4313      	orrs	r3, r2
 800ae28:	81a3      	strh	r3, [r4, #12]
 800ae2a:	6560      	str	r0, [r4, #84]	; 0x54
 800ae2c:	e7f8      	b.n	800ae20 <__sseek+0x18>
 800ae2e:	46c0      	nop			; (mov r8, r8)
 800ae30:	ffffefff 	.word	0xffffefff

0800ae34 <__sclose>:
 800ae34:	b510      	push	{r4, lr}
 800ae36:	230e      	movs	r3, #14
 800ae38:	5ec9      	ldrsh	r1, [r1, r3]
 800ae3a:	f000 f815 	bl	800ae68 <_close_r>
 800ae3e:	bd10      	pop	{r4, pc}

0800ae40 <_write_r>:
 800ae40:	b570      	push	{r4, r5, r6, lr}
 800ae42:	0004      	movs	r4, r0
 800ae44:	0008      	movs	r0, r1
 800ae46:	0011      	movs	r1, r2
 800ae48:	001a      	movs	r2, r3
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	4d05      	ldr	r5, [pc, #20]	; (800ae64 <_write_r+0x24>)
 800ae4e:	602b      	str	r3, [r5, #0]
 800ae50:	f7f8 ffa9 	bl	8003da6 <_write>
 800ae54:	1c43      	adds	r3, r0, #1
 800ae56:	d103      	bne.n	800ae60 <_write_r+0x20>
 800ae58:	682b      	ldr	r3, [r5, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d000      	beq.n	800ae60 <_write_r+0x20>
 800ae5e:	6023      	str	r3, [r4, #0]
 800ae60:	bd70      	pop	{r4, r5, r6, pc}
 800ae62:	46c0      	nop			; (mov r8, r8)
 800ae64:	2000061c 	.word	0x2000061c

0800ae68 <_close_r>:
 800ae68:	2300      	movs	r3, #0
 800ae6a:	b570      	push	{r4, r5, r6, lr}
 800ae6c:	4d06      	ldr	r5, [pc, #24]	; (800ae88 <_close_r+0x20>)
 800ae6e:	0004      	movs	r4, r0
 800ae70:	0008      	movs	r0, r1
 800ae72:	602b      	str	r3, [r5, #0]
 800ae74:	f7f8 ffb3 	bl	8003dde <_close>
 800ae78:	1c43      	adds	r3, r0, #1
 800ae7a:	d103      	bne.n	800ae84 <_close_r+0x1c>
 800ae7c:	682b      	ldr	r3, [r5, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d000      	beq.n	800ae84 <_close_r+0x1c>
 800ae82:	6023      	str	r3, [r4, #0]
 800ae84:	bd70      	pop	{r4, r5, r6, pc}
 800ae86:	46c0      	nop			; (mov r8, r8)
 800ae88:	2000061c 	.word	0x2000061c

0800ae8c <_fstat_r>:
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	b570      	push	{r4, r5, r6, lr}
 800ae90:	4d06      	ldr	r5, [pc, #24]	; (800aeac <_fstat_r+0x20>)
 800ae92:	0004      	movs	r4, r0
 800ae94:	0008      	movs	r0, r1
 800ae96:	0011      	movs	r1, r2
 800ae98:	602b      	str	r3, [r5, #0]
 800ae9a:	f7f8 ffaa 	bl	8003df2 <_fstat>
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	d103      	bne.n	800aeaa <_fstat_r+0x1e>
 800aea2:	682b      	ldr	r3, [r5, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d000      	beq.n	800aeaa <_fstat_r+0x1e>
 800aea8:	6023      	str	r3, [r4, #0]
 800aeaa:	bd70      	pop	{r4, r5, r6, pc}
 800aeac:	2000061c 	.word	0x2000061c

0800aeb0 <_isatty_r>:
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	b570      	push	{r4, r5, r6, lr}
 800aeb4:	4d06      	ldr	r5, [pc, #24]	; (800aed0 <_isatty_r+0x20>)
 800aeb6:	0004      	movs	r4, r0
 800aeb8:	0008      	movs	r0, r1
 800aeba:	602b      	str	r3, [r5, #0]
 800aebc:	f7f8 ffa7 	bl	8003e0e <_isatty>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d103      	bne.n	800aecc <_isatty_r+0x1c>
 800aec4:	682b      	ldr	r3, [r5, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d000      	beq.n	800aecc <_isatty_r+0x1c>
 800aeca:	6023      	str	r3, [r4, #0]
 800aecc:	bd70      	pop	{r4, r5, r6, pc}
 800aece:	46c0      	nop			; (mov r8, r8)
 800aed0:	2000061c 	.word	0x2000061c

0800aed4 <_lseek_r>:
 800aed4:	b570      	push	{r4, r5, r6, lr}
 800aed6:	0004      	movs	r4, r0
 800aed8:	0008      	movs	r0, r1
 800aeda:	0011      	movs	r1, r2
 800aedc:	001a      	movs	r2, r3
 800aede:	2300      	movs	r3, #0
 800aee0:	4d05      	ldr	r5, [pc, #20]	; (800aef8 <_lseek_r+0x24>)
 800aee2:	602b      	str	r3, [r5, #0]
 800aee4:	f7f8 ff9c 	bl	8003e20 <_lseek>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d103      	bne.n	800aef4 <_lseek_r+0x20>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d000      	beq.n	800aef4 <_lseek_r+0x20>
 800aef2:	6023      	str	r3, [r4, #0]
 800aef4:	bd70      	pop	{r4, r5, r6, pc}
 800aef6:	46c0      	nop			; (mov r8, r8)
 800aef8:	2000061c 	.word	0x2000061c

0800aefc <_malloc_usable_size_r>:
 800aefc:	1f0b      	subs	r3, r1, #4
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	1f18      	subs	r0, r3, #4
 800af02:	2b00      	cmp	r3, #0
 800af04:	da01      	bge.n	800af0a <_malloc_usable_size_r+0xe>
 800af06:	580b      	ldr	r3, [r1, r0]
 800af08:	18c0      	adds	r0, r0, r3
 800af0a:	4770      	bx	lr

0800af0c <_read_r>:
 800af0c:	b570      	push	{r4, r5, r6, lr}
 800af0e:	0004      	movs	r4, r0
 800af10:	0008      	movs	r0, r1
 800af12:	0011      	movs	r1, r2
 800af14:	001a      	movs	r2, r3
 800af16:	2300      	movs	r3, #0
 800af18:	4d05      	ldr	r5, [pc, #20]	; (800af30 <_read_r+0x24>)
 800af1a:	602b      	str	r3, [r5, #0]
 800af1c:	f7f8 ff26 	bl	8003d6c <_read>
 800af20:	1c43      	adds	r3, r0, #1
 800af22:	d103      	bne.n	800af2c <_read_r+0x20>
 800af24:	682b      	ldr	r3, [r5, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d000      	beq.n	800af2c <_read_r+0x20>
 800af2a:	6023      	str	r3, [r4, #0]
 800af2c:	bd70      	pop	{r4, r5, r6, pc}
 800af2e:	46c0      	nop			; (mov r8, r8)
 800af30:	2000061c 	.word	0x2000061c

0800af34 <_init>:
 800af34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af36:	46c0      	nop			; (mov r8, r8)
 800af38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af3a:	bc08      	pop	{r3}
 800af3c:	469e      	mov	lr, r3
 800af3e:	4770      	bx	lr

0800af40 <_fini>:
 800af40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af42:	46c0      	nop			; (mov r8, r8)
 800af44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af46:	bc08      	pop	{r3}
 800af48:	469e      	mov	lr, r3
 800af4a:	4770      	bx	lr
